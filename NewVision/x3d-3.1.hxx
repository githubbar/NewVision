// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef X3D_3_1_HXX
#define X3D_3_1_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3010000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class SFVec3f;
class BoundingBoxSize;
class SFBool;
class MFBool;
class SFColor;
class MFColor;
class SFColorRGBA;
class MFColorRGBA;
class SFDouble;
class MFDouble;
class SFFloat;
class MFFloat;
class SFImage;
class MFImage;
class SFInt32;
class MFInt32;
class SFRotation;
class MFRotation;
class SFString;
class MFString;
class SFTime;
class MFTime;
class SFVec2f;
class MFVec2f;
class SFVec2d;
class MFVec2d;
class MFVec3f;
class SFVec3d;
class MFVec3d;
class SFVec4f;
class MFVec4f;
class SFVec4d;
class MFVec4d;
class SFMatrix3f;
class MFMatrix3f;
class SFMatrix3d;
class MFMatrix3d;
class SFMatrix4f;
class MFMatrix4f;
class SFMatrix4d;
class MFMatrix4d;
class accessTypeNames;
class ArcClose2dTypeValues;
class componentNames;
class fieldTypeName;
class fontStyleValues;
class fogTypeValues;
class shaderPartTypeValues;
class metaDirectionValues;
class networkModeValues;
class profileNames;
class x3dVersion;
class initializeOnlyAccessTypes;
class inputOnlyAccessTypes;
class outputOnlyAccessTypes;
class inputOutputAccessTypes;
class X3DNode;
class X3DAppearanceNode;
class X3DAppearanceChildNode;
class X3DChildNode;
class X3DBindableNode;
class X3DBackgroundNode;
class X3DBoundedObject;
class X3DGeometricPropertyNode;
class X3DColorNode;
class X3DGeometryNode;
class X3DComposedGeometryNode;
class X3DCoordinateNode;
class X3DSensorNode;
class X3DPointingDeviceSensorNode;
class X3DDragSensorNode;
class X3DEnvironmentalSensorNode;
class X3DEnvironmentTextureNode;
class X3DField;
class X3DFogObject;
class X3DFontStyleNode;
class X3DGroupingNode;
class X3DHumanoidNode;
class X3DInfoNode;
class X3DInterpolatorNode;
class X3DKeyDeviceSensorNode;
class X3DLightNode;
class X3DMaterialNode;
class X3DMetadataObject;
class X3DNetworkSensorNode;
class X3DNormalNode;
class X3DNurbsControlCurveNode;
class X3DParametricGeometryNode;
class X3DNurbsSurfaceGeometryNode;
class X3DProductStructureChildNode;
class X3DProgrammableShaderObject;
class X3DPrototypeInstanceNode;
class X3DScriptNode;
class X3DSequencerNode;
class X3DShaderNode;
class X3DShapeNode;
class X3DSoundNode;
class X3DTimeDependentNode;
class X3DSoundSourceNode;
class X3DTextureNode;
class X3DTexture2DNode;
class X3DTexture3DNode;
class X3DTextureCoordinateNode;
class X3DTextureTransformNode;
class X3DTextureTransform2DNode;
class X3DTouchSensorNode;
class X3DTriggerNode;
class X3DUrlObject;
class X3DVertexAttributeNode;
class SceneGraphStructureNodeType;
class X3DPrototype;
class WildcardNodeType;
class geoSystemType;
class jointName;
class ambientIntensity;
class intensity;
class Anchor;
class Appearance;
class Arc2D;
class ArcClose2D;
class AudioClip;
class Background;
class Billboard;
class BooleanFilter;
class BooleanSequencer;
class BooleanToggle;
class BooleanTrigger;
class Box;
class Circle2D;
class Collision;
class Color;
class ColorRGBA;
class ColorInterpolator;
class Cone;
class Coordinate;
class CoordinateDouble;
class CoordinateInterpolator;
class CoordinateInterpolator2D;
class Cylinder;
class CylinderSensor;
class DirectionalLight;
class Disk2D;
class ElevationGrid;
class Extrusion;
class FillProperties;
class Fog;
class FogCoordinate;
class FontStyle;
class Group;
class ImageTexture;
class IndexedFaceSet;
class IndexedLineSet;
class IndexedTriangleFanSet;
class IndexedTriangleSet;
class IndexedTriangleStripSet;
class Inline;
class IntegerSequencer;
class IntegerTrigger;
class KeySensor;
class LineProperties;
class LineSet;
class LoadSensor;
class LocalFog;
class LOD;
class Material;
class MetadataDouble;
class MetadataFloat;
class MetadataInteger;
class MetadataSet;
class MetadataString;
class MovieTexture;
class MultiTexture;
class MultiTextureCoordinate;
class MultiTextureTransform;
class NavigationInfo;
class Normal;
class NormalInterpolator;
class OrientationInterpolator;
class PixelTexture;
class PlaneSensor;
class PointLight;
class PointSet;
class Polyline2D;
class Polypoint2D;
class PositionInterpolator;
class PositionInterpolator2D;
class ProximitySensor;
class Rectangle2D;
class ScalarInterpolator;
class Script;
class Shape;
class Sound;
class Sphere;
class SphereSensor;
class SpotLight;
class StaticGroup;
class StringSensor;
class Switch;
class Text;
class TextureBackground;
class TextureCoordinate;
class TextureCoordinateGenerator;
class TextureTransform;
class TimeSensor;
class TimeTrigger;
class TouchSensor;
class Transform;
class TriangleFanSet;
class TriangleSet;
class TriangleSet2D;
class TriangleStripSet;
class Viewpoint;
class VisibilitySensor;
class WorldInfo;
class component;
class EXPORT;
class IMPORT;
class IS;
class connect;
class field;
class fieldValue;
class head;
class meta;
class ExternProtoDeclare;
class ProtoDeclare;
class ProtoInterface;
class ProtoBody;
class ProtoInstance;
class ROUTE;
class Scene;
class X3D;
class EspduTransform;
class ReceiverPdu;
class SignalPdu;
class TransmitterPdu;
class GeoCoordinate;
class GeoElevationGrid;
class GeoLocation;
class GeoLOD;
class GeoMetadata;
class GeoOrigin;
class GeoPositionInterpolator;
class GeoTouchSensor;
class GeoViewpoint;
class HAnimDisplacer;
class HAnimHumanoid;
class HAnimJoint;
class HAnimSegment;
class HAnimSite;
class Contour2D;
class ContourPolyline2D;
class NurbsCurve;
class NurbsCurve2D;
class NurbsOrientationInterpolator;
class NurbsPatchSurface;
class NurbsPositionInterpolator;
class NurbsSet;
class NurbsSurfaceInterpolator;
class NurbsSweptSurface;
class NurbsSwungSurface;
class NurbsTextureCoordinate;
class NurbsTrimmedSurface;
class CADAssembly;
class CADFace;
class CADLayer;
class CADPart;
class IndexedQuadSet;
class QuadSet;
class ComposedShader;
class FloatVertexAttribute;
class Matrix3VertexAttribute;
class Matrix4VertexAttribute;
class PackagedShader;
class ProgramShader;
class ShaderPart;
class ShaderProgram;
class ComposedCubeMapTexture;
class GeneratedCubeMapTexture;
class ImageCubeMapTexture;
class ComposedTexture3D;
class ImageTexture3D;
class PixelTexture3D;
class TextureCoordinate3D;
class TextureCoordinate4D;
class TextureMatrixTransform;
class TextureTransform3D;
class radius;
class radius1;
class radius2;
class bottomRadius;
class height;
class height1;
class radius3;
class innerRadius;
class outerRadius;
class creaseAngle;
class xSpacing;
class zSpacing;
class creaseAngle1;
class creaseAngle2;
class ambientIntensity1;
class shininess;
class transparency;
class radius4;
class radius5;
class beamWidth;
class radius6;
class maxExtent;
class creaseAngle3;
class xSpacing1;
class yScale;
class zSpacing1;
class numComponents;
class update;
class size;

#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "x3d-3.1-Web3dExtensionsPublic.hxx"

#include "x3d-3.1-Web3dExtensionsPrivate.hxx"

class SFVec3f: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFVec3f ();

  SFVec3f (const char*);

  SFVec3f (const ::std::string&);

  SFVec3f (const ::xml_schema::string&);

  SFVec3f (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec3f (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec3f (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec3f (const SFVec3f& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual SFVec3f*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFVec3f ();
};

class BoundingBoxSize: public ::SFVec3f
{
  public:
  // Constructors.
  //
  BoundingBoxSize ();

  BoundingBoxSize (const char*);

  BoundingBoxSize (const ::std::string&);

  BoundingBoxSize (const ::xml_schema::string&);

  BoundingBoxSize (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  BoundingBoxSize (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  BoundingBoxSize (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  BoundingBoxSize (const BoundingBoxSize& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual BoundingBoxSize*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~BoundingBoxSize ();
};

class SFBool: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  SFBool (const ::xml_schema::boolean&);

  SFBool (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  SFBool (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  SFBool (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  SFBool (const SFBool& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual SFBool*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFBool ();
};

class MFBool: public ::xml_schema::simple_type, public ::xsd::cxx::tree::list< ::xml_schema::boolean, char >
{
  public:
  MFBool ();

  MFBool (size_type n, const ::xml_schema::boolean& x);

  template <typename I>
  MFBool (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (begin, end)
  {
  }

  MFBool (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  MFBool (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  MFBool (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  MFBool (const MFBool& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual MFBool*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFBool ();
};

class SFColor: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFColor ();

  SFColor (const char*);

  SFColor (const ::std::string&);

  SFColor (const ::xml_schema::string&);

  SFColor (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFColor (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFColor (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFColor (const SFColor& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual SFColor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFColor ();
};

class MFColor: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFColor ();

  MFColor (const char*);

  MFColor (const ::std::string&);

  MFColor (const ::xml_schema::string&);

  MFColor (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFColor (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFColor (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFColor (const MFColor& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MFColor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFColor ();
};

class SFColorRGBA: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFColorRGBA ();

  SFColorRGBA (const char*);

  SFColorRGBA (const ::std::string&);

  SFColorRGBA (const ::xml_schema::string&);

  SFColorRGBA (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  SFColorRGBA (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  SFColorRGBA (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  SFColorRGBA (const SFColorRGBA& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual SFColorRGBA*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFColorRGBA ();
};

class MFColorRGBA: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFColorRGBA ();

  MFColorRGBA (const char*);

  MFColorRGBA (const ::std::string&);

  MFColorRGBA (const ::xml_schema::string&);

  MFColorRGBA (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  MFColorRGBA (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  MFColorRGBA (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  MFColorRGBA (const MFColorRGBA& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual MFColorRGBA*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFColorRGBA ();
};

class SFDouble: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  SFDouble (const ::xml_schema::double_&);

  SFDouble (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  SFDouble (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  SFDouble (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  SFDouble (const SFDouble& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual SFDouble*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFDouble ();
};

class MFDouble: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFDouble ();

  MFDouble (const char*);

  MFDouble (const ::std::string&);

  MFDouble (const ::xml_schema::string&);

  MFDouble (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  MFDouble (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  MFDouble (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  MFDouble (const MFDouble& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual MFDouble*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFDouble ();
};

class SFFloat: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  SFFloat (const ::xml_schema::float_&);

  SFFloat (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFFloat (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFFloat (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFFloat (const SFFloat& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual SFFloat*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFFloat ();
};

class MFFloat: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFFloat ();

  MFFloat (const char*);

  MFFloat (const ::std::string&);

  MFFloat (const ::xml_schema::string&);

  MFFloat (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFFloat (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFFloat (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFFloat (const MFFloat& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MFFloat*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFFloat ();
};

class SFImage: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFImage ();

  SFImage (const char*);

  SFImage (const ::std::string&);

  SFImage (const ::xml_schema::string&);

  SFImage (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFImage (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFImage (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFImage (const SFImage& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual SFImage*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFImage ();
};

class MFImage: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFImage ();

  MFImage (const char*);

  MFImage (const ::std::string&);

  MFImage (const ::xml_schema::string&);

  MFImage (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFImage (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFImage (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFImage (const MFImage& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MFImage*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFImage ();
};

class SFInt32: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  SFInt32 (const ::xml_schema::integer&);

  SFInt32 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFInt32 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFInt32 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFInt32 (const SFInt32& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual SFInt32*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFInt32 ();
};

class MFInt32: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFInt32 ();

  MFInt32 (const char*);

  MFInt32 (const ::std::string&);

  MFInt32 (const ::xml_schema::string&);

  MFInt32 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFInt32 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFInt32 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFInt32 (const MFInt32& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MFInt32*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFInt32 ();
};

class SFRotation: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFRotation ();

  SFRotation (const char*);

  SFRotation (const ::std::string&);

  SFRotation (const ::xml_schema::string&);

  SFRotation (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFRotation (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFRotation (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFRotation (const SFRotation& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual SFRotation*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFRotation ();
};

class MFRotation: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFRotation ();

  MFRotation (const char*);

  MFRotation (const ::std::string&);

  MFRotation (const ::xml_schema::string&);

  MFRotation (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFRotation (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFRotation (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFRotation (const MFRotation& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual MFRotation*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFRotation ();
};

class SFString: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFString ();

  SFString (const char*);

  SFString (const ::std::string&);

  SFString (const ::xml_schema::string&);

  SFString (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  SFString (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  SFString (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  SFString (const SFString& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual SFString*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFString ();
};

class MFString: public ::xml_schema::simple_type, public ::xsd::cxx::tree::list< ::xml_schema::string, char >
{
  public:
  MFString ();

  MFString (size_type n, const ::xml_schema::string& x);

  template <typename I>
  MFString (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end)
  {
  }

  MFString (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  MFString (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  MFString (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  MFString (const MFString& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual MFString*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFString ();
};

class SFTime: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFTime ();

  SFTime (const char*);

  SFTime (const ::std::string&);

  SFTime (const ::xml_schema::string&);

  SFTime (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  SFTime (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  SFTime (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  SFTime (const SFTime& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual SFTime*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFTime ();
};

class MFTime: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFTime ();

  MFTime (const char*);

  MFTime (const ::std::string&);

  MFTime (const ::xml_schema::string&);

  MFTime (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  MFTime (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  MFTime (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  MFTime (const MFTime& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual MFTime*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFTime ();
};

class SFVec2f: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFVec2f ();

  SFVec2f (const char*);

  SFVec2f (const ::std::string&);

  SFVec2f (const ::xml_schema::string&);

  SFVec2f (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec2f (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec2f (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec2f (const SFVec2f& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual SFVec2f*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFVec2f ();
};

class MFVec2f: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFVec2f ();

  MFVec2f (const char*);

  MFVec2f (const ::std::string&);

  MFVec2f (const ::xml_schema::string&);

  MFVec2f (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec2f (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec2f (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec2f (const MFVec2f& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MFVec2f*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFVec2f ();
};

class SFVec2d: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFVec2d ();

  SFVec2d (const char*);

  SFVec2d (const ::std::string&);

  SFVec2d (const ::xml_schema::string&);

  SFVec2d (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec2d (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec2d (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec2d (const SFVec2d& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual SFVec2d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFVec2d ();
};

class MFVec2d: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFVec2d ();

  MFVec2d (const char*);

  MFVec2d (const ::std::string&);

  MFVec2d (const ::xml_schema::string&);

  MFVec2d (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec2d (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec2d (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec2d (const MFVec2d& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MFVec2d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFVec2d ();
};

class MFVec3f: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFVec3f ();

  MFVec3f (const char*);

  MFVec3f (const ::std::string&);

  MFVec3f (const ::xml_schema::string&);

  MFVec3f (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec3f (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec3f (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec3f (const MFVec3f& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MFVec3f*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFVec3f ();
};

class SFVec3d: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFVec3d ();

  SFVec3d (const char*);

  SFVec3d (const ::std::string&);

  SFVec3d (const ::xml_schema::string&);

  SFVec3d (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec3d (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec3d (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec3d (const SFVec3d& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual SFVec3d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFVec3d ();
};

class MFVec3d: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFVec3d ();

  MFVec3d (const char*);

  MFVec3d (const ::std::string&);

  MFVec3d (const ::xml_schema::string&);

  MFVec3d (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec3d (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec3d (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec3d (const MFVec3d& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MFVec3d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFVec3d ();
};

class SFVec4f: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFVec4f ();

  SFVec4f (const char*);

  SFVec4f (const ::std::string&);

  SFVec4f (const ::xml_schema::string&);

  SFVec4f (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec4f (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec4f (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec4f (const SFVec4f& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual SFVec4f*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFVec4f ();
};

class MFVec4f: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFVec4f ();

  MFVec4f (const char*);

  MFVec4f (const ::std::string&);

  MFVec4f (const ::xml_schema::string&);

  MFVec4f (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec4f (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec4f (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec4f (const MFVec4f& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MFVec4f*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFVec4f ();
};

class SFVec4d: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFVec4d ();

  SFVec4d (const char*);

  SFVec4d (const ::std::string&);

  SFVec4d (const ::xml_schema::string&);

  SFVec4d (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec4d (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec4d (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  SFVec4d (const SFVec4d& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual SFVec4d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFVec4d ();
};

class MFVec4d: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFVec4d ();

  MFVec4d (const char*);

  MFVec4d (const ::std::string&);

  MFVec4d (const ::xml_schema::string&);

  MFVec4d (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec4d (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec4d (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  MFVec4d (const MFVec4d& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual MFVec4d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFVec4d ();
};

class SFMatrix3f: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFMatrix3f ();

  SFMatrix3f (const char*);

  SFMatrix3f (const ::std::string&);

  SFMatrix3f (const ::xml_schema::string&);

  SFMatrix3f (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix3f (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix3f (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix3f (const SFMatrix3f& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual SFMatrix3f*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFMatrix3f ();
};

class MFMatrix3f: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFMatrix3f ();

  MFMatrix3f (const char*);

  MFMatrix3f (const ::std::string&);

  MFMatrix3f (const ::xml_schema::string&);

  MFMatrix3f (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix3f (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix3f (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix3f (const MFMatrix3f& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual MFMatrix3f*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFMatrix3f ();
};

class SFMatrix3d: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFMatrix3d ();

  SFMatrix3d (const char*);

  SFMatrix3d (const ::std::string&);

  SFMatrix3d (const ::xml_schema::string&);

  SFMatrix3d (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix3d (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix3d (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix3d (const SFMatrix3d& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual SFMatrix3d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFMatrix3d ();
};

class MFMatrix3d: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFMatrix3d ();

  MFMatrix3d (const char*);

  MFMatrix3d (const ::std::string&);

  MFMatrix3d (const ::xml_schema::string&);

  MFMatrix3d (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix3d (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix3d (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix3d (const MFMatrix3d& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual MFMatrix3d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFMatrix3d ();
};

class SFMatrix4f: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFMatrix4f ();

  SFMatrix4f (const char*);

  SFMatrix4f (const ::std::string&);

  SFMatrix4f (const ::xml_schema::string&);

  SFMatrix4f (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix4f (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix4f (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix4f (const SFMatrix4f& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual SFMatrix4f*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFMatrix4f ();
};

class MFMatrix4f: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFMatrix4f ();

  MFMatrix4f (const char*);

  MFMatrix4f (const ::std::string&);

  MFMatrix4f (const ::xml_schema::string&);

  MFMatrix4f (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix4f (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix4f (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix4f (const MFMatrix4f& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual MFMatrix4f*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFMatrix4f ();
};

class SFMatrix4d: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  SFMatrix4d ();

  SFMatrix4d (const char*);

  SFMatrix4d (const ::std::string&);

  SFMatrix4d (const ::xml_schema::string&);

  SFMatrix4d (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix4d (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix4d (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SFMatrix4d (const SFMatrix4d& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual SFMatrix4d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SFMatrix4d ();
};

class MFMatrix4d: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  MFMatrix4d ();

  MFMatrix4d (const char*);

  MFMatrix4d (const ::std::string&);

  MFMatrix4d (const ::xml_schema::string&);

  MFMatrix4d (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix4d (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix4d (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MFMatrix4d (const MFMatrix4d& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual MFMatrix4d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MFMatrix4d ();
};

class accessTypeNames: public ::xml_schema::string
{
  public:
  enum value
  {
    initializeOnly,
    inputOnly,
    outputOnly,
    inputOutput
  };

  accessTypeNames (value v);

  accessTypeNames (const char* v);

  accessTypeNames (const ::std::string& v);

  accessTypeNames (const ::xml_schema::string& v);

  accessTypeNames (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  accessTypeNames (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  accessTypeNames (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  accessTypeNames (const accessTypeNames& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual accessTypeNames*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  accessTypeNames&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_accessTypeNames_convert ();
  }

  protected:
  value
  _xsd_accessTypeNames_convert () const;

  public:
  static const char* const _xsd_accessTypeNames_literals_[4];
  static const value _xsd_accessTypeNames_indexes_[4];
};

class ArcClose2dTypeValues: public ::xml_schema::token
{
  public:
  enum value
  {
    PIE,
    CHORD
  };

  ArcClose2dTypeValues (value v);

  ArcClose2dTypeValues (const char* v);

  ArcClose2dTypeValues (const ::std::string& v);

  ArcClose2dTypeValues (const ::xml_schema::token& v);

  ArcClose2dTypeValues (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ArcClose2dTypeValues (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ArcClose2dTypeValues (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ArcClose2dTypeValues (const ArcClose2dTypeValues& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual ArcClose2dTypeValues*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ArcClose2dTypeValues&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_ArcClose2dTypeValues_convert ();
  }

  protected:
  value
  _xsd_ArcClose2dTypeValues_convert () const;

  public:
  static const char* const _xsd_ArcClose2dTypeValues_literals_[2];
  static const value _xsd_ArcClose2dTypeValues_indexes_[2];
};

class componentNames: public ::xml_schema::string
{
  public:
  enum value
  {
    Core,
    CADGeometry,
    CubeMapTexturing,
    DIS,
    EnvironmentalEffects,
    EnvironmentalSensor,
    EventUtilities,
    Geometry2D,
    Geometry3D,
    Geospatial,
    Grouping,
    H_Anim,
    Interpolation,
    KeyDeviceSensor,
    Lighting,
    Navigation,
    Networking,
    NURBS,
    PointingDeviceSensor,
    Rendering,
    Scripting,
    Shaders,
    Shape,
    Sound,
    Text,
    Texturing,
    Texturing3D,
    Time
  };

  componentNames (value v);

  componentNames (const char* v);

  componentNames (const ::std::string& v);

  componentNames (const ::xml_schema::string& v);

  componentNames (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  componentNames (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  componentNames (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  componentNames (const componentNames& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual componentNames*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  componentNames&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_componentNames_convert ();
  }

  protected:
  value
  _xsd_componentNames_convert () const;

  public:
  static const char* const _xsd_componentNames_literals_[28];
  static const value _xsd_componentNames_indexes_[28];
};

class fieldTypeName: public ::xml_schema::string
{
  public:
  enum value
  {
    SFBool,
    MFBool,
    SFColor,
    MFColor,
    SFColorRGBA,
    MFColorRGBA,
    SFDouble,
    MFDouble,
    SFFloat,
    MFFloat,
    SFImage,
    MFImage,
    SFInt32,
    SFNode,
    MFNode,
    MFInt32,
    SFRotation,
    MFRotation,
    SFString,
    MFString,
    SFTime,
    MFTime,
    SFVec2d,
    MFVec2d,
    SFVec2f,
    MFVec2f,
    SFVec3d,
    MFVec3d,
    SFVec3f,
    MFVec3f
  };

  fieldTypeName (value v);

  fieldTypeName (const char* v);

  fieldTypeName (const ::std::string& v);

  fieldTypeName (const ::xml_schema::string& v);

  fieldTypeName (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  fieldTypeName (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  fieldTypeName (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  fieldTypeName (const fieldTypeName& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual fieldTypeName*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  fieldTypeName&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_fieldTypeName_convert ();
  }

  protected:
  value
  _xsd_fieldTypeName_convert () const;

  public:
  static const char* const _xsd_fieldTypeName_literals_[30];
  static const value _xsd_fieldTypeName_indexes_[30];
};

class fontStyleValues: public ::xml_schema::token
{
  public:
  enum value
  {
    PLAIN,
    BOLD,
    ITALIC,
    BOLDITALIC
  };

  fontStyleValues (value v);

  fontStyleValues (const char* v);

  fontStyleValues (const ::std::string& v);

  fontStyleValues (const ::xml_schema::token& v);

  fontStyleValues (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  fontStyleValues (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  fontStyleValues (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  fontStyleValues (const fontStyleValues& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual fontStyleValues*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  fontStyleValues&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_fontStyleValues_convert ();
  }

  protected:
  value
  _xsd_fontStyleValues_convert () const;

  public:
  static const char* const _xsd_fontStyleValues_literals_[4];
  static const value _xsd_fontStyleValues_indexes_[4];
};

class fogTypeValues: public ::xml_schema::token
{
  public:
  enum value
  {
    LINEAR,
    EXPONENTIAL
  };

  fogTypeValues (value v);

  fogTypeValues (const char* v);

  fogTypeValues (const ::std::string& v);

  fogTypeValues (const ::xml_schema::token& v);

  fogTypeValues (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  fogTypeValues (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  fogTypeValues (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  fogTypeValues (const fogTypeValues& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual fogTypeValues*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  fogTypeValues&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_fogTypeValues_convert ();
  }

  protected:
  value
  _xsd_fogTypeValues_convert () const;

  public:
  static const char* const _xsd_fogTypeValues_literals_[2];
  static const value _xsd_fogTypeValues_indexes_[2];
};

class shaderPartTypeValues: public ::xml_schema::token
{
  public:
  enum value
  {
    VERTEX,
    FRAGMENT
  };

  shaderPartTypeValues (value v);

  shaderPartTypeValues (const char* v);

  shaderPartTypeValues (const ::std::string& v);

  shaderPartTypeValues (const ::xml_schema::token& v);

  shaderPartTypeValues (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  shaderPartTypeValues (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  shaderPartTypeValues (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  shaderPartTypeValues (const shaderPartTypeValues& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual shaderPartTypeValues*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  shaderPartTypeValues&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_shaderPartTypeValues_convert ();
  }

  protected:
  value
  _xsd_shaderPartTypeValues_convert () const;

  public:
  static const char* const _xsd_shaderPartTypeValues_literals_[2];
  static const value _xsd_shaderPartTypeValues_indexes_[2];
};

class metaDirectionValues: public ::xml_schema::string
{
  public:
  enum value
  {
    rtl,
    ltr
  };

  metaDirectionValues (value v);

  metaDirectionValues (const char* v);

  metaDirectionValues (const ::std::string& v);

  metaDirectionValues (const ::xml_schema::string& v);

  metaDirectionValues (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  metaDirectionValues (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  metaDirectionValues (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  metaDirectionValues (const metaDirectionValues& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual metaDirectionValues*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  metaDirectionValues&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_metaDirectionValues_convert ();
  }

  protected:
  value
  _xsd_metaDirectionValues_convert () const;

  public:
  static const char* const _xsd_metaDirectionValues_literals_[2];
  static const value _xsd_metaDirectionValues_indexes_[2];
};

class networkModeValues: public ::xml_schema::token
{
  public:
  enum value
  {
    standAlone,
    networkReader,
    networkWriter
  };

  networkModeValues (value v);

  networkModeValues (const char* v);

  networkModeValues (const ::std::string& v);

  networkModeValues (const ::xml_schema::token& v);

  networkModeValues (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  networkModeValues (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  networkModeValues (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  networkModeValues (const networkModeValues& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual networkModeValues*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  networkModeValues&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_networkModeValues_convert ();
  }

  protected:
  value
  _xsd_networkModeValues_convert () const;

  public:
  static const char* const _xsd_networkModeValues_literals_[3];
  static const value _xsd_networkModeValues_indexes_[3];
};

class profileNames: public ::xml_schema::string
{
  public:
  enum value
  {
    Core,
    Interchange,
    CADInterchange,
    Interactive,
    Immersive,
    MPEG4Interactive,
    Full
  };

  profileNames (value v);

  profileNames (const char* v);

  profileNames (const ::std::string& v);

  profileNames (const ::xml_schema::string& v);

  profileNames (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  profileNames (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  profileNames (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  profileNames (const profileNames& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual profileNames*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  profileNames&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_profileNames_convert ();
  }

  protected:
  value
  _xsd_profileNames_convert () const;

  public:
  static const char* const _xsd_profileNames_literals_[7];
  static const value _xsd_profileNames_indexes_[7];
};

class x3dVersion: public ::xml_schema::string
{
  public:
  enum value
  {
    cxx_3_0,
    cxx_3_1
  };

  x3dVersion (value v);

  x3dVersion (const char* v);

  x3dVersion (const ::std::string& v);

  x3dVersion (const ::xml_schema::string& v);

  x3dVersion (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  x3dVersion (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  x3dVersion (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  x3dVersion (const x3dVersion& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual x3dVersion*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  x3dVersion&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_x3dVersion_convert ();
  }

  protected:
  value
  _xsd_x3dVersion_convert () const;

  public:
  static const char* const _xsd_x3dVersion_literals_[2];
  static const value _xsd_x3dVersion_indexes_[2];
};

class initializeOnlyAccessTypes: public ::xml_schema::string
{
  public:
  enum value
  {
    bboxCenter,
    bboxSize,
    beginCap,
    bottom,
    bottomRadius,
    ccw,
    child1Url,
    child2Url,
    child3Url,
    child4Url,
    closed,
    closureType,
    colorIndex,
    colorPerVertex,
    convex,
    coordIndex,
    creaseAngle,
    crossSection,
    directOutput,
    endCap,
    endAngle,
    forceTransitions,
    geoGridOrigin,
    geoSystem,
    height,
    horizontal,
    index,
    info,
    innerRadius,
    justify,
    knot,
    language,
    leftToRight,
    lineSegments,
    mustEvaluate,
    name,
    normalIndex,
    normalPerVertex,
    numComponents,
    order,
    outerRadius,
    orientation,
    radius,
    range,
    repeatR,
    repeatS,
    repeatT,
    rootUrl,
    rotateYUp,
    rtpHeaderExpected,
    side,
    size,
    solid,
    spacing,
    spatialize,
    speedFactor,
    spine,
    startAngle,
    style,
    texCoordIndex,
    title,
    top,
    topToBottom,
    type,
    uClosed,
    uDimension,
    uKnot,
    uOrder,
    vClosed,
    vDimension,
    vKnot,
    vOrder,
    xDimension,
    xSpacing,
    zDimension,
    zSpacing
  };

  initializeOnlyAccessTypes (value v);

  initializeOnlyAccessTypes (const char* v);

  initializeOnlyAccessTypes (const ::std::string& v);

  initializeOnlyAccessTypes (const ::xml_schema::string& v);

  initializeOnlyAccessTypes (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  initializeOnlyAccessTypes (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  initializeOnlyAccessTypes (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  initializeOnlyAccessTypes (const initializeOnlyAccessTypes& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual initializeOnlyAccessTypes*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  initializeOnlyAccessTypes&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_initializeOnlyAccessTypes_convert ();
  }

  protected:
  value
  _xsd_initializeOnlyAccessTypes_convert () const;

  public:
  static const char* const _xsd_initializeOnlyAccessTypes_literals_[76];
  static const value _xsd_initializeOnlyAccessTypes_indexes_[76];
};

class inputOnlyAccessTypes: public ::xml_schema::string
{
  public:
  enum value
  {
    activate,
    set_articulationParameterValue0,
    set_articulationParameterValue1,
    set_articulationParameterValue2,
    set_articulationParameterValue3,
    set_articulationParameterValue4,
    set_articulationParameterValue5,
    set_articulationParameterValue6,
    set_articulationParameterValue7,
    set_boolean,
    set_bind,
    set_colorIndex,
    set_coordIndex,
    set_crossSection,
    set_fraction,
    set_height,
    set_index,
    set_normalIndex,
    set_orientation,
    set_position,
    set_scale,
    set_spine,
    set_texCoordIndex,
    set_triggerTime
  };

  inputOnlyAccessTypes (value v);

  inputOnlyAccessTypes (const char* v);

  inputOnlyAccessTypes (const ::std::string& v);

  inputOnlyAccessTypes (const ::xml_schema::string& v);

  inputOnlyAccessTypes (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  inputOnlyAccessTypes (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  inputOnlyAccessTypes (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  inputOnlyAccessTypes (const inputOnlyAccessTypes& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual inputOnlyAccessTypes*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  inputOnlyAccessTypes&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_inputOnlyAccessTypes_convert ();
  }

  protected:
  value
  _xsd_inputOnlyAccessTypes_convert () const;

  public:
  static const char* const _xsd_inputOnlyAccessTypes_literals_[24];
  static const value _xsd_inputOnlyAccessTypes_indexes_[24];
};

class outputOnlyAccessTypes: public ::xml_schema::string
{
  public:
  enum value
  {
    actionKeyPress,
    actionKeyRelease,
    altKey,
    articulationParameterValue0_changed,
    articulationParameterValue1_changed,
    articulationParameterValue2_changed,
    articulationParameterValue3_changed,
    articulationParameterValue4_changed,
    articulationParameterValue5_changed,
    articulationParameterValue6_changed,
    articulationParameterValue7_changed,
    bindTime,
    centerOfRotation_changed,
    collideTime,
    controlKey,
    cycleTime,
    detonateTime,
    duration_changed,
    elapsedTime,
    enteredText,
    enterTime,
    exitTime,
    finalText,
    firedTime,
    fraction_changed,
    geovalue_changed,
    hitGeoCoord_changed,
    hitNormal_changed,
    hitPoint_changed,
    hitTexCoord_changed,
    inputFalse,
    inputNegate,
    inputTrue,
    isActive,
    isBound,
    isCollided,
    isDetonated,
    isLoaded,
    isOver,
    isPaused,
    isNetworkReader,
    isNetworkWriter,
    isRtpHeaderHeard,
    isSelected,
    isStandAlone,
    isValid,
    keyPress,
    keyRelease,
    level_changed,
    lineBounds,
    loadTime,
    next,
    normal_changed,
    orientation_changed,
    position_changed,
    previous,
    progress,
    rotation_changed,
    shiftKey,
    textBounds,
    time,
    timestamp,
    touchTime,
    trackPoint_changed,
    transitionComplete,
    translation_changed,
    triggerTime,
    triggerTrue,
    triggerValue,
    value_changed
  };

  outputOnlyAccessTypes (value v);

  outputOnlyAccessTypes (const char* v);

  outputOnlyAccessTypes (const ::std::string& v);

  outputOnlyAccessTypes (const ::xml_schema::string& v);

  outputOnlyAccessTypes (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  outputOnlyAccessTypes (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  outputOnlyAccessTypes (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  outputOnlyAccessTypes (const outputOnlyAccessTypes& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual outputOnlyAccessTypes*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  outputOnlyAccessTypes&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_outputOnlyAccessTypes_convert ();
  }

  protected:
  value
  _xsd_outputOnlyAccessTypes_convert () const;

  public:
  static const char* const _xsd_outputOnlyAccessTypes_literals_[70];
  static const value _xsd_outputOnlyAccessTypes_indexes_[70];
};

class inputOutputAccessTypes: public ::xml_schema::string
{
  public:
  enum value1
  {
    address,
    alpha,
    ambientIntensity,
    antennaLocation,
    applicationID,
    applied,
    antennaPatternType,
    antennaPatternLength,
    articulationParameterArray,
    articulationParameterChangeIndicatorArray,
    articulationParameterCount,
    articulationParameterDesignatorArray,
    articulationParameterIdPartAttachedToArray,
    articulationParameterTypeArray,
    attenuation,
    autoOffset,
    avatarSize,
    axisOfRotation,
    backUrl,
    bottomUrl,
    beamWidth,
    bottomUrl1,
    center,
    centerOfMass,
    centerOfRotation,
    collisionType,
    color,
    controlPoint,
    cryptoSystem,
    cryptoKeyID,
    cutOffAngle,
    cycleInterval,
    data,
    dataLength,
    deadReckoning,
    deletionAllowed,
    depth,
    description,
    detonationLocation,
    detonationRelativeLocation,
    detonationResult,
    diffuseColor,
    direction,
    diskAngle,
    displacements,
    emissiveColor,
    enabled,
    encodingScheme,
    entityID,
    entityKind,
    entityDomain,
    entityCountry,
    entityCategory,
    entitySubCategory,
    entitySpecific,
    entityExtra,
    eventApplicationID,
    eventEntityID,
    eventNumber,
    eventSiteID,
    family,
    fanCount,
    fieldOfView,
    filled,
    fired1,
    fired2,
    fireMissionIndex,
    firingRange,
    firingRate,
    fogType,
    forceID,
    frequency,
    frontUrl,
    function,
    fuse,
    geoCoords,
    global,
    groundAngle,
    groundColor,
    hatchColor,
    hatched,
    hatchStyle,
    headlight,
    image,
    info,
    inputSource,
    integerKey,
    intensity,
    key,
    jump,
    keyValue,
    leftUrl,
    length,
    lengthOfModulationParameters,
    limitOrientation,
    linearAcceleration,
    linearVelocity,
    linetype,
    linewidthScaleFactor,
    llimit,
    load,
    location,
    loop,
    marking,
    mass,
    maxAngle,
    matrix,
    maxBack,
    maxExtent,
    maxFront,
    maxPosition,
    minAngle,
    minBack,
    minFront,
    minPosition,
    mode,
    modulationTypeSpreadSpectrum,
    modulationTypeMajor,
    modulationTypeDetail,
    modulationTypeSystem,
    momentsOfInertia,
    multicastRelayHost,
    multicastRelayPort,
    munitionEndPoint,
    munitionStartPoint,
    munitionApplicationID,
    munitionEntityID,
    munitionSiteID,
    munitionQuantity,
    name,
    navType,
    networkMode,
    offset,
    on,
    pauseTime,
    parameter,
    pitch,
    point,
    port,
    position,
    power,
    priority,
    radioID,
    radioEntityTypeKind,
    radioEntityTypeDomain,
    radioEntityTypeCountry,
    radioEntityTypeCategory,
    radioEntityTypeNomenclature,
    radioEntityTypeNomenclatureVersion,
    readInterval,
    receivedPower,
    receiverState,
    reference,
    relativeAntennaLocation,
    resumeTime,
    rightUrl,
    rotation,
    sampleRate,
    samples,
    scale,
    scaleOrientation,
    shininess,
    siteID,
    skinCoordIndex,
    skinCoordWeight,
    skyColor,
    skyAngle,
    source,
    specularColor,
    speed,
    startTime,
    stiffness,
    stopTime,
    string,
    stripCount,
    summary,
    tdlType,
    tessellation,
    tessellationScale,
    timeOut,
    toggle,
    topUrl,
    transitionTime,
    transitionType,
    translation,
    transmitFrequencyBandwidth,
    transmitState,
    transmitterApplicationID,
    transmitterEntityID,
    transmitterRadioID,
    transmitterSiteID,
    transparent,
    transparency,
    type,
    ulimit,
    update,
    url,
    uTessellation,
    value,
    version,
    vector,
    vertexCount,
    vertices,
    visibilityLimit,
    visibilityRange,
    visible,
    vTessellation,
    warhead,
    weight,
    whichChoice,
    whichGeometry,
    writeInterval,
    yScale
  };

  inputOutputAccessTypes (value1 v);

  inputOutputAccessTypes (const char* v);

  inputOutputAccessTypes (const ::std::string& v);

  inputOutputAccessTypes (const ::xml_schema::string& v);

  inputOutputAccessTypes (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  inputOutputAccessTypes (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  inputOutputAccessTypes (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  inputOutputAccessTypes (const inputOutputAccessTypes& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual inputOutputAccessTypes*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  inputOutputAccessTypes&
  operator= (value1 v);

  virtual
  operator value1 () const
  {
    return _xsd_inputOutputAccessTypes_convert ();
  }

  protected:
  value1
  _xsd_inputOutputAccessTypes_convert () const;

  public:
  static const char* const _xsd_inputOutputAccessTypes_literals_[213];
  static const value1 _xsd_inputOutputAccessTypes_indexes_[213];
};

class X3DNode: public ::xml_schema::type
{
  public:
  // IS
  // 
  typedef ::IS IS_type;
  typedef ::xsd::cxx::tree::optional< IS_type > IS_optional;
  typedef ::xsd::cxx::tree::traits< IS_type, char > IS_traits;

  const IS_optional&
  IS () const;

  IS_optional&
  IS ();

  void
  IS (const IS_type& x);

  void
  IS (const IS_optional& x);

  void
  IS (::std::auto_ptr< IS_type > p);

  // MetadataDouble
  // 
  typedef ::MetadataDouble MetadataDouble_type;
  typedef ::xsd::cxx::tree::optional< MetadataDouble_type > MetadataDouble_optional;
  typedef ::xsd::cxx::tree::traits< MetadataDouble_type, char > MetadataDouble_traits;

  const MetadataDouble_optional&
  MetadataDouble () const;

  MetadataDouble_optional&
  MetadataDouble ();

  void
  MetadataDouble (const MetadataDouble_type& x);

  void
  MetadataDouble (const MetadataDouble_optional& x);

  void
  MetadataDouble (::std::auto_ptr< MetadataDouble_type > p);

  // MetadataFloat
  // 
  typedef ::MetadataFloat MetadataFloat_type;
  typedef ::xsd::cxx::tree::optional< MetadataFloat_type > MetadataFloat_optional;
  typedef ::xsd::cxx::tree::traits< MetadataFloat_type, char > MetadataFloat_traits;

  const MetadataFloat_optional&
  MetadataFloat () const;

  MetadataFloat_optional&
  MetadataFloat ();

  void
  MetadataFloat (const MetadataFloat_type& x);

  void
  MetadataFloat (const MetadataFloat_optional& x);

  void
  MetadataFloat (::std::auto_ptr< MetadataFloat_type > p);

  // MetadataInteger
  // 
  typedef ::MetadataInteger MetadataInteger_type;
  typedef ::xsd::cxx::tree::optional< MetadataInteger_type > MetadataInteger_optional;
  typedef ::xsd::cxx::tree::traits< MetadataInteger_type, char > MetadataInteger_traits;

  const MetadataInteger_optional&
  MetadataInteger () const;

  MetadataInteger_optional&
  MetadataInteger ();

  void
  MetadataInteger (const MetadataInteger_type& x);

  void
  MetadataInteger (const MetadataInteger_optional& x);

  void
  MetadataInteger (::std::auto_ptr< MetadataInteger_type > p);

  // MetadataSet
  // 
  typedef ::MetadataSet MetadataSet_type;
  typedef ::xsd::cxx::tree::optional< MetadataSet_type > MetadataSet_optional;
  typedef ::xsd::cxx::tree::traits< MetadataSet_type, char > MetadataSet_traits;

  const MetadataSet_optional&
  MetadataSet () const;

  MetadataSet_optional&
  MetadataSet ();

  void
  MetadataSet (const MetadataSet_type& x);

  void
  MetadataSet (const MetadataSet_optional& x);

  void
  MetadataSet (::std::auto_ptr< MetadataSet_type > p);

  // MetadataString
  // 
  typedef ::MetadataString MetadataString_type;
  typedef ::xsd::cxx::tree::optional< MetadataString_type > MetadataString_optional;
  typedef ::xsd::cxx::tree::traits< MetadataString_type, char > MetadataString_traits;

  const MetadataString_optional&
  MetadataString () const;

  MetadataString_optional&
  MetadataString ();

  void
  MetadataString (const MetadataString_type& x);

  void
  MetadataString (const MetadataString_optional& x);

  void
  MetadataString (::std::auto_ptr< MetadataString_type > p);

  // DEF
  // 
  typedef ::xml_schema::id DEF_type;
  typedef ::xsd::cxx::tree::optional< DEF_type > DEF_optional;
  typedef ::xsd::cxx::tree::traits< DEF_type, char > DEF_traits;

  const DEF_optional&
  DEF () const;

  DEF_optional&
  DEF ();

  void
  DEF (const DEF_type& x);

  void
  DEF (const DEF_optional& x);

  void
  DEF (::std::auto_ptr< DEF_type > p);

  // USE
  // 
  typedef ::xml_schema::idref USE_type;
  typedef ::xsd::cxx::tree::optional< USE_type > USE_optional;
  typedef ::xsd::cxx::tree::traits< USE_type, char > USE_traits;

  const USE_optional&
  USE () const;

  USE_optional&
  USE ();

  void
  USE (const USE_type& x);

  void
  USE (const USE_optional& x);

  void
  USE (::std::auto_ptr< USE_type > p);

  // class
  // 
  typedef ::xml_schema::nmtoken class_type;
  typedef ::xsd::cxx::tree::optional< class_type > class_optional;
  typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

  const class_optional&
  class_ () const;

  class_optional&
  class_ ();

  void
  class_ (const class_type& x);

  void
  class_ (const class_optional& x);

  void
  class_ (::std::auto_ptr< class_type > p);

  // Constructors.
  //
  X3DNode ();

  X3DNode (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  X3DNode (const X3DNode& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual X3DNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  IS_optional IS_;
  MetadataDouble_optional MetadataDouble_;
  MetadataFloat_optional MetadataFloat_;
  MetadataInteger_optional MetadataInteger_;
  MetadataSet_optional MetadataSet_;
  MetadataString_optional MetadataString_;
  DEF_optional DEF_;
  USE_optional USE_;
  class_optional class__;
};

class X3DAppearanceNode: public ::X3DNode
{
  public:
  // FillProperties
  // 
  typedef ::FillProperties FillProperties_type;
  typedef ::xsd::cxx::tree::sequence< FillProperties_type > FillProperties_sequence;
  typedef FillProperties_sequence::iterator FillProperties_iterator;
  typedef FillProperties_sequence::const_iterator FillProperties_const_iterator;
  typedef ::xsd::cxx::tree::traits< FillProperties_type, char > FillProperties_traits;

  const FillProperties_sequence&
  FillProperties () const;

  FillProperties_sequence&
  FillProperties ();

  void
  FillProperties (const FillProperties_sequence& s);

  // LineProperties
  // 
  typedef ::LineProperties LineProperties_type;
  typedef ::xsd::cxx::tree::sequence< LineProperties_type > LineProperties_sequence;
  typedef LineProperties_sequence::iterator LineProperties_iterator;
  typedef LineProperties_sequence::const_iterator LineProperties_const_iterator;
  typedef ::xsd::cxx::tree::traits< LineProperties_type, char > LineProperties_traits;

  const LineProperties_sequence&
  LineProperties () const;

  LineProperties_sequence&
  LineProperties ();

  void
  LineProperties (const LineProperties_sequence& s);

  // Material
  // 
  typedef ::Material Material_type;
  typedef ::xsd::cxx::tree::sequence< Material_type > Material_sequence;
  typedef Material_sequence::iterator Material_iterator;
  typedef Material_sequence::const_iterator Material_const_iterator;
  typedef ::xsd::cxx::tree::traits< Material_type, char > Material_traits;

  const Material_sequence&
  Material () const;

  Material_sequence&
  Material ();

  void
  Material (const Material_sequence& s);

  // ComposedShader
  // 
  typedef ::ComposedShader ComposedShader_type;
  typedef ::xsd::cxx::tree::sequence< ComposedShader_type > ComposedShader_sequence;
  typedef ComposedShader_sequence::iterator ComposedShader_iterator;
  typedef ComposedShader_sequence::const_iterator ComposedShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< ComposedShader_type, char > ComposedShader_traits;

  const ComposedShader_sequence&
  ComposedShader () const;

  ComposedShader_sequence&
  ComposedShader ();

  void
  ComposedShader (const ComposedShader_sequence& s);

  // PackagedShader
  // 
  typedef ::PackagedShader PackagedShader_type;
  typedef ::xsd::cxx::tree::sequence< PackagedShader_type > PackagedShader_sequence;
  typedef PackagedShader_sequence::iterator PackagedShader_iterator;
  typedef PackagedShader_sequence::const_iterator PackagedShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< PackagedShader_type, char > PackagedShader_traits;

  const PackagedShader_sequence&
  PackagedShader () const;

  PackagedShader_sequence&
  PackagedShader ();

  void
  PackagedShader (const PackagedShader_sequence& s);

  // ProgramShader
  // 
  typedef ::ProgramShader ProgramShader_type;
  typedef ::xsd::cxx::tree::sequence< ProgramShader_type > ProgramShader_sequence;
  typedef ProgramShader_sequence::iterator ProgramShader_iterator;
  typedef ProgramShader_sequence::const_iterator ProgramShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProgramShader_type, char > ProgramShader_traits;

  const ProgramShader_sequence&
  ProgramShader () const;

  ProgramShader_sequence&
  ProgramShader ();

  void
  ProgramShader (const ProgramShader_sequence& s);

  // ComposedCubeMapTexture
  // 
  typedef ::ComposedCubeMapTexture ComposedCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< ComposedCubeMapTexture_type > ComposedCubeMapTexture_sequence;
  typedef ComposedCubeMapTexture_sequence::iterator ComposedCubeMapTexture_iterator;
  typedef ComposedCubeMapTexture_sequence::const_iterator ComposedCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ComposedCubeMapTexture_type, char > ComposedCubeMapTexture_traits;

  const ComposedCubeMapTexture_sequence&
  ComposedCubeMapTexture () const;

  ComposedCubeMapTexture_sequence&
  ComposedCubeMapTexture ();

  void
  ComposedCubeMapTexture (const ComposedCubeMapTexture_sequence& s);

  // ImageTexture
  // 
  typedef ::ImageTexture ImageTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageTexture_type > ImageTexture_sequence;
  typedef ImageTexture_sequence::iterator ImageTexture_iterator;
  typedef ImageTexture_sequence::const_iterator ImageTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageTexture_type, char > ImageTexture_traits;

  const ImageTexture_sequence&
  ImageTexture () const;

  ImageTexture_sequence&
  ImageTexture ();

  void
  ImageTexture (const ImageTexture_sequence& s);

  // MovieTexture
  // 
  typedef ::MovieTexture MovieTexture_type;
  typedef ::xsd::cxx::tree::sequence< MovieTexture_type > MovieTexture_sequence;
  typedef MovieTexture_sequence::iterator MovieTexture_iterator;
  typedef MovieTexture_sequence::const_iterator MovieTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MovieTexture_type, char > MovieTexture_traits;

  const MovieTexture_sequence&
  MovieTexture () const;

  MovieTexture_sequence&
  MovieTexture ();

  void
  MovieTexture (const MovieTexture_sequence& s);

  // MultiTexture
  // 
  typedef ::MultiTexture MultiTexture_type;
  typedef ::xsd::cxx::tree::sequence< MultiTexture_type > MultiTexture_sequence;
  typedef MultiTexture_sequence::iterator MultiTexture_iterator;
  typedef MultiTexture_sequence::const_iterator MultiTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTexture_type, char > MultiTexture_traits;

  const MultiTexture_sequence&
  MultiTexture () const;

  MultiTexture_sequence&
  MultiTexture ();

  void
  MultiTexture (const MultiTexture_sequence& s);

  // PixelTexture
  // 
  typedef ::PixelTexture PixelTexture_type;
  typedef ::xsd::cxx::tree::sequence< PixelTexture_type > PixelTexture_sequence;
  typedef PixelTexture_sequence::iterator PixelTexture_iterator;
  typedef PixelTexture_sequence::const_iterator PixelTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< PixelTexture_type, char > PixelTexture_traits;

  const PixelTexture_sequence&
  PixelTexture () const;

  PixelTexture_sequence&
  PixelTexture ();

  void
  PixelTexture (const PixelTexture_sequence& s);

  // GeneratedCubeMapTexture
  // 
  typedef ::GeneratedCubeMapTexture GeneratedCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< GeneratedCubeMapTexture_type > GeneratedCubeMapTexture_sequence;
  typedef GeneratedCubeMapTexture_sequence::iterator GeneratedCubeMapTexture_iterator;
  typedef GeneratedCubeMapTexture_sequence::const_iterator GeneratedCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeneratedCubeMapTexture_type, char > GeneratedCubeMapTexture_traits;

  const GeneratedCubeMapTexture_sequence&
  GeneratedCubeMapTexture () const;

  GeneratedCubeMapTexture_sequence&
  GeneratedCubeMapTexture ();

  void
  GeneratedCubeMapTexture (const GeneratedCubeMapTexture_sequence& s);

  // ImageCubeMapTexture
  // 
  typedef ::ImageCubeMapTexture ImageCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageCubeMapTexture_type > ImageCubeMapTexture_sequence;
  typedef ImageCubeMapTexture_sequence::iterator ImageCubeMapTexture_iterator;
  typedef ImageCubeMapTexture_sequence::const_iterator ImageCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageCubeMapTexture_type, char > ImageCubeMapTexture_traits;

  const ImageCubeMapTexture_sequence&
  ImageCubeMapTexture () const;

  ImageCubeMapTexture_sequence&
  ImageCubeMapTexture ();

  void
  ImageCubeMapTexture (const ImageCubeMapTexture_sequence& s);

  // MultiTextureTransform
  // 
  typedef ::MultiTextureTransform MultiTextureTransform_type;
  typedef ::xsd::cxx::tree::sequence< MultiTextureTransform_type > MultiTextureTransform_sequence;
  typedef MultiTextureTransform_sequence::iterator MultiTextureTransform_iterator;
  typedef MultiTextureTransform_sequence::const_iterator MultiTextureTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTextureTransform_type, char > MultiTextureTransform_traits;

  const MultiTextureTransform_sequence&
  MultiTextureTransform () const;

  MultiTextureTransform_sequence&
  MultiTextureTransform ();

  void
  MultiTextureTransform (const MultiTextureTransform_sequence& s);

  // TextureTransform
  // 
  typedef ::TextureTransform TextureTransform_type;
  typedef ::xsd::cxx::tree::sequence< TextureTransform_type > TextureTransform_sequence;
  typedef TextureTransform_sequence::iterator TextureTransform_iterator;
  typedef TextureTransform_sequence::const_iterator TextureTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureTransform_type, char > TextureTransform_traits;

  const TextureTransform_sequence&
  TextureTransform () const;

  TextureTransform_sequence&
  TextureTransform ();

  void
  TextureTransform (const TextureTransform_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DAppearanceNode ();

  X3DAppearanceNode (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  X3DAppearanceNode (const X3DAppearanceNode& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual X3DAppearanceNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DAppearanceNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  FillProperties_sequence FillProperties_;
  LineProperties_sequence LineProperties_;
  Material_sequence Material_;
  ComposedShader_sequence ComposedShader_;
  PackagedShader_sequence PackagedShader_;
  ProgramShader_sequence ProgramShader_;
  ComposedCubeMapTexture_sequence ComposedCubeMapTexture_;
  ImageTexture_sequence ImageTexture_;
  MovieTexture_sequence MovieTexture_;
  MultiTexture_sequence MultiTexture_;
  PixelTexture_sequence PixelTexture_;
  GeneratedCubeMapTexture_sequence GeneratedCubeMapTexture_;
  ImageCubeMapTexture_sequence ImageCubeMapTexture_;
  MultiTextureTransform_sequence MultiTextureTransform_;
  TextureTransform_sequence TextureTransform_;
  ProtoInstance_sequence ProtoInstance_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DAppearanceChildNode: public ::X3DNode
{
  public:
  // Constructors.
  //
  X3DAppearanceChildNode ();

  X3DAppearanceChildNode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  X3DAppearanceChildNode (const X3DAppearanceChildNode& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual X3DAppearanceChildNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DAppearanceChildNode ();
};

class X3DChildNode: public ::X3DNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DChildNode ();

  X3DChildNode (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  X3DChildNode (const X3DChildNode& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual X3DChildNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DChildNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DBindableNode: public ::X3DChildNode
{
  public:
  // Constructors.
  //
  X3DBindableNode ();

  X3DBindableNode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  X3DBindableNode (const X3DBindableNode& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual X3DBindableNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DBindableNode ();
};

class X3DBackgroundNode: public ::X3DBindableNode
{
  public:
  // groundAngle
  // 
  typedef ::MFFloat groundAngle_type;
  typedef ::xsd::cxx::tree::optional< groundAngle_type > groundAngle_optional;
  typedef ::xsd::cxx::tree::traits< groundAngle_type, char > groundAngle_traits;

  const groundAngle_optional&
  groundAngle () const;

  groundAngle_optional&
  groundAngle ();

  void
  groundAngle (const groundAngle_type& x);

  void
  groundAngle (const groundAngle_optional& x);

  void
  groundAngle (::std::auto_ptr< groundAngle_type > p);

  // groundColor
  // 
  typedef ::MFColor groundColor_type;
  typedef ::xsd::cxx::tree::optional< groundColor_type > groundColor_optional;
  typedef ::xsd::cxx::tree::traits< groundColor_type, char > groundColor_traits;

  const groundColor_optional&
  groundColor () const;

  groundColor_optional&
  groundColor ();

  void
  groundColor (const groundColor_type& x);

  void
  groundColor (const groundColor_optional& x);

  void
  groundColor (::std::auto_ptr< groundColor_type > p);

  // skyAngle
  // 
  typedef ::MFFloat skyAngle_type;
  typedef ::xsd::cxx::tree::optional< skyAngle_type > skyAngle_optional;
  typedef ::xsd::cxx::tree::traits< skyAngle_type, char > skyAngle_traits;

  const skyAngle_optional&
  skyAngle () const;

  skyAngle_optional&
  skyAngle ();

  void
  skyAngle (const skyAngle_type& x);

  void
  skyAngle (const skyAngle_optional& x);

  void
  skyAngle (::std::auto_ptr< skyAngle_type > p);

  // skyColor
  // 
  typedef ::MFColor skyColor_type;
  typedef ::xsd::cxx::tree::traits< skyColor_type, char > skyColor_traits;

  const skyColor_type&
  skyColor () const;

  skyColor_type&
  skyColor ();

  void
  skyColor (const skyColor_type& x);

  void
  skyColor (::std::auto_ptr< skyColor_type > p);

  static const skyColor_type&
  skyColor_default_value ();

  // Constructors.
  //
  X3DBackgroundNode ();

  X3DBackgroundNode (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  X3DBackgroundNode (const X3DBackgroundNode& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual X3DBackgroundNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DBackgroundNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  groundAngle_optional groundAngle_;
  groundColor_optional groundColor_;
  skyAngle_optional skyAngle_;
  ::xsd::cxx::tree::one< skyColor_type > skyColor_;
  static const skyColor_type skyColor_default_value_;
};

class X3DBoundedObject: public ::xml_schema::type
{
  public:
  // bboxCenter
  // 
  typedef ::SFVec3f bboxCenter_type;
  typedef ::xsd::cxx::tree::traits< bboxCenter_type, char > bboxCenter_traits;

  const bboxCenter_type&
  bboxCenter () const;

  bboxCenter_type&
  bboxCenter ();

  void
  bboxCenter (const bboxCenter_type& x);

  void
  bboxCenter (::std::auto_ptr< bboxCenter_type > p);

  static const bboxCenter_type&
  bboxCenter_default_value ();

  // bboxSize
  // 
  typedef ::BoundingBoxSize bboxSize_type;
  typedef ::xsd::cxx::tree::traits< bboxSize_type, char > bboxSize_traits;

  const bboxSize_type&
  bboxSize () const;

  bboxSize_type&
  bboxSize ();

  void
  bboxSize (const bboxSize_type& x);

  void
  bboxSize (::std::auto_ptr< bboxSize_type > p);

  static const bboxSize_type&
  bboxSize_default_value ();

  // Constructors.
  //
  X3DBoundedObject ();

  X3DBoundedObject (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  X3DBoundedObject (const X3DBoundedObject& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual X3DBoundedObject*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DBoundedObject ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< bboxCenter_type > bboxCenter_;
  static const bboxCenter_type bboxCenter_default_value_;
  ::xsd::cxx::tree::one< bboxSize_type > bboxSize_;
  static const bboxSize_type bboxSize_default_value_;
};

class X3DGeometricPropertyNode: public ::X3DNode
{
  public:
  // Constructors.
  //
  X3DGeometricPropertyNode ();

  X3DGeometricPropertyNode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  X3DGeometricPropertyNode (const X3DGeometricPropertyNode& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual X3DGeometricPropertyNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DGeometricPropertyNode ();
};

class X3DColorNode: public ::X3DGeometricPropertyNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DColorNode ();

  X3DColorNode (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  X3DColorNode (const X3DColorNode& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual X3DColorNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DColorNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DGeometryNode: public ::X3DNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DGeometryNode ();

  X3DGeometryNode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  X3DGeometryNode (const X3DGeometryNode& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual X3DGeometryNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DGeometryNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DComposedGeometryNode: public ::X3DGeometryNode
{
  public:
  // FloatVertexAttribute
  // 
  typedef ::FloatVertexAttribute FloatVertexAttribute_type;
  typedef ::xsd::cxx::tree::sequence< FloatVertexAttribute_type > FloatVertexAttribute_sequence;
  typedef FloatVertexAttribute_sequence::iterator FloatVertexAttribute_iterator;
  typedef FloatVertexAttribute_sequence::const_iterator FloatVertexAttribute_const_iterator;
  typedef ::xsd::cxx::tree::traits< FloatVertexAttribute_type, char > FloatVertexAttribute_traits;

  const FloatVertexAttribute_sequence&
  FloatVertexAttribute () const;

  FloatVertexAttribute_sequence&
  FloatVertexAttribute ();

  void
  FloatVertexAttribute (const FloatVertexAttribute_sequence& s);

  // Matrix3VertexAttribute
  // 
  typedef ::Matrix3VertexAttribute Matrix3VertexAttribute_type;
  typedef ::xsd::cxx::tree::sequence< Matrix3VertexAttribute_type > Matrix3VertexAttribute_sequence;
  typedef Matrix3VertexAttribute_sequence::iterator Matrix3VertexAttribute_iterator;
  typedef Matrix3VertexAttribute_sequence::const_iterator Matrix3VertexAttribute_const_iterator;
  typedef ::xsd::cxx::tree::traits< Matrix3VertexAttribute_type, char > Matrix3VertexAttribute_traits;

  const Matrix3VertexAttribute_sequence&
  Matrix3VertexAttribute () const;

  Matrix3VertexAttribute_sequence&
  Matrix3VertexAttribute ();

  void
  Matrix3VertexAttribute (const Matrix3VertexAttribute_sequence& s);

  // Matrix4VertexAttribute
  // 
  typedef ::Matrix4VertexAttribute Matrix4VertexAttribute_type;
  typedef ::xsd::cxx::tree::sequence< Matrix4VertexAttribute_type > Matrix4VertexAttribute_sequence;
  typedef Matrix4VertexAttribute_sequence::iterator Matrix4VertexAttribute_iterator;
  typedef Matrix4VertexAttribute_sequence::const_iterator Matrix4VertexAttribute_const_iterator;
  typedef ::xsd::cxx::tree::traits< Matrix4VertexAttribute_type, char > Matrix4VertexAttribute_traits;

  const Matrix4VertexAttribute_sequence&
  Matrix4VertexAttribute () const;

  Matrix4VertexAttribute_sequence&
  Matrix4VertexAttribute ();

  void
  Matrix4VertexAttribute (const Matrix4VertexAttribute_sequence& s);

  // Color
  // 
  typedef ::Color Color_type;
  typedef ::xsd::cxx::tree::sequence< Color_type > Color_sequence;
  typedef Color_sequence::iterator Color_iterator;
  typedef Color_sequence::const_iterator Color_const_iterator;
  typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

  const Color_sequence&
  Color () const;

  Color_sequence&
  Color ();

  void
  Color (const Color_sequence& s);

  // ColorRGBA
  // 
  typedef ::ColorRGBA ColorRGBA_type;
  typedef ::xsd::cxx::tree::sequence< ColorRGBA_type > ColorRGBA_sequence;
  typedef ColorRGBA_sequence::iterator ColorRGBA_iterator;
  typedef ColorRGBA_sequence::const_iterator ColorRGBA_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorRGBA_type, char > ColorRGBA_traits;

  const ColorRGBA_sequence&
  ColorRGBA () const;

  ColorRGBA_sequence&
  ColorRGBA ();

  void
  ColorRGBA (const ColorRGBA_sequence& s);

  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::sequence< Coordinate_type > Coordinate_sequence;
  typedef Coordinate_sequence::iterator Coordinate_iterator;
  typedef Coordinate_sequence::const_iterator Coordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_sequence&
  Coordinate () const;

  Coordinate_sequence&
  Coordinate ();

  void
  Coordinate (const Coordinate_sequence& s);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateDouble_type > CoordinateDouble_sequence;
  typedef CoordinateDouble_sequence::iterator CoordinateDouble_iterator;
  typedef CoordinateDouble_sequence::const_iterator CoordinateDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_sequence&
  CoordinateDouble () const;

  CoordinateDouble_sequence&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_sequence& s);

  // GeoCoordinate
  // 
  typedef ::GeoCoordinate GeoCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< GeoCoordinate_type > GeoCoordinate_sequence;
  typedef GeoCoordinate_sequence::iterator GeoCoordinate_iterator;
  typedef GeoCoordinate_sequence::const_iterator GeoCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoCoordinate_type, char > GeoCoordinate_traits;

  const GeoCoordinate_sequence&
  GeoCoordinate () const;

  GeoCoordinate_sequence&
  GeoCoordinate ();

  void
  GeoCoordinate (const GeoCoordinate_sequence& s);

  // FogCoordinate
  // 
  typedef ::FogCoordinate FogCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< FogCoordinate_type > FogCoordinate_sequence;
  typedef FogCoordinate_sequence::iterator FogCoordinate_iterator;
  typedef FogCoordinate_sequence::const_iterator FogCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< FogCoordinate_type, char > FogCoordinate_traits;

  const FogCoordinate_sequence&
  FogCoordinate () const;

  FogCoordinate_sequence&
  FogCoordinate ();

  void
  FogCoordinate (const FogCoordinate_sequence& s);

  // Normal
  // 
  typedef ::Normal Normal_type;
  typedef ::xsd::cxx::tree::sequence< Normal_type > Normal_sequence;
  typedef Normal_sequence::iterator Normal_iterator;
  typedef Normal_sequence::const_iterator Normal_const_iterator;
  typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

  const Normal_sequence&
  Normal () const;

  Normal_sequence&
  Normal ();

  void
  Normal (const Normal_sequence& s);

  // TextureCoordinate
  // 
  typedef ::TextureCoordinate TextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate_type > TextureCoordinate_sequence;
  typedef TextureCoordinate_sequence::iterator TextureCoordinate_iterator;
  typedef TextureCoordinate_sequence::const_iterator TextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate_type, char > TextureCoordinate_traits;

  const TextureCoordinate_sequence&
  TextureCoordinate () const;

  TextureCoordinate_sequence&
  TextureCoordinate ();

  void
  TextureCoordinate (const TextureCoordinate_sequence& s);

  // TextureCoordinate3D
  // 
  typedef ::TextureCoordinate3D TextureCoordinate3D_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate3D_type > TextureCoordinate3D_sequence;
  typedef TextureCoordinate3D_sequence::iterator TextureCoordinate3D_iterator;
  typedef TextureCoordinate3D_sequence::const_iterator TextureCoordinate3D_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate3D_type, char > TextureCoordinate3D_traits;

  const TextureCoordinate3D_sequence&
  TextureCoordinate3D () const;

  TextureCoordinate3D_sequence&
  TextureCoordinate3D ();

  void
  TextureCoordinate3D (const TextureCoordinate3D_sequence& s);

  // TextureCoordinate4D
  // 
  typedef ::TextureCoordinate4D TextureCoordinate4D_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate4D_type > TextureCoordinate4D_sequence;
  typedef TextureCoordinate4D_sequence::iterator TextureCoordinate4D_iterator;
  typedef TextureCoordinate4D_sequence::const_iterator TextureCoordinate4D_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate4D_type, char > TextureCoordinate4D_traits;

  const TextureCoordinate4D_sequence&
  TextureCoordinate4D () const;

  TextureCoordinate4D_sequence&
  TextureCoordinate4D ();

  void
  TextureCoordinate4D (const TextureCoordinate4D_sequence& s);

  // TextureCoordinateGenerator
  // 
  typedef ::TextureCoordinateGenerator TextureCoordinateGenerator_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinateGenerator_type > TextureCoordinateGenerator_sequence;
  typedef TextureCoordinateGenerator_sequence::iterator TextureCoordinateGenerator_iterator;
  typedef TextureCoordinateGenerator_sequence::const_iterator TextureCoordinateGenerator_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinateGenerator_type, char > TextureCoordinateGenerator_traits;

  const TextureCoordinateGenerator_sequence&
  TextureCoordinateGenerator () const;

  TextureCoordinateGenerator_sequence&
  TextureCoordinateGenerator ();

  void
  TextureCoordinateGenerator (const TextureCoordinateGenerator_sequence& s);

  // MultiTextureCoordinate
  // 
  typedef ::MultiTextureCoordinate MultiTextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< MultiTextureCoordinate_type > MultiTextureCoordinate_sequence;
  typedef MultiTextureCoordinate_sequence::iterator MultiTextureCoordinate_iterator;
  typedef MultiTextureCoordinate_sequence::const_iterator MultiTextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTextureCoordinate_type, char > MultiTextureCoordinate_traits;

  const MultiTextureCoordinate_sequence&
  MultiTextureCoordinate () const;

  MultiTextureCoordinate_sequence&
  MultiTextureCoordinate ();

  void
  MultiTextureCoordinate (const MultiTextureCoordinate_sequence& s);

  // NurbsTextureCoordinate
  // 
  typedef ::NurbsTextureCoordinate NurbsTextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTextureCoordinate_type > NurbsTextureCoordinate_sequence;
  typedef NurbsTextureCoordinate_sequence::iterator NurbsTextureCoordinate_iterator;
  typedef NurbsTextureCoordinate_sequence::const_iterator NurbsTextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTextureCoordinate_type, char > NurbsTextureCoordinate_traits;

  const NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate () const;

  NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate ();

  void
  NurbsTextureCoordinate (const NurbsTextureCoordinate_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // ccw
  // 
  typedef ::SFBool ccw_type;
  typedef ::xsd::cxx::tree::traits< ccw_type, char > ccw_traits;

  const ccw_type&
  ccw () const;

  ccw_type&
  ccw ();

  void
  ccw (const ccw_type& x);

  void
  ccw (::std::auto_ptr< ccw_type > p);

  static const ccw_type&
  ccw_default_value ();

  // colorPerVertex
  // 
  typedef ::SFBool colorPerVertex_type;
  typedef ::xsd::cxx::tree::traits< colorPerVertex_type, char > colorPerVertex_traits;

  const colorPerVertex_type&
  colorPerVertex () const;

  colorPerVertex_type&
  colorPerVertex ();

  void
  colorPerVertex (const colorPerVertex_type& x);

  void
  colorPerVertex (::std::auto_ptr< colorPerVertex_type > p);

  static const colorPerVertex_type&
  colorPerVertex_default_value ();

  // normalPerVertex
  // 
  typedef ::SFBool normalPerVertex_type;
  typedef ::xsd::cxx::tree::traits< normalPerVertex_type, char > normalPerVertex_traits;

  const normalPerVertex_type&
  normalPerVertex () const;

  normalPerVertex_type&
  normalPerVertex ();

  void
  normalPerVertex (const normalPerVertex_type& x);

  void
  normalPerVertex (::std::auto_ptr< normalPerVertex_type > p);

  static const normalPerVertex_type&
  normalPerVertex_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  X3DComposedGeometryNode ();

  X3DComposedGeometryNode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  X3DComposedGeometryNode (const X3DComposedGeometryNode& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual X3DComposedGeometryNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DComposedGeometryNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  FloatVertexAttribute_sequence FloatVertexAttribute_;
  Matrix3VertexAttribute_sequence Matrix3VertexAttribute_;
  Matrix4VertexAttribute_sequence Matrix4VertexAttribute_;
  Color_sequence Color_;
  ColorRGBA_sequence ColorRGBA_;
  Coordinate_sequence Coordinate_;
  CoordinateDouble_sequence CoordinateDouble_;
  GeoCoordinate_sequence GeoCoordinate_;
  FogCoordinate_sequence FogCoordinate_;
  Normal_sequence Normal_;
  TextureCoordinate_sequence TextureCoordinate_;
  TextureCoordinate3D_sequence TextureCoordinate3D_;
  TextureCoordinate4D_sequence TextureCoordinate4D_;
  TextureCoordinateGenerator_sequence TextureCoordinateGenerator_;
  MultiTextureCoordinate_sequence MultiTextureCoordinate_;
  NurbsTextureCoordinate_sequence NurbsTextureCoordinate_;
  ProtoInstance_sequence ProtoInstance_;
  ::xsd::cxx::tree::one< ccw_type > ccw_;
  static const ccw_type ccw_default_value_;
  ::xsd::cxx::tree::one< colorPerVertex_type > colorPerVertex_;
  static const colorPerVertex_type colorPerVertex_default_value_;
  ::xsd::cxx::tree::one< normalPerVertex_type > normalPerVertex_;
  static const normalPerVertex_type normalPerVertex_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class X3DCoordinateNode: public ::X3DGeometricPropertyNode
{
  public:
  // Constructors.
  //
  X3DCoordinateNode ();

  X3DCoordinateNode (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  X3DCoordinateNode (const X3DCoordinateNode& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual X3DCoordinateNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DCoordinateNode ();
};

class X3DSensorNode: public ::X3DChildNode
{
  public:
  // enabled
  // 
  typedef ::SFBool enabled_type;
  typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

  const enabled_type&
  enabled () const;

  enabled_type&
  enabled ();

  void
  enabled (const enabled_type& x);

  void
  enabled (::std::auto_ptr< enabled_type > p);

  static const enabled_type&
  enabled_default_value ();

  // Constructors.
  //
  X3DSensorNode ();

  X3DSensorNode (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  X3DSensorNode (const X3DSensorNode& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual X3DSensorNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DSensorNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< enabled_type > enabled_;
  static const enabled_type enabled_default_value_;
};

class X3DPointingDeviceSensorNode: public ::X3DSensorNode
{
  public:
  // description
  // 
  typedef ::SFString description_type;
  typedef ::xsd::cxx::tree::optional< description_type > description_optional;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_optional&
  description () const;

  description_optional&
  description ();

  void
  description (const description_type& x);

  void
  description (const description_optional& x);

  void
  description (::std::auto_ptr< description_type > p);

  // Constructors.
  //
  X3DPointingDeviceSensorNode ();

  X3DPointingDeviceSensorNode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  X3DPointingDeviceSensorNode (const X3DPointingDeviceSensorNode& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  virtual X3DPointingDeviceSensorNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DPointingDeviceSensorNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  description_optional description_;
};

class X3DDragSensorNode: public ::X3DPointingDeviceSensorNode
{
  public:
  // autoOffset
  // 
  typedef ::SFBool autoOffset_type;
  typedef ::xsd::cxx::tree::traits< autoOffset_type, char > autoOffset_traits;

  const autoOffset_type&
  autoOffset () const;

  autoOffset_type&
  autoOffset ();

  void
  autoOffset (const autoOffset_type& x);

  void
  autoOffset (::std::auto_ptr< autoOffset_type > p);

  static const autoOffset_type&
  autoOffset_default_value ();

  // Constructors.
  //
  X3DDragSensorNode ();

  X3DDragSensorNode (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  X3DDragSensorNode (const X3DDragSensorNode& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual X3DDragSensorNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DDragSensorNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< autoOffset_type > autoOffset_;
  static const autoOffset_type autoOffset_default_value_;
};

class X3DEnvironmentalSensorNode: public ::X3DSensorNode
{
  public:
  // center
  // 
  typedef ::SFVec3f center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::auto_ptr< center_type > p);

  static const center_type&
  center_default_value ();

  // size
  // 
  typedef ::SFVec3f size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  static const size_type&
  size_default_value ();

  // Constructors.
  //
  X3DEnvironmentalSensorNode ();

  X3DEnvironmentalSensorNode (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  X3DEnvironmentalSensorNode (const X3DEnvironmentalSensorNode& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  virtual X3DEnvironmentalSensorNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DEnvironmentalSensorNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< center_type > center_;
  static const center_type center_default_value_;
  ::xsd::cxx::tree::one< size_type > size_;
  static const size_type size_default_value_;
};

class X3DEnvironmentTextureNode: public ::X3DAppearanceChildNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DEnvironmentTextureNode ();

  X3DEnvironmentTextureNode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  X3DEnvironmentTextureNode (const X3DEnvironmentTextureNode& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual X3DEnvironmentTextureNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DEnvironmentTextureNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DField: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  X3DField ();

  X3DField (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  X3DField (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  X3DField (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  X3DField (const X3DField& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual X3DField*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DField ();
};

class X3DFogObject: public ::X3DNode
{
  public:
  // color
  // 
  typedef ::SFColor color_type;
  typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

  const color_type&
  color () const;

  color_type&
  color ();

  void
  color (const color_type& x);

  void
  color (::std::auto_ptr< color_type > p);

  static const color_type&
  color_default_value ();

  // fogType
  // 
  typedef ::fogTypeValues fogType_type;
  typedef ::xsd::cxx::tree::traits< fogType_type, char > fogType_traits;

  const fogType_type&
  fogType () const;

  fogType_type&
  fogType ();

  void
  fogType (const fogType_type& x);

  void
  fogType (::std::auto_ptr< fogType_type > p);

  static const fogType_type&
  fogType_default_value ();

  // visibilityRange
  // 
  typedef ::SFFloat visibilityRange_type;
  typedef ::xsd::cxx::tree::traits< visibilityRange_type, char > visibilityRange_traits;

  const visibilityRange_type&
  visibilityRange () const;

  visibilityRange_type&
  visibilityRange ();

  void
  visibilityRange (const visibilityRange_type& x);

  void
  visibilityRange (::std::auto_ptr< visibilityRange_type > p);

  static const visibilityRange_type&
  visibilityRange_default_value ();

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DFogObject ();

  X3DFogObject (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  X3DFogObject (const X3DFogObject& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual X3DFogObject*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DFogObject ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< color_type > color_;
  static const color_type color_default_value_;
  ::xsd::cxx::tree::one< fogType_type > fogType_;
  static const fogType_type fogType_default_value_;
  ::xsd::cxx::tree::one< visibilityRange_type > visibilityRange_;
  static const visibilityRange_type visibilityRange_default_value_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DFontStyleNode: public ::X3DNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DFontStyleNode ();

  X3DFontStyleNode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  X3DFontStyleNode (const X3DFontStyleNode& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual X3DFontStyleNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DFontStyleNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DGroupingNode: public ::X3DChildNode
{
  public:
  // Appearance
  // 
  typedef ::Appearance Appearance_type;
  typedef ::xsd::cxx::tree::sequence< Appearance_type > Appearance_sequence;
  typedef Appearance_sequence::iterator Appearance_iterator;
  typedef Appearance_sequence::const_iterator Appearance_const_iterator;
  typedef ::xsd::cxx::tree::traits< Appearance_type, char > Appearance_traits;

  const Appearance_sequence&
  Appearance () const;

  Appearance_sequence&
  Appearance ();

  void
  Appearance (const Appearance_sequence& s);

  // Background
  // 
  typedef ::Background Background_type;
  typedef ::xsd::cxx::tree::sequence< Background_type > Background_sequence;
  typedef Background_sequence::iterator Background_iterator;
  typedef Background_sequence::const_iterator Background_const_iterator;
  typedef ::xsd::cxx::tree::traits< Background_type, char > Background_traits;

  const Background_sequence&
  Background () const;

  Background_sequence&
  Background ();

  void
  Background (const Background_sequence& s);

  // ColorInterpolator
  // 
  typedef ::ColorInterpolator ColorInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ColorInterpolator_type > ColorInterpolator_sequence;
  typedef ColorInterpolator_sequence::iterator ColorInterpolator_iterator;
  typedef ColorInterpolator_sequence::const_iterator ColorInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorInterpolator_type, char > ColorInterpolator_traits;

  const ColorInterpolator_sequence&
  ColorInterpolator () const;

  ColorInterpolator_sequence&
  ColorInterpolator ();

  void
  ColorInterpolator (const ColorInterpolator_sequence& s);

  // CoordinateInterpolator
  // 
  typedef ::CoordinateInterpolator CoordinateInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator_type > CoordinateInterpolator_sequence;
  typedef CoordinateInterpolator_sequence::iterator CoordinateInterpolator_iterator;
  typedef CoordinateInterpolator_sequence::const_iterator CoordinateInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator_type, char > CoordinateInterpolator_traits;

  const CoordinateInterpolator_sequence&
  CoordinateInterpolator () const;

  CoordinateInterpolator_sequence&
  CoordinateInterpolator ();

  void
  CoordinateInterpolator (const CoordinateInterpolator_sequence& s);

  // DirectionalLight
  // 
  typedef ::DirectionalLight DirectionalLight_type;
  typedef ::xsd::cxx::tree::sequence< DirectionalLight_type > DirectionalLight_sequence;
  typedef DirectionalLight_sequence::iterator DirectionalLight_iterator;
  typedef DirectionalLight_sequence::const_iterator DirectionalLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< DirectionalLight_type, char > DirectionalLight_traits;

  const DirectionalLight_sequence&
  DirectionalLight () const;

  DirectionalLight_sequence&
  DirectionalLight ();

  void
  DirectionalLight (const DirectionalLight_sequence& s);

  // Group
  // 
  typedef ::Group Group_type;
  typedef ::xsd::cxx::tree::sequence< Group_type > Group_sequence;
  typedef Group_sequence::iterator Group_iterator;
  typedef Group_sequence::const_iterator Group_const_iterator;
  typedef ::xsd::cxx::tree::traits< Group_type, char > Group_traits;

  const Group_sequence&
  Group () const;

  Group_sequence&
  Group ();

  void
  Group (const Group_sequence& s);

  // NavigationInfo
  // 
  typedef ::NavigationInfo NavigationInfo_type;
  typedef ::xsd::cxx::tree::sequence< NavigationInfo_type > NavigationInfo_sequence;
  typedef NavigationInfo_sequence::iterator NavigationInfo_iterator;
  typedef NavigationInfo_sequence::const_iterator NavigationInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< NavigationInfo_type, char > NavigationInfo_traits;

  const NavigationInfo_sequence&
  NavigationInfo () const;

  NavigationInfo_sequence&
  NavigationInfo ();

  void
  NavigationInfo (const NavigationInfo_sequence& s);

  // NormalInterpolator
  // 
  typedef ::NormalInterpolator NormalInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NormalInterpolator_type > NormalInterpolator_sequence;
  typedef NormalInterpolator_sequence::iterator NormalInterpolator_iterator;
  typedef NormalInterpolator_sequence::const_iterator NormalInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NormalInterpolator_type, char > NormalInterpolator_traits;

  const NormalInterpolator_sequence&
  NormalInterpolator () const;

  NormalInterpolator_sequence&
  NormalInterpolator ();

  void
  NormalInterpolator (const NormalInterpolator_sequence& s);

  // OrientationInterpolator
  // 
  typedef ::OrientationInterpolator OrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< OrientationInterpolator_type > OrientationInterpolator_sequence;
  typedef OrientationInterpolator_sequence::iterator OrientationInterpolator_iterator;
  typedef OrientationInterpolator_sequence::const_iterator OrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< OrientationInterpolator_type, char > OrientationInterpolator_traits;

  const OrientationInterpolator_sequence&
  OrientationInterpolator () const;

  OrientationInterpolator_sequence&
  OrientationInterpolator ();

  void
  OrientationInterpolator (const OrientationInterpolator_sequence& s);

  // PositionInterpolator
  // 
  typedef ::PositionInterpolator PositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator_type > PositionInterpolator_sequence;
  typedef PositionInterpolator_sequence::iterator PositionInterpolator_iterator;
  typedef PositionInterpolator_sequence::const_iterator PositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator_type, char > PositionInterpolator_traits;

  const PositionInterpolator_sequence&
  PositionInterpolator () const;

  PositionInterpolator_sequence&
  PositionInterpolator ();

  void
  PositionInterpolator (const PositionInterpolator_sequence& s);

  // ScalarInterpolator
  // 
  typedef ::ScalarInterpolator ScalarInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ScalarInterpolator_type > ScalarInterpolator_sequence;
  typedef ScalarInterpolator_sequence::iterator ScalarInterpolator_iterator;
  typedef ScalarInterpolator_sequence::const_iterator ScalarInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ScalarInterpolator_type, char > ScalarInterpolator_traits;

  const ScalarInterpolator_sequence&
  ScalarInterpolator () const;

  ScalarInterpolator_sequence&
  ScalarInterpolator ();

  void
  ScalarInterpolator (const ScalarInterpolator_sequence& s);

  // Shape
  // 
  typedef ::Shape Shape_type;
  typedef ::xsd::cxx::tree::sequence< Shape_type > Shape_sequence;
  typedef Shape_sequence::iterator Shape_iterator;
  typedef Shape_sequence::const_iterator Shape_const_iterator;
  typedef ::xsd::cxx::tree::traits< Shape_type, char > Shape_traits;

  const Shape_sequence&
  Shape () const;

  Shape_sequence&
  Shape ();

  void
  Shape (const Shape_sequence& s);

  // TimeSensor
  // 
  typedef ::TimeSensor TimeSensor_type;
  typedef ::xsd::cxx::tree::sequence< TimeSensor_type > TimeSensor_sequence;
  typedef TimeSensor_sequence::iterator TimeSensor_iterator;
  typedef TimeSensor_sequence::const_iterator TimeSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeSensor_type, char > TimeSensor_traits;

  const TimeSensor_sequence&
  TimeSensor () const;

  TimeSensor_sequence&
  TimeSensor ();

  void
  TimeSensor (const TimeSensor_sequence& s);

  // Transform
  // 
  typedef ::Transform Transform_type;
  typedef ::xsd::cxx::tree::sequence< Transform_type > Transform_sequence;
  typedef Transform_sequence::iterator Transform_iterator;
  typedef Transform_sequence::const_iterator Transform_const_iterator;
  typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

  const Transform_sequence&
  Transform () const;

  Transform_sequence&
  Transform ();

  void
  Transform (const Transform_sequence& s);

  // Viewpoint
  // 
  typedef ::Viewpoint Viewpoint_type;
  typedef ::xsd::cxx::tree::sequence< Viewpoint_type > Viewpoint_sequence;
  typedef Viewpoint_sequence::iterator Viewpoint_iterator;
  typedef Viewpoint_sequence::const_iterator Viewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< Viewpoint_type, char > Viewpoint_traits;

  const Viewpoint_sequence&
  Viewpoint () const;

  Viewpoint_sequence&
  Viewpoint ();

  void
  Viewpoint (const Viewpoint_sequence& s);

  // WorldInfo
  // 
  typedef ::WorldInfo WorldInfo_type;
  typedef ::xsd::cxx::tree::sequence< WorldInfo_type > WorldInfo_sequence;
  typedef WorldInfo_sequence::iterator WorldInfo_iterator;
  typedef WorldInfo_sequence::const_iterator WorldInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< WorldInfo_type, char > WorldInfo_traits;

  const WorldInfo_sequence&
  WorldInfo () const;

  WorldInfo_sequence&
  WorldInfo ();

  void
  WorldInfo (const WorldInfo_sequence& s);

  // Anchor
  // 
  typedef ::Anchor Anchor_type;
  typedef ::xsd::cxx::tree::sequence< Anchor_type > Anchor_sequence;
  typedef Anchor_sequence::iterator Anchor_iterator;
  typedef Anchor_sequence::const_iterator Anchor_const_iterator;
  typedef ::xsd::cxx::tree::traits< Anchor_type, char > Anchor_traits;

  const Anchor_sequence&
  Anchor () const;

  Anchor_sequence&
  Anchor ();

  void
  Anchor (const Anchor_sequence& s);

  // BooleanFilter
  // 
  typedef ::BooleanFilter BooleanFilter_type;
  typedef ::xsd::cxx::tree::sequence< BooleanFilter_type > BooleanFilter_sequence;
  typedef BooleanFilter_sequence::iterator BooleanFilter_iterator;
  typedef BooleanFilter_sequence::const_iterator BooleanFilter_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanFilter_type, char > BooleanFilter_traits;

  const BooleanFilter_sequence&
  BooleanFilter () const;

  BooleanFilter_sequence&
  BooleanFilter ();

  void
  BooleanFilter (const BooleanFilter_sequence& s);

  // BooleanSequencer
  // 
  typedef ::BooleanSequencer BooleanSequencer_type;
  typedef ::xsd::cxx::tree::sequence< BooleanSequencer_type > BooleanSequencer_sequence;
  typedef BooleanSequencer_sequence::iterator BooleanSequencer_iterator;
  typedef BooleanSequencer_sequence::const_iterator BooleanSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanSequencer_type, char > BooleanSequencer_traits;

  const BooleanSequencer_sequence&
  BooleanSequencer () const;

  BooleanSequencer_sequence&
  BooleanSequencer ();

  void
  BooleanSequencer (const BooleanSequencer_sequence& s);

  // BooleanToggle
  // 
  typedef ::BooleanToggle BooleanToggle_type;
  typedef ::xsd::cxx::tree::sequence< BooleanToggle_type > BooleanToggle_sequence;
  typedef BooleanToggle_sequence::iterator BooleanToggle_iterator;
  typedef BooleanToggle_sequence::const_iterator BooleanToggle_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanToggle_type, char > BooleanToggle_traits;

  const BooleanToggle_sequence&
  BooleanToggle () const;

  BooleanToggle_sequence&
  BooleanToggle ();

  void
  BooleanToggle (const BooleanToggle_sequence& s);

  // BooleanTrigger
  // 
  typedef ::BooleanTrigger BooleanTrigger_type;
  typedef ::xsd::cxx::tree::sequence< BooleanTrigger_type > BooleanTrigger_sequence;
  typedef BooleanTrigger_sequence::iterator BooleanTrigger_iterator;
  typedef BooleanTrigger_sequence::const_iterator BooleanTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanTrigger_type, char > BooleanTrigger_traits;

  const BooleanTrigger_sequence&
  BooleanTrigger () const;

  BooleanTrigger_sequence&
  BooleanTrigger ();

  void
  BooleanTrigger (const BooleanTrigger_sequence& s);

  // CylinderSensor
  // 
  typedef ::CylinderSensor CylinderSensor_type;
  typedef ::xsd::cxx::tree::sequence< CylinderSensor_type > CylinderSensor_sequence;
  typedef CylinderSensor_sequence::iterator CylinderSensor_iterator;
  typedef CylinderSensor_sequence::const_iterator CylinderSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< CylinderSensor_type, char > CylinderSensor_traits;

  const CylinderSensor_sequence&
  CylinderSensor () const;

  CylinderSensor_sequence&
  CylinderSensor ();

  void
  CylinderSensor (const CylinderSensor_sequence& s);

  // Inline
  // 
  typedef ::Inline Inline_type;
  typedef ::xsd::cxx::tree::sequence< Inline_type > Inline_sequence;
  typedef Inline_sequence::iterator Inline_iterator;
  typedef Inline_sequence::const_iterator Inline_const_iterator;
  typedef ::xsd::cxx::tree::traits< Inline_type, char > Inline_traits;

  const Inline_sequence&
  Inline () const;

  Inline_sequence&
  Inline ();

  void
  Inline (const Inline_sequence& s);

  // IntegerSequencer
  // 
  typedef ::IntegerSequencer IntegerSequencer_type;
  typedef ::xsd::cxx::tree::sequence< IntegerSequencer_type > IntegerSequencer_sequence;
  typedef IntegerSequencer_sequence::iterator IntegerSequencer_iterator;
  typedef IntegerSequencer_sequence::const_iterator IntegerSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerSequencer_type, char > IntegerSequencer_traits;

  const IntegerSequencer_sequence&
  IntegerSequencer () const;

  IntegerSequencer_sequence&
  IntegerSequencer ();

  void
  IntegerSequencer (const IntegerSequencer_sequence& s);

  // IntegerTrigger
  // 
  typedef ::IntegerTrigger IntegerTrigger_type;
  typedef ::xsd::cxx::tree::sequence< IntegerTrigger_type > IntegerTrigger_sequence;
  typedef IntegerTrigger_sequence::iterator IntegerTrigger_iterator;
  typedef IntegerTrigger_sequence::const_iterator IntegerTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerTrigger_type, char > IntegerTrigger_traits;

  const IntegerTrigger_sequence&
  IntegerTrigger () const;

  IntegerTrigger_sequence&
  IntegerTrigger ();

  void
  IntegerTrigger (const IntegerTrigger_sequence& s);

  // KeySensor
  // 
  typedef ::KeySensor KeySensor_type;
  typedef ::xsd::cxx::tree::sequence< KeySensor_type > KeySensor_sequence;
  typedef KeySensor_sequence::iterator KeySensor_iterator;
  typedef KeySensor_sequence::const_iterator KeySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< KeySensor_type, char > KeySensor_traits;

  const KeySensor_sequence&
  KeySensor () const;

  KeySensor_sequence&
  KeySensor ();

  void
  KeySensor (const KeySensor_sequence& s);

  // PlaneSensor
  // 
  typedef ::PlaneSensor PlaneSensor_type;
  typedef ::xsd::cxx::tree::sequence< PlaneSensor_type > PlaneSensor_sequence;
  typedef PlaneSensor_sequence::iterator PlaneSensor_iterator;
  typedef PlaneSensor_sequence::const_iterator PlaneSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< PlaneSensor_type, char > PlaneSensor_traits;

  const PlaneSensor_sequence&
  PlaneSensor () const;

  PlaneSensor_sequence&
  PlaneSensor ();

  void
  PlaneSensor (const PlaneSensor_sequence& s);

  // PointLight
  // 
  typedef ::PointLight PointLight_type;
  typedef ::xsd::cxx::tree::sequence< PointLight_type > PointLight_sequence;
  typedef PointLight_sequence::iterator PointLight_iterator;
  typedef PointLight_sequence::const_iterator PointLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< PointLight_type, char > PointLight_traits;

  const PointLight_sequence&
  PointLight () const;

  PointLight_sequence&
  PointLight ();

  void
  PointLight (const PointLight_sequence& s);

  // ProximitySensor
  // 
  typedef ::ProximitySensor ProximitySensor_type;
  typedef ::xsd::cxx::tree::sequence< ProximitySensor_type > ProximitySensor_sequence;
  typedef ProximitySensor_sequence::iterator ProximitySensor_iterator;
  typedef ProximitySensor_sequence::const_iterator ProximitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProximitySensor_type, char > ProximitySensor_traits;

  const ProximitySensor_sequence&
  ProximitySensor () const;

  ProximitySensor_sequence&
  ProximitySensor ();

  void
  ProximitySensor (const ProximitySensor_sequence& s);

  // SphereSensor
  // 
  typedef ::SphereSensor SphereSensor_type;
  typedef ::xsd::cxx::tree::sequence< SphereSensor_type > SphereSensor_sequence;
  typedef SphereSensor_sequence::iterator SphereSensor_iterator;
  typedef SphereSensor_sequence::const_iterator SphereSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< SphereSensor_type, char > SphereSensor_traits;

  const SphereSensor_sequence&
  SphereSensor () const;

  SphereSensor_sequence&
  SphereSensor ();

  void
  SphereSensor (const SphereSensor_sequence& s);

  // SpotLight
  // 
  typedef ::SpotLight SpotLight_type;
  typedef ::xsd::cxx::tree::sequence< SpotLight_type > SpotLight_sequence;
  typedef SpotLight_sequence::iterator SpotLight_iterator;
  typedef SpotLight_sequence::const_iterator SpotLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< SpotLight_type, char > SpotLight_traits;

  const SpotLight_sequence&
  SpotLight () const;

  SpotLight_sequence&
  SpotLight ();

  void
  SpotLight (const SpotLight_sequence& s);

  // StringSensor
  // 
  typedef ::StringSensor StringSensor_type;
  typedef ::xsd::cxx::tree::sequence< StringSensor_type > StringSensor_sequence;
  typedef StringSensor_sequence::iterator StringSensor_iterator;
  typedef StringSensor_sequence::const_iterator StringSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< StringSensor_type, char > StringSensor_traits;

  const StringSensor_sequence&
  StringSensor () const;

  StringSensor_sequence&
  StringSensor ();

  void
  StringSensor (const StringSensor_sequence& s);

  // Switch
  // 
  typedef ::Switch Switch_type;
  typedef ::xsd::cxx::tree::sequence< Switch_type > Switch_sequence;
  typedef Switch_sequence::iterator Switch_iterator;
  typedef Switch_sequence::const_iterator Switch_const_iterator;
  typedef ::xsd::cxx::tree::traits< Switch_type, char > Switch_traits;

  const Switch_sequence&
  Switch () const;

  Switch_sequence&
  Switch ();

  void
  Switch (const Switch_sequence& s);

  // TimeTrigger
  // 
  typedef ::TimeTrigger TimeTrigger_type;
  typedef ::xsd::cxx::tree::sequence< TimeTrigger_type > TimeTrigger_sequence;
  typedef TimeTrigger_sequence::iterator TimeTrigger_iterator;
  typedef TimeTrigger_sequence::const_iterator TimeTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeTrigger_type, char > TimeTrigger_traits;

  const TimeTrigger_sequence&
  TimeTrigger () const;

  TimeTrigger_sequence&
  TimeTrigger ();

  void
  TimeTrigger (const TimeTrigger_sequence& s);

  // TouchSensor
  // 
  typedef ::TouchSensor TouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< TouchSensor_type > TouchSensor_sequence;
  typedef TouchSensor_sequence::iterator TouchSensor_iterator;
  typedef TouchSensor_sequence::const_iterator TouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TouchSensor_type, char > TouchSensor_traits;

  const TouchSensor_sequence&
  TouchSensor () const;

  TouchSensor_sequence&
  TouchSensor ();

  void
  TouchSensor (const TouchSensor_sequence& s);

  // AudioClip
  // 
  typedef ::AudioClip AudioClip_type;
  typedef ::xsd::cxx::tree::sequence< AudioClip_type > AudioClip_sequence;
  typedef AudioClip_sequence::iterator AudioClip_iterator;
  typedef AudioClip_sequence::const_iterator AudioClip_const_iterator;
  typedef ::xsd::cxx::tree::traits< AudioClip_type, char > AudioClip_traits;

  const AudioClip_sequence&
  AudioClip () const;

  AudioClip_sequence&
  AudioClip ();

  void
  AudioClip (const AudioClip_sequence& s);

  // Billboard
  // 
  typedef ::Billboard Billboard_type;
  typedef ::xsd::cxx::tree::sequence< Billboard_type > Billboard_sequence;
  typedef Billboard_sequence::iterator Billboard_iterator;
  typedef Billboard_sequence::const_iterator Billboard_const_iterator;
  typedef ::xsd::cxx::tree::traits< Billboard_type, char > Billboard_traits;

  const Billboard_sequence&
  Billboard () const;

  Billboard_sequence&
  Billboard ();

  void
  Billboard (const Billboard_sequence& s);

  // Collision
  // 
  typedef ::Collision Collision_type;
  typedef ::xsd::cxx::tree::sequence< Collision_type > Collision_sequence;
  typedef Collision_sequence::iterator Collision_iterator;
  typedef Collision_sequence::const_iterator Collision_const_iterator;
  typedef ::xsd::cxx::tree::traits< Collision_type, char > Collision_traits;

  const Collision_sequence&
  Collision () const;

  Collision_sequence&
  Collision ();

  void
  Collision (const Collision_sequence& s);

  // Fog
  // 
  typedef ::Fog Fog_type;
  typedef ::xsd::cxx::tree::sequence< Fog_type > Fog_sequence;
  typedef Fog_sequence::iterator Fog_iterator;
  typedef Fog_sequence::const_iterator Fog_const_iterator;
  typedef ::xsd::cxx::tree::traits< Fog_type, char > Fog_traits;

  const Fog_sequence&
  Fog () const;

  Fog_sequence&
  Fog ();

  void
  Fog (const Fog_sequence& s);

  // LoadSensor
  // 
  typedef ::LoadSensor LoadSensor_type;
  typedef ::xsd::cxx::tree::sequence< LoadSensor_type > LoadSensor_sequence;
  typedef LoadSensor_sequence::iterator LoadSensor_iterator;
  typedef LoadSensor_sequence::const_iterator LoadSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< LoadSensor_type, char > LoadSensor_traits;

  const LoadSensor_sequence&
  LoadSensor () const;

  LoadSensor_sequence&
  LoadSensor ();

  void
  LoadSensor (const LoadSensor_sequence& s);

  // LocalFog
  // 
  typedef ::LocalFog LocalFog_type;
  typedef ::xsd::cxx::tree::sequence< LocalFog_type > LocalFog_sequence;
  typedef LocalFog_sequence::iterator LocalFog_iterator;
  typedef LocalFog_sequence::const_iterator LocalFog_const_iterator;
  typedef ::xsd::cxx::tree::traits< LocalFog_type, char > LocalFog_traits;

  const LocalFog_sequence&
  LocalFog () const;

  LocalFog_sequence&
  LocalFog ();

  void
  LocalFog (const LocalFog_sequence& s);

  // LOD
  // 
  typedef ::LOD LOD_type;
  typedef ::xsd::cxx::tree::sequence< LOD_type > LOD_sequence;
  typedef LOD_sequence::iterator LOD_iterator;
  typedef LOD_sequence::const_iterator LOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOD_type, char > LOD_traits;

  const LOD_sequence&
  LOD () const;

  LOD_sequence&
  LOD ();

  void
  LOD (const LOD_sequence& s);

  // Script
  // 
  typedef ::Script Script_type;
  typedef ::xsd::cxx::tree::sequence< Script_type > Script_sequence;
  typedef Script_sequence::iterator Script_iterator;
  typedef Script_sequence::const_iterator Script_const_iterator;
  typedef ::xsd::cxx::tree::traits< Script_type, char > Script_traits;

  const Script_sequence&
  Script () const;

  Script_sequence&
  Script ();

  void
  Script (const Script_sequence& s);

  // Sound
  // 
  typedef ::Sound Sound_type;
  typedef ::xsd::cxx::tree::sequence< Sound_type > Sound_sequence;
  typedef Sound_sequence::iterator Sound_iterator;
  typedef Sound_sequence::const_iterator Sound_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sound_type, char > Sound_traits;

  const Sound_sequence&
  Sound () const;

  Sound_sequence&
  Sound ();

  void
  Sound (const Sound_sequence& s);

  // VisibilitySensor
  // 
  typedef ::VisibilitySensor VisibilitySensor_type;
  typedef ::xsd::cxx::tree::sequence< VisibilitySensor_type > VisibilitySensor_sequence;
  typedef VisibilitySensor_sequence::iterator VisibilitySensor_iterator;
  typedef VisibilitySensor_sequence::const_iterator VisibilitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< VisibilitySensor_type, char > VisibilitySensor_traits;

  const VisibilitySensor_sequence&
  VisibilitySensor () const;

  VisibilitySensor_sequence&
  VisibilitySensor ();

  void
  VisibilitySensor (const VisibilitySensor_sequence& s);

  // CoordinateInterpolator2D
  // 
  typedef ::CoordinateInterpolator2D CoordinateInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator2D_type > CoordinateInterpolator2D_sequence;
  typedef CoordinateInterpolator2D_sequence::iterator CoordinateInterpolator2D_iterator;
  typedef CoordinateInterpolator2D_sequence::const_iterator CoordinateInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator2D_type, char > CoordinateInterpolator2D_traits;

  const CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D () const;

  CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D ();

  void
  CoordinateInterpolator2D (const CoordinateInterpolator2D_sequence& s);

  // PositionInterpolator2D
  // 
  typedef ::PositionInterpolator2D PositionInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator2D_type > PositionInterpolator2D_sequence;
  typedef PositionInterpolator2D_sequence::iterator PositionInterpolator2D_iterator;
  typedef PositionInterpolator2D_sequence::const_iterator PositionInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator2D_type, char > PositionInterpolator2D_traits;

  const PositionInterpolator2D_sequence&
  PositionInterpolator2D () const;

  PositionInterpolator2D_sequence&
  PositionInterpolator2D ();

  void
  PositionInterpolator2D (const PositionInterpolator2D_sequence& s);

  // StaticGroup
  // 
  typedef ::StaticGroup StaticGroup_type;
  typedef ::xsd::cxx::tree::sequence< StaticGroup_type > StaticGroup_sequence;
  typedef StaticGroup_sequence::iterator StaticGroup_iterator;
  typedef StaticGroup_sequence::const_iterator StaticGroup_const_iterator;
  typedef ::xsd::cxx::tree::traits< StaticGroup_type, char > StaticGroup_traits;

  const StaticGroup_sequence&
  StaticGroup () const;

  StaticGroup_sequence&
  StaticGroup ();

  void
  StaticGroup (const StaticGroup_sequence& s);

  // CADAssembly
  // 
  typedef ::CADAssembly CADAssembly_type;
  typedef ::xsd::cxx::tree::sequence< CADAssembly_type > CADAssembly_sequence;
  typedef CADAssembly_sequence::iterator CADAssembly_iterator;
  typedef CADAssembly_sequence::const_iterator CADAssembly_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADAssembly_type, char > CADAssembly_traits;

  const CADAssembly_sequence&
  CADAssembly () const;

  CADAssembly_sequence&
  CADAssembly ();

  void
  CADAssembly (const CADAssembly_sequence& s);

  // CADLayer
  // 
  typedef ::CADLayer CADLayer_type;
  typedef ::xsd::cxx::tree::sequence< CADLayer_type > CADLayer_sequence;
  typedef CADLayer_sequence::iterator CADLayer_iterator;
  typedef CADLayer_sequence::const_iterator CADLayer_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADLayer_type, char > CADLayer_traits;

  const CADLayer_sequence&
  CADLayer () const;

  CADLayer_sequence&
  CADLayer ();

  void
  CADLayer (const CADLayer_sequence& s);

  // EspduTransform
  // 
  typedef ::EspduTransform EspduTransform_type;
  typedef ::xsd::cxx::tree::sequence< EspduTransform_type > EspduTransform_sequence;
  typedef EspduTransform_sequence::iterator EspduTransform_iterator;
  typedef EspduTransform_sequence::const_iterator EspduTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< EspduTransform_type, char > EspduTransform_traits;

  const EspduTransform_sequence&
  EspduTransform () const;

  EspduTransform_sequence&
  EspduTransform ();

  void
  EspduTransform (const EspduTransform_sequence& s);

  // ReceiverPdu
  // 
  typedef ::ReceiverPdu ReceiverPdu_type;
  typedef ::xsd::cxx::tree::sequence< ReceiverPdu_type > ReceiverPdu_sequence;
  typedef ReceiverPdu_sequence::iterator ReceiverPdu_iterator;
  typedef ReceiverPdu_sequence::const_iterator ReceiverPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< ReceiverPdu_type, char > ReceiverPdu_traits;

  const ReceiverPdu_sequence&
  ReceiverPdu () const;

  ReceiverPdu_sequence&
  ReceiverPdu ();

  void
  ReceiverPdu (const ReceiverPdu_sequence& s);

  // SignalPdu
  // 
  typedef ::SignalPdu SignalPdu_type;
  typedef ::xsd::cxx::tree::sequence< SignalPdu_type > SignalPdu_sequence;
  typedef SignalPdu_sequence::iterator SignalPdu_iterator;
  typedef SignalPdu_sequence::const_iterator SignalPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< SignalPdu_type, char > SignalPdu_traits;

  const SignalPdu_sequence&
  SignalPdu () const;

  SignalPdu_sequence&
  SignalPdu ();

  void
  SignalPdu (const SignalPdu_sequence& s);

  // TransmitterPdu
  // 
  typedef ::TransmitterPdu TransmitterPdu_type;
  typedef ::xsd::cxx::tree::sequence< TransmitterPdu_type > TransmitterPdu_sequence;
  typedef TransmitterPdu_sequence::iterator TransmitterPdu_iterator;
  typedef TransmitterPdu_sequence::const_iterator TransmitterPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< TransmitterPdu_type, char > TransmitterPdu_traits;

  const TransmitterPdu_sequence&
  TransmitterPdu () const;

  TransmitterPdu_sequence&
  TransmitterPdu ();

  void
  TransmitterPdu (const TransmitterPdu_sequence& s);

  // GeoLocation
  // 
  typedef ::GeoLocation GeoLocation_type;
  typedef ::xsd::cxx::tree::sequence< GeoLocation_type > GeoLocation_sequence;
  typedef GeoLocation_sequence::iterator GeoLocation_iterator;
  typedef GeoLocation_sequence::const_iterator GeoLocation_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLocation_type, char > GeoLocation_traits;

  const GeoLocation_sequence&
  GeoLocation () const;

  GeoLocation_sequence&
  GeoLocation ();

  void
  GeoLocation (const GeoLocation_sequence& s);

  // GeoLOD
  // 
  typedef ::GeoLOD GeoLOD_type;
  typedef ::xsd::cxx::tree::sequence< GeoLOD_type > GeoLOD_sequence;
  typedef GeoLOD_sequence::iterator GeoLOD_iterator;
  typedef GeoLOD_sequence::const_iterator GeoLOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLOD_type, char > GeoLOD_traits;

  const GeoLOD_sequence&
  GeoLOD () const;

  GeoLOD_sequence&
  GeoLOD ();

  void
  GeoLOD (const GeoLOD_sequence& s);

  // GeoMetadata
  // 
  typedef ::GeoMetadata GeoMetadata_type;
  typedef ::xsd::cxx::tree::sequence< GeoMetadata_type > GeoMetadata_sequence;
  typedef GeoMetadata_sequence::iterator GeoMetadata_iterator;
  typedef GeoMetadata_sequence::const_iterator GeoMetadata_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoMetadata_type, char > GeoMetadata_traits;

  const GeoMetadata_sequence&
  GeoMetadata () const;

  GeoMetadata_sequence&
  GeoMetadata ();

  void
  GeoMetadata (const GeoMetadata_sequence& s);

  // GeoOrigin
  // 
  typedef ::GeoOrigin GeoOrigin_type;
  typedef ::xsd::cxx::tree::sequence< GeoOrigin_type > GeoOrigin_sequence;
  typedef GeoOrigin_sequence::iterator GeoOrigin_iterator;
  typedef GeoOrigin_sequence::const_iterator GeoOrigin_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_sequence&
  GeoOrigin () const;

  GeoOrigin_sequence&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_sequence& s);

  // GeoPositionInterpolator
  // 
  typedef ::GeoPositionInterpolator GeoPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< GeoPositionInterpolator_type > GeoPositionInterpolator_sequence;
  typedef GeoPositionInterpolator_sequence::iterator GeoPositionInterpolator_iterator;
  typedef GeoPositionInterpolator_sequence::const_iterator GeoPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoPositionInterpolator_type, char > GeoPositionInterpolator_traits;

  const GeoPositionInterpolator_sequence&
  GeoPositionInterpolator () const;

  GeoPositionInterpolator_sequence&
  GeoPositionInterpolator ();

  void
  GeoPositionInterpolator (const GeoPositionInterpolator_sequence& s);

  // GeoTouchSensor
  // 
  typedef ::GeoTouchSensor GeoTouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< GeoTouchSensor_type > GeoTouchSensor_sequence;
  typedef GeoTouchSensor_sequence::iterator GeoTouchSensor_iterator;
  typedef GeoTouchSensor_sequence::const_iterator GeoTouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoTouchSensor_type, char > GeoTouchSensor_traits;

  const GeoTouchSensor_sequence&
  GeoTouchSensor () const;

  GeoTouchSensor_sequence&
  GeoTouchSensor ();

  void
  GeoTouchSensor (const GeoTouchSensor_sequence& s);

  // GeoViewpoint
  // 
  typedef ::GeoViewpoint GeoViewpoint_type;
  typedef ::xsd::cxx::tree::sequence< GeoViewpoint_type > GeoViewpoint_sequence;
  typedef GeoViewpoint_sequence::iterator GeoViewpoint_iterator;
  typedef GeoViewpoint_sequence::const_iterator GeoViewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoViewpoint_type, char > GeoViewpoint_traits;

  const GeoViewpoint_sequence&
  GeoViewpoint () const;

  GeoViewpoint_sequence&
  GeoViewpoint ();

  void
  GeoViewpoint (const GeoViewpoint_sequence& s);

  // HAnimHumanoid
  // 
  typedef ::HAnimHumanoid HAnimHumanoid_type;
  typedef ::xsd::cxx::tree::sequence< HAnimHumanoid_type > HAnimHumanoid_sequence;
  typedef HAnimHumanoid_sequence::iterator HAnimHumanoid_iterator;
  typedef HAnimHumanoid_sequence::const_iterator HAnimHumanoid_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimHumanoid_type, char > HAnimHumanoid_traits;

  const HAnimHumanoid_sequence&
  HAnimHumanoid () const;

  HAnimHumanoid_sequence&
  HAnimHumanoid ();

  void
  HAnimHumanoid (const HAnimHumanoid_sequence& s);

  // HAnimJoint
  // 
  typedef ::HAnimJoint HAnimJoint_type;
  typedef ::xsd::cxx::tree::sequence< HAnimJoint_type > HAnimJoint_sequence;
  typedef HAnimJoint_sequence::iterator HAnimJoint_iterator;
  typedef HAnimJoint_sequence::const_iterator HAnimJoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimJoint_type, char > HAnimJoint_traits;

  const HAnimJoint_sequence&
  HAnimJoint () const;

  HAnimJoint_sequence&
  HAnimJoint ();

  void
  HAnimJoint (const HAnimJoint_sequence& s);

  // HAnimSegment
  // 
  typedef ::HAnimSegment HAnimSegment_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSegment_type > HAnimSegment_sequence;
  typedef HAnimSegment_sequence::iterator HAnimSegment_iterator;
  typedef HAnimSegment_sequence::const_iterator HAnimSegment_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSegment_type, char > HAnimSegment_traits;

  const HAnimSegment_sequence&
  HAnimSegment () const;

  HAnimSegment_sequence&
  HAnimSegment ();

  void
  HAnimSegment (const HAnimSegment_sequence& s);

  // HAnimSite
  // 
  typedef ::HAnimSite HAnimSite_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSite_type > HAnimSite_sequence;
  typedef HAnimSite_sequence::iterator HAnimSite_iterator;
  typedef HAnimSite_sequence::const_iterator HAnimSite_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSite_type, char > HAnimSite_traits;

  const HAnimSite_sequence&
  HAnimSite () const;

  HAnimSite_sequence&
  HAnimSite ();

  void
  HAnimSite (const HAnimSite_sequence& s);

  // NurbsOrientationInterpolator
  // 
  typedef ::NurbsOrientationInterpolator NurbsOrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsOrientationInterpolator_type > NurbsOrientationInterpolator_sequence;
  typedef NurbsOrientationInterpolator_sequence::iterator NurbsOrientationInterpolator_iterator;
  typedef NurbsOrientationInterpolator_sequence::const_iterator NurbsOrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsOrientationInterpolator_type, char > NurbsOrientationInterpolator_traits;

  const NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator () const;

  NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator ();

  void
  NurbsOrientationInterpolator (const NurbsOrientationInterpolator_sequence& s);

  // NurbsPositionInterpolator
  // 
  typedef ::NurbsPositionInterpolator NurbsPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsPositionInterpolator_type > NurbsPositionInterpolator_sequence;
  typedef NurbsPositionInterpolator_sequence::iterator NurbsPositionInterpolator_iterator;
  typedef NurbsPositionInterpolator_sequence::const_iterator NurbsPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsPositionInterpolator_type, char > NurbsPositionInterpolator_traits;

  const NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator () const;

  NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator ();

  void
  NurbsPositionInterpolator (const NurbsPositionInterpolator_sequence& s);

  // NurbsSurfaceInterpolator
  // 
  typedef ::NurbsSurfaceInterpolator NurbsSurfaceInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSurfaceInterpolator_type > NurbsSurfaceInterpolator_sequence;
  typedef NurbsSurfaceInterpolator_sequence::iterator NurbsSurfaceInterpolator_iterator;
  typedef NurbsSurfaceInterpolator_sequence::const_iterator NurbsSurfaceInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSurfaceInterpolator_type, char > NurbsSurfaceInterpolator_traits;

  const NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator () const;

  NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator ();

  void
  NurbsSurfaceInterpolator (const NurbsSurfaceInterpolator_sequence& s);

  // NurbsSet
  // 
  typedef ::NurbsSet NurbsSet_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSet_type > NurbsSet_sequence;
  typedef NurbsSet_sequence::iterator NurbsSet_iterator;
  typedef NurbsSet_sequence::const_iterator NurbsSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSet_type, char > NurbsSet_traits;

  const NurbsSet_sequence&
  NurbsSet () const;

  NurbsSet_sequence&
  NurbsSet ();

  void
  NurbsSet (const NurbsSet_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // ROUTE
  // 
  typedef ::ROUTE ROUTE_type;
  typedef ::xsd::cxx::tree::sequence< ROUTE_type > ROUTE_sequence;
  typedef ROUTE_sequence::iterator ROUTE_iterator;
  typedef ROUTE_sequence::const_iterator ROUTE_const_iterator;
  typedef ::xsd::cxx::tree::traits< ROUTE_type, char > ROUTE_traits;

  const ROUTE_sequence&
  ROUTE () const;

  ROUTE_sequence&
  ROUTE ();

  void
  ROUTE (const ROUTE_sequence& s);

  // ExternProtoDeclare
  // 
  typedef ::ExternProtoDeclare ExternProtoDeclare_type;
  typedef ::xsd::cxx::tree::sequence< ExternProtoDeclare_type > ExternProtoDeclare_sequence;
  typedef ExternProtoDeclare_sequence::iterator ExternProtoDeclare_iterator;
  typedef ExternProtoDeclare_sequence::const_iterator ExternProtoDeclare_const_iterator;
  typedef ::xsd::cxx::tree::traits< ExternProtoDeclare_type, char > ExternProtoDeclare_traits;

  const ExternProtoDeclare_sequence&
  ExternProtoDeclare () const;

  ExternProtoDeclare_sequence&
  ExternProtoDeclare ();

  void
  ExternProtoDeclare (const ExternProtoDeclare_sequence& s);

  // ProtoDeclare
  // 
  typedef ::ProtoDeclare ProtoDeclare_type;
  typedef ::xsd::cxx::tree::sequence< ProtoDeclare_type > ProtoDeclare_sequence;
  typedef ProtoDeclare_sequence::iterator ProtoDeclare_iterator;
  typedef ProtoDeclare_sequence::const_iterator ProtoDeclare_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoDeclare_type, char > ProtoDeclare_traits;

  const ProtoDeclare_sequence&
  ProtoDeclare () const;

  ProtoDeclare_sequence&
  ProtoDeclare ();

  void
  ProtoDeclare (const ProtoDeclare_sequence& s);

  // IMPORT
  // 
  typedef ::IMPORT IMPORT_type;
  typedef ::xsd::cxx::tree::sequence< IMPORT_type > IMPORT_sequence;
  typedef IMPORT_sequence::iterator IMPORT_iterator;
  typedef IMPORT_sequence::const_iterator IMPORT_const_iterator;
  typedef ::xsd::cxx::tree::traits< IMPORT_type, char > IMPORT_traits;

  const IMPORT_sequence&
  IMPORT () const;

  IMPORT_sequence&
  IMPORT ();

  void
  IMPORT (const IMPORT_sequence& s);

  // EXPORT
  // 
  typedef ::EXPORT EXPORT_type;
  typedef ::xsd::cxx::tree::sequence< EXPORT_type > EXPORT_sequence;
  typedef EXPORT_sequence::iterator EXPORT_iterator;
  typedef EXPORT_sequence::const_iterator EXPORT_const_iterator;
  typedef ::xsd::cxx::tree::traits< EXPORT_type, char > EXPORT_traits;

  const EXPORT_sequence&
  EXPORT () const;

  EXPORT_sequence&
  EXPORT ();

  void
  EXPORT (const EXPORT_sequence& s);

  // bboxCenter
  // 
  typedef ::SFVec3f bboxCenter_type;
  typedef ::xsd::cxx::tree::traits< bboxCenter_type, char > bboxCenter_traits;

  const bboxCenter_type&
  bboxCenter () const;

  bboxCenter_type&
  bboxCenter ();

  void
  bboxCenter (const bboxCenter_type& x);

  void
  bboxCenter (::std::auto_ptr< bboxCenter_type > p);

  static const bboxCenter_type&
  bboxCenter_default_value ();

  // bboxSize
  // 
  typedef ::BoundingBoxSize bboxSize_type;
  typedef ::xsd::cxx::tree::traits< bboxSize_type, char > bboxSize_traits;

  const bboxSize_type&
  bboxSize () const;

  bboxSize_type&
  bboxSize ();

  void
  bboxSize (const bboxSize_type& x);

  void
  bboxSize (::std::auto_ptr< bboxSize_type > p);

  static const bboxSize_type&
  bboxSize_default_value ();

  // Constructors.
  //
  X3DGroupingNode ();

  X3DGroupingNode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  X3DGroupingNode (const X3DGroupingNode& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual X3DGroupingNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DGroupingNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Appearance_sequence Appearance_;
  Background_sequence Background_;
  ColorInterpolator_sequence ColorInterpolator_;
  CoordinateInterpolator_sequence CoordinateInterpolator_;
  DirectionalLight_sequence DirectionalLight_;
  Group_sequence Group_;
  NavigationInfo_sequence NavigationInfo_;
  NormalInterpolator_sequence NormalInterpolator_;
  OrientationInterpolator_sequence OrientationInterpolator_;
  PositionInterpolator_sequence PositionInterpolator_;
  ScalarInterpolator_sequence ScalarInterpolator_;
  Shape_sequence Shape_;
  TimeSensor_sequence TimeSensor_;
  Transform_sequence Transform_;
  Viewpoint_sequence Viewpoint_;
  WorldInfo_sequence WorldInfo_;
  Anchor_sequence Anchor_;
  BooleanFilter_sequence BooleanFilter_;
  BooleanSequencer_sequence BooleanSequencer_;
  BooleanToggle_sequence BooleanToggle_;
  BooleanTrigger_sequence BooleanTrigger_;
  CylinderSensor_sequence CylinderSensor_;
  Inline_sequence Inline_;
  IntegerSequencer_sequence IntegerSequencer_;
  IntegerTrigger_sequence IntegerTrigger_;
  KeySensor_sequence KeySensor_;
  PlaneSensor_sequence PlaneSensor_;
  PointLight_sequence PointLight_;
  ProximitySensor_sequence ProximitySensor_;
  SphereSensor_sequence SphereSensor_;
  SpotLight_sequence SpotLight_;
  StringSensor_sequence StringSensor_;
  Switch_sequence Switch_;
  TimeTrigger_sequence TimeTrigger_;
  TouchSensor_sequence TouchSensor_;
  AudioClip_sequence AudioClip_;
  Billboard_sequence Billboard_;
  Collision_sequence Collision_;
  Fog_sequence Fog_;
  LoadSensor_sequence LoadSensor_;
  LocalFog_sequence LocalFog_;
  LOD_sequence LOD_;
  Script_sequence Script_;
  Sound_sequence Sound_;
  VisibilitySensor_sequence VisibilitySensor_;
  CoordinateInterpolator2D_sequence CoordinateInterpolator2D_;
  PositionInterpolator2D_sequence PositionInterpolator2D_;
  StaticGroup_sequence StaticGroup_;
  CADAssembly_sequence CADAssembly_;
  CADLayer_sequence CADLayer_;
  EspduTransform_sequence EspduTransform_;
  ReceiverPdu_sequence ReceiverPdu_;
  SignalPdu_sequence SignalPdu_;
  TransmitterPdu_sequence TransmitterPdu_;
  GeoLocation_sequence GeoLocation_;
  GeoLOD_sequence GeoLOD_;
  GeoMetadata_sequence GeoMetadata_;
  GeoOrigin_sequence GeoOrigin_;
  GeoPositionInterpolator_sequence GeoPositionInterpolator_;
  GeoTouchSensor_sequence GeoTouchSensor_;
  GeoViewpoint_sequence GeoViewpoint_;
  HAnimHumanoid_sequence HAnimHumanoid_;
  HAnimJoint_sequence HAnimJoint_;
  HAnimSegment_sequence HAnimSegment_;
  HAnimSite_sequence HAnimSite_;
  NurbsOrientationInterpolator_sequence NurbsOrientationInterpolator_;
  NurbsPositionInterpolator_sequence NurbsPositionInterpolator_;
  NurbsSurfaceInterpolator_sequence NurbsSurfaceInterpolator_;
  NurbsSet_sequence NurbsSet_;
  ProtoInstance_sequence ProtoInstance_;
  ROUTE_sequence ROUTE_;
  ExternProtoDeclare_sequence ExternProtoDeclare_;
  ProtoDeclare_sequence ProtoDeclare_;
  IMPORT_sequence IMPORT_;
  EXPORT_sequence EXPORT_;
  ::xsd::cxx::tree::one< bboxCenter_type > bboxCenter_;
  static const bboxCenter_type bboxCenter_default_value_;
  ::xsd::cxx::tree::one< bboxSize_type > bboxSize_;
  static const bboxSize_type bboxSize_default_value_;
};

class X3DHumanoidNode: public ::X3DChildNode
{
  public:
  // Constructors.
  //
  X3DHumanoidNode ();

  X3DHumanoidNode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  X3DHumanoidNode (const X3DHumanoidNode& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual X3DHumanoidNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DHumanoidNode ();
};

class X3DInfoNode: public ::X3DChildNode
{
  public:
  // Constructors.
  //
  X3DInfoNode ();

  X3DInfoNode (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  X3DInfoNode (const X3DInfoNode& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual X3DInfoNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DInfoNode ();
};

class X3DInterpolatorNode: public ::X3DChildNode
{
  public:
  // key
  // 
  typedef ::MFFloat key_type;
  typedef ::xsd::cxx::tree::optional< key_type > key_optional;
  typedef ::xsd::cxx::tree::traits< key_type, char > key_traits;

  const key_optional&
  key () const;

  key_optional&
  key ();

  void
  key (const key_type& x);

  void
  key (const key_optional& x);

  void
  key (::std::auto_ptr< key_type > p);

  // Constructors.
  //
  X3DInterpolatorNode ();

  X3DInterpolatorNode (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  X3DInterpolatorNode (const X3DInterpolatorNode& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual X3DInterpolatorNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DInterpolatorNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  key_optional key_;
};

class X3DKeyDeviceSensorNode: public ::X3DSensorNode
{
  public:
  // Constructors.
  //
  X3DKeyDeviceSensorNode ();

  X3DKeyDeviceSensorNode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  X3DKeyDeviceSensorNode (const X3DKeyDeviceSensorNode& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual X3DKeyDeviceSensorNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DKeyDeviceSensorNode ();
};

class X3DLightNode: public ::X3DChildNode
{
  public:
  // ambientIntensity
  // 
  typedef ::ambientIntensity ambientIntensity_type;
  typedef ::xsd::cxx::tree::traits< ambientIntensity_type, char > ambientIntensity_traits;

  const ambientIntensity_type&
  ambientIntensity () const;

  ambientIntensity_type&
  ambientIntensity ();

  void
  ambientIntensity (const ambientIntensity_type& x);

  void
  ambientIntensity (::std::auto_ptr< ambientIntensity_type > p);

  static const ambientIntensity_type&
  ambientIntensity_default_value ();

  // color
  // 
  typedef ::SFColor color_type;
  typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

  const color_type&
  color () const;

  color_type&
  color ();

  void
  color (const color_type& x);

  void
  color (::std::auto_ptr< color_type > p);

  static const color_type&
  color_default_value ();

  // intensity
  // 
  typedef ::intensity intensity_type;
  typedef ::xsd::cxx::tree::traits< intensity_type, char > intensity_traits;

  const intensity_type&
  intensity () const;

  intensity_type&
  intensity ();

  void
  intensity (const intensity_type& x);

  void
  intensity (::std::auto_ptr< intensity_type > p);

  static const intensity_type&
  intensity_default_value ();

  // on
  // 
  typedef ::SFBool on_type;
  typedef ::xsd::cxx::tree::traits< on_type, char > on_traits;

  const on_type&
  on () const;

  on_type&
  on ();

  void
  on (const on_type& x);

  void
  on (::std::auto_ptr< on_type > p);

  static const on_type&
  on_default_value ();

  // Constructors.
  //
  X3DLightNode ();

  X3DLightNode (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  X3DLightNode (const X3DLightNode& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual X3DLightNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DLightNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ambientIntensity_type > ambientIntensity_;
  static const ambientIntensity_type ambientIntensity_default_value_;
  ::xsd::cxx::tree::one< color_type > color_;
  static const color_type color_default_value_;
  ::xsd::cxx::tree::one< intensity_type > intensity_;
  static const intensity_type intensity_default_value_;
  ::xsd::cxx::tree::one< on_type > on_;
  static const on_type on_default_value_;
};

class X3DMaterialNode: public ::X3DAppearanceChildNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DMaterialNode ();

  X3DMaterialNode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  X3DMaterialNode (const X3DMaterialNode& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual X3DMaterialNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DMaterialNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DMetadataObject: public ::X3DNode
{
  public:
  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // reference
  // 
  typedef ::SFString reference_type;
  typedef ::xsd::cxx::tree::optional< reference_type > reference_optional;
  typedef ::xsd::cxx::tree::traits< reference_type, char > reference_traits;

  const reference_optional&
  reference () const;

  reference_optional&
  reference ();

  void
  reference (const reference_type& x);

  void
  reference (const reference_optional& x);

  void
  reference (::std::auto_ptr< reference_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DMetadataObject ();

  X3DMetadataObject (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  X3DMetadataObject (const X3DMetadataObject& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual X3DMetadataObject*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DMetadataObject ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  name_optional name_;
  reference_optional reference_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DNetworkSensorNode: public ::X3DSensorNode
{
  public:
  // Anchor
  // 
  typedef ::Anchor Anchor_type;
  typedef ::xsd::cxx::tree::sequence< Anchor_type > Anchor_sequence;
  typedef Anchor_sequence::iterator Anchor_iterator;
  typedef Anchor_sequence::const_iterator Anchor_const_iterator;
  typedef ::xsd::cxx::tree::traits< Anchor_type, char > Anchor_traits;

  const Anchor_sequence&
  Anchor () const;

  Anchor_sequence&
  Anchor ();

  void
  Anchor (const Anchor_sequence& s);

  // AudioClip
  // 
  typedef ::AudioClip AudioClip_type;
  typedef ::xsd::cxx::tree::sequence< AudioClip_type > AudioClip_sequence;
  typedef AudioClip_sequence::iterator AudioClip_iterator;
  typedef AudioClip_sequence::const_iterator AudioClip_const_iterator;
  typedef ::xsd::cxx::tree::traits< AudioClip_type, char > AudioClip_traits;

  const AudioClip_sequence&
  AudioClip () const;

  AudioClip_sequence&
  AudioClip ();

  void
  AudioClip (const AudioClip_sequence& s);

  // GeoMetadata
  // 
  typedef ::GeoMetadata GeoMetadata_type;
  typedef ::xsd::cxx::tree::sequence< GeoMetadata_type > GeoMetadata_sequence;
  typedef GeoMetadata_sequence::iterator GeoMetadata_iterator;
  typedef GeoMetadata_sequence::const_iterator GeoMetadata_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoMetadata_type, char > GeoMetadata_traits;

  const GeoMetadata_sequence&
  GeoMetadata () const;

  GeoMetadata_sequence&
  GeoMetadata ();

  void
  GeoMetadata (const GeoMetadata_sequence& s);

  // ImageCubeMapTexture
  // 
  typedef ::ImageCubeMapTexture ImageCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageCubeMapTexture_type > ImageCubeMapTexture_sequence;
  typedef ImageCubeMapTexture_sequence::iterator ImageCubeMapTexture_iterator;
  typedef ImageCubeMapTexture_sequence::const_iterator ImageCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageCubeMapTexture_type, char > ImageCubeMapTexture_traits;

  const ImageCubeMapTexture_sequence&
  ImageCubeMapTexture () const;

  ImageCubeMapTexture_sequence&
  ImageCubeMapTexture ();

  void
  ImageCubeMapTexture (const ImageCubeMapTexture_sequence& s);

  // ImageTexture
  // 
  typedef ::ImageTexture ImageTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageTexture_type > ImageTexture_sequence;
  typedef ImageTexture_sequence::iterator ImageTexture_iterator;
  typedef ImageTexture_sequence::const_iterator ImageTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageTexture_type, char > ImageTexture_traits;

  const ImageTexture_sequence&
  ImageTexture () const;

  ImageTexture_sequence&
  ImageTexture ();

  void
  ImageTexture (const ImageTexture_sequence& s);

  // ImageTexture3D
  // 
  typedef ::ImageTexture3D ImageTexture3D_type;
  typedef ::xsd::cxx::tree::sequence< ImageTexture3D_type > ImageTexture3D_sequence;
  typedef ImageTexture3D_sequence::iterator ImageTexture3D_iterator;
  typedef ImageTexture3D_sequence::const_iterator ImageTexture3D_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageTexture3D_type, char > ImageTexture3D_traits;

  const ImageTexture3D_sequence&
  ImageTexture3D () const;

  ImageTexture3D_sequence&
  ImageTexture3D ();

  void
  ImageTexture3D (const ImageTexture3D_sequence& s);

  // Inline
  // 
  typedef ::Inline Inline_type;
  typedef ::xsd::cxx::tree::sequence< Inline_type > Inline_sequence;
  typedef Inline_sequence::iterator Inline_iterator;
  typedef Inline_sequence::const_iterator Inline_const_iterator;
  typedef ::xsd::cxx::tree::traits< Inline_type, char > Inline_traits;

  const Inline_sequence&
  Inline () const;

  Inline_sequence&
  Inline ();

  void
  Inline (const Inline_sequence& s);

  // MovieTexture
  // 
  typedef ::MovieTexture MovieTexture_type;
  typedef ::xsd::cxx::tree::sequence< MovieTexture_type > MovieTexture_sequence;
  typedef MovieTexture_sequence::iterator MovieTexture_iterator;
  typedef MovieTexture_sequence::const_iterator MovieTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MovieTexture_type, char > MovieTexture_traits;

  const MovieTexture_sequence&
  MovieTexture () const;

  MovieTexture_sequence&
  MovieTexture ();

  void
  MovieTexture (const MovieTexture_sequence& s);

  // PackagedShader
  // 
  typedef ::PackagedShader PackagedShader_type;
  typedef ::xsd::cxx::tree::sequence< PackagedShader_type > PackagedShader_sequence;
  typedef PackagedShader_sequence::iterator PackagedShader_iterator;
  typedef PackagedShader_sequence::const_iterator PackagedShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< PackagedShader_type, char > PackagedShader_traits;

  const PackagedShader_sequence&
  PackagedShader () const;

  PackagedShader_sequence&
  PackagedShader ();

  void
  PackagedShader (const PackagedShader_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Script
  // 
  typedef ::Script Script_type;
  typedef ::xsd::cxx::tree::sequence< Script_type > Script_sequence;
  typedef Script_sequence::iterator Script_iterator;
  typedef Script_sequence::const_iterator Script_const_iterator;
  typedef ::xsd::cxx::tree::traits< Script_type, char > Script_traits;

  const Script_sequence&
  Script () const;

  Script_sequence&
  Script ();

  void
  Script (const Script_sequence& s);

  // ShaderPart
  // 
  typedef ::ShaderPart ShaderPart_type;
  typedef ::xsd::cxx::tree::sequence< ShaderPart_type > ShaderPart_sequence;
  typedef ShaderPart_sequence::iterator ShaderPart_iterator;
  typedef ShaderPart_sequence::const_iterator ShaderPart_const_iterator;
  typedef ::xsd::cxx::tree::traits< ShaderPart_type, char > ShaderPart_traits;

  const ShaderPart_sequence&
  ShaderPart () const;

  ShaderPart_sequence&
  ShaderPart ();

  void
  ShaderPart (const ShaderPart_sequence& s);

  // ShaderProgram
  // 
  typedef ::ShaderProgram ShaderProgram_type;
  typedef ::xsd::cxx::tree::sequence< ShaderProgram_type > ShaderProgram_sequence;
  typedef ShaderProgram_sequence::iterator ShaderProgram_iterator;
  typedef ShaderProgram_sequence::const_iterator ShaderProgram_const_iterator;
  typedef ::xsd::cxx::tree::traits< ShaderProgram_type, char > ShaderProgram_traits;

  const ShaderProgram_sequence&
  ShaderProgram () const;

  ShaderProgram_sequence&
  ShaderProgram ();

  void
  ShaderProgram (const ShaderProgram_sequence& s);

  // Constructors.
  //
  X3DNetworkSensorNode ();

  X3DNetworkSensorNode (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  X3DNetworkSensorNode (const X3DNetworkSensorNode& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual X3DNetworkSensorNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DNetworkSensorNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Anchor_sequence Anchor_;
  AudioClip_sequence AudioClip_;
  GeoMetadata_sequence GeoMetadata_;
  ImageCubeMapTexture_sequence ImageCubeMapTexture_;
  ImageTexture_sequence ImageTexture_;
  ImageTexture3D_sequence ImageTexture3D_;
  Inline_sequence Inline_;
  MovieTexture_sequence MovieTexture_;
  PackagedShader_sequence PackagedShader_;
  ProtoInstance_sequence ProtoInstance_;
  Script_sequence Script_;
  ShaderPart_sequence ShaderPart_;
  ShaderProgram_sequence ShaderProgram_;
};

class X3DNormalNode: public ::X3DGeometricPropertyNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DNormalNode ();

  X3DNormalNode (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  X3DNormalNode (const X3DNormalNode& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual X3DNormalNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DNormalNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DNurbsControlCurveNode: public ::X3DGeometryNode
{
  public:
  // controlPoint
  // 
  typedef ::MFVec2d controlPoint_type;
  typedef ::xsd::cxx::tree::optional< controlPoint_type > controlPoint_optional;
  typedef ::xsd::cxx::tree::traits< controlPoint_type, char > controlPoint_traits;

  const controlPoint_optional&
  controlPoint () const;

  controlPoint_optional&
  controlPoint ();

  void
  controlPoint (const controlPoint_type& x);

  void
  controlPoint (const controlPoint_optional& x);

  void
  controlPoint (::std::auto_ptr< controlPoint_type > p);

  // Constructors.
  //
  X3DNurbsControlCurveNode ();

  X3DNurbsControlCurveNode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  X3DNurbsControlCurveNode (const X3DNurbsControlCurveNode& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual X3DNurbsControlCurveNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DNurbsControlCurveNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  controlPoint_optional controlPoint_;
};

class X3DParametricGeometryNode: public ::X3DGeometryNode
{
  public:
  // Constructors.
  //
  X3DParametricGeometryNode ();

  X3DParametricGeometryNode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  X3DParametricGeometryNode (const X3DParametricGeometryNode& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual X3DParametricGeometryNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DParametricGeometryNode ();
};

class X3DNurbsSurfaceGeometryNode: public ::X3DParametricGeometryNode
{
  public:
  // uClosed
  // 
  typedef ::SFBool uClosed_type;
  typedef ::xsd::cxx::tree::traits< uClosed_type, char > uClosed_traits;

  const uClosed_type&
  uClosed () const;

  uClosed_type&
  uClosed ();

  void
  uClosed (const uClosed_type& x);

  void
  uClosed (::std::auto_ptr< uClosed_type > p);

  static const uClosed_type&
  uClosed_default_value ();

  // vClosed
  // 
  typedef ::SFBool vClosed_type;
  typedef ::xsd::cxx::tree::traits< vClosed_type, char > vClosed_traits;

  const vClosed_type&
  vClosed () const;

  vClosed_type&
  vClosed ();

  void
  vClosed (const vClosed_type& x);

  void
  vClosed (::std::auto_ptr< vClosed_type > p);

  static const vClosed_type&
  vClosed_default_value ();

  // uDimension
  // 
  typedef ::SFInt32 uDimension_type;
  typedef ::xsd::cxx::tree::traits< uDimension_type, char > uDimension_traits;

  const uDimension_type&
  uDimension () const;

  uDimension_type&
  uDimension ();

  void
  uDimension (const uDimension_type& x);

  void
  uDimension (::std::auto_ptr< uDimension_type > p);

  static const uDimension_type&
  uDimension_default_value ();

  // vDimension
  // 
  typedef ::SFInt32 vDimension_type;
  typedef ::xsd::cxx::tree::traits< vDimension_type, char > vDimension_traits;

  const vDimension_type&
  vDimension () const;

  vDimension_type&
  vDimension ();

  void
  vDimension (const vDimension_type& x);

  void
  vDimension (::std::auto_ptr< vDimension_type > p);

  static const vDimension_type&
  vDimension_default_value ();

  // uKnot
  // 
  typedef ::MFDouble uKnot_type;
  typedef ::xsd::cxx::tree::optional< uKnot_type > uKnot_optional;
  typedef ::xsd::cxx::tree::traits< uKnot_type, char > uKnot_traits;

  const uKnot_optional&
  uKnot () const;

  uKnot_optional&
  uKnot ();

  void
  uKnot (const uKnot_type& x);

  void
  uKnot (const uKnot_optional& x);

  void
  uKnot (::std::auto_ptr< uKnot_type > p);

  // vKnot
  // 
  typedef ::MFDouble vKnot_type;
  typedef ::xsd::cxx::tree::optional< vKnot_type > vKnot_optional;
  typedef ::xsd::cxx::tree::traits< vKnot_type, char > vKnot_traits;

  const vKnot_optional&
  vKnot () const;

  vKnot_optional&
  vKnot ();

  void
  vKnot (const vKnot_type& x);

  void
  vKnot (const vKnot_optional& x);

  void
  vKnot (::std::auto_ptr< vKnot_type > p);

  // uOrder
  // 
  typedef ::SFInt32 uOrder_type;
  typedef ::xsd::cxx::tree::traits< uOrder_type, char > uOrder_traits;

  const uOrder_type&
  uOrder () const;

  uOrder_type&
  uOrder ();

  void
  uOrder (const uOrder_type& x);

  void
  uOrder (::std::auto_ptr< uOrder_type > p);

  static const uOrder_type&
  uOrder_default_value ();

  // vOrder
  // 
  typedef ::SFInt32 vOrder_type;
  typedef ::xsd::cxx::tree::traits< vOrder_type, char > vOrder_traits;

  const vOrder_type&
  vOrder () const;

  vOrder_type&
  vOrder ();

  void
  vOrder (const vOrder_type& x);

  void
  vOrder (::std::auto_ptr< vOrder_type > p);

  static const vOrder_type&
  vOrder_default_value ();

  // uTessellation
  // 
  typedef ::SFInt32 uTessellation_type;
  typedef ::xsd::cxx::tree::traits< uTessellation_type, char > uTessellation_traits;

  const uTessellation_type&
  uTessellation () const;

  uTessellation_type&
  uTessellation ();

  void
  uTessellation (const uTessellation_type& x);

  void
  uTessellation (::std::auto_ptr< uTessellation_type > p);

  static const uTessellation_type&
  uTessellation_default_value ();

  // vTessellation
  // 
  typedef ::SFInt32 vTessellation_type;
  typedef ::xsd::cxx::tree::traits< vTessellation_type, char > vTessellation_traits;

  const vTessellation_type&
  vTessellation () const;

  vTessellation_type&
  vTessellation ();

  void
  vTessellation (const vTessellation_type& x);

  void
  vTessellation (::std::auto_ptr< vTessellation_type > p);

  static const vTessellation_type&
  vTessellation_default_value ();

  // weight
  // 
  typedef ::MFDouble weight_type;
  typedef ::xsd::cxx::tree::optional< weight_type > weight_optional;
  typedef ::xsd::cxx::tree::traits< weight_type, char > weight_traits;

  const weight_optional&
  weight () const;

  weight_optional&
  weight ();

  void
  weight (const weight_type& x);

  void
  weight (const weight_optional& x);

  void
  weight (::std::auto_ptr< weight_type > p);

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  X3DNurbsSurfaceGeometryNode ();

  X3DNurbsSurfaceGeometryNode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  X3DNurbsSurfaceGeometryNode (const X3DNurbsSurfaceGeometryNode& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  virtual X3DNurbsSurfaceGeometryNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DNurbsSurfaceGeometryNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< uClosed_type > uClosed_;
  static const uClosed_type uClosed_default_value_;
  ::xsd::cxx::tree::one< vClosed_type > vClosed_;
  static const vClosed_type vClosed_default_value_;
  ::xsd::cxx::tree::one< uDimension_type > uDimension_;
  static const uDimension_type uDimension_default_value_;
  ::xsd::cxx::tree::one< vDimension_type > vDimension_;
  static const vDimension_type vDimension_default_value_;
  uKnot_optional uKnot_;
  vKnot_optional vKnot_;
  ::xsd::cxx::tree::one< uOrder_type > uOrder_;
  static const uOrder_type uOrder_default_value_;
  ::xsd::cxx::tree::one< vOrder_type > vOrder_;
  static const vOrder_type vOrder_default_value_;
  ::xsd::cxx::tree::one< uTessellation_type > uTessellation_;
  static const uTessellation_type uTessellation_default_value_;
  ::xsd::cxx::tree::one< vTessellation_type > vTessellation_;
  static const vTessellation_type vTessellation_default_value_;
  weight_optional weight_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class X3DProductStructureChildNode: public ::X3DChildNode
{
  public:
  // Constructors.
  //
  X3DProductStructureChildNode ();

  X3DProductStructureChildNode (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  X3DProductStructureChildNode (const X3DProductStructureChildNode& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual X3DProductStructureChildNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DProductStructureChildNode ();
};

class X3DProgrammableShaderObject: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  X3DProgrammableShaderObject ();

  X3DProgrammableShaderObject (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  X3DProgrammableShaderObject (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  X3DProgrammableShaderObject (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  X3DProgrammableShaderObject (const X3DProgrammableShaderObject& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  virtual X3DProgrammableShaderObject*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DProgrammableShaderObject ();
};

class X3DPrototypeInstanceNode: public ::X3DNode
{
  public:
  // Constructors.
  //
  X3DPrototypeInstanceNode ();

  X3DPrototypeInstanceNode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  X3DPrototypeInstanceNode (const X3DPrototypeInstanceNode& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual X3DPrototypeInstanceNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DPrototypeInstanceNode ();
};

class X3DScriptNode: public ::xml_schema::type
{
  public:
  // MetadataDouble
  // 
  typedef ::MetadataDouble MetadataDouble_type;
  typedef ::xsd::cxx::tree::optional< MetadataDouble_type > MetadataDouble_optional;
  typedef ::xsd::cxx::tree::traits< MetadataDouble_type, char > MetadataDouble_traits;

  const MetadataDouble_optional&
  MetadataDouble () const;

  MetadataDouble_optional&
  MetadataDouble ();

  void
  MetadataDouble (const MetadataDouble_type& x);

  void
  MetadataDouble (const MetadataDouble_optional& x);

  void
  MetadataDouble (::std::auto_ptr< MetadataDouble_type > p);

  // MetadataFloat
  // 
  typedef ::MetadataFloat MetadataFloat_type;
  typedef ::xsd::cxx::tree::optional< MetadataFloat_type > MetadataFloat_optional;
  typedef ::xsd::cxx::tree::traits< MetadataFloat_type, char > MetadataFloat_traits;

  const MetadataFloat_optional&
  MetadataFloat () const;

  MetadataFloat_optional&
  MetadataFloat ();

  void
  MetadataFloat (const MetadataFloat_type& x);

  void
  MetadataFloat (const MetadataFloat_optional& x);

  void
  MetadataFloat (::std::auto_ptr< MetadataFloat_type > p);

  // MetadataInteger
  // 
  typedef ::MetadataInteger MetadataInteger_type;
  typedef ::xsd::cxx::tree::optional< MetadataInteger_type > MetadataInteger_optional;
  typedef ::xsd::cxx::tree::traits< MetadataInteger_type, char > MetadataInteger_traits;

  const MetadataInteger_optional&
  MetadataInteger () const;

  MetadataInteger_optional&
  MetadataInteger ();

  void
  MetadataInteger (const MetadataInteger_type& x);

  void
  MetadataInteger (const MetadataInteger_optional& x);

  void
  MetadataInteger (::std::auto_ptr< MetadataInteger_type > p);

  // MetadataSet
  // 
  typedef ::MetadataSet MetadataSet_type;
  typedef ::xsd::cxx::tree::optional< MetadataSet_type > MetadataSet_optional;
  typedef ::xsd::cxx::tree::traits< MetadataSet_type, char > MetadataSet_traits;

  const MetadataSet_optional&
  MetadataSet () const;

  MetadataSet_optional&
  MetadataSet ();

  void
  MetadataSet (const MetadataSet_type& x);

  void
  MetadataSet (const MetadataSet_optional& x);

  void
  MetadataSet (::std::auto_ptr< MetadataSet_type > p);

  // MetadataString
  // 
  typedef ::MetadataString MetadataString_type;
  typedef ::xsd::cxx::tree::optional< MetadataString_type > MetadataString_optional;
  typedef ::xsd::cxx::tree::traits< MetadataString_type, char > MetadataString_traits;

  const MetadataString_optional&
  MetadataString () const;

  MetadataString_optional&
  MetadataString ();

  void
  MetadataString (const MetadataString_type& x);

  void
  MetadataString (const MetadataString_optional& x);

  void
  MetadataString (::std::auto_ptr< MetadataString_type > p);

  // field
  // 
  typedef ::field field_type;
  typedef ::xsd::cxx::tree::sequence< field_type > field_sequence;
  typedef field_sequence::iterator field_iterator;
  typedef field_sequence::const_iterator field_const_iterator;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_sequence&
  field () const;

  field_sequence&
  field ();

  void
  field (const field_sequence& s);

  // IS
  // 
  typedef ::IS IS_type;
  typedef ::xsd::cxx::tree::optional< IS_type > IS_optional;
  typedef ::xsd::cxx::tree::traits< IS_type, char > IS_traits;

  const IS_optional&
  IS () const;

  IS_optional&
  IS ();

  void
  IS (const IS_type& x);

  void
  IS (const IS_optional& x);

  void
  IS (::std::auto_ptr< IS_type > p);

  // DEF
  // 
  typedef ::xml_schema::id DEF_type;
  typedef ::xsd::cxx::tree::optional< DEF_type > DEF_optional;
  typedef ::xsd::cxx::tree::traits< DEF_type, char > DEF_traits;

  const DEF_optional&
  DEF () const;

  DEF_optional&
  DEF ();

  void
  DEF (const DEF_type& x);

  void
  DEF (const DEF_optional& x);

  void
  DEF (::std::auto_ptr< DEF_type > p);

  // USE
  // 
  typedef ::xml_schema::idref USE_type;
  typedef ::xsd::cxx::tree::optional< USE_type > USE_optional;
  typedef ::xsd::cxx::tree::traits< USE_type, char > USE_traits;

  const USE_optional&
  USE () const;

  USE_optional&
  USE ();

  void
  USE (const USE_type& x);

  void
  USE (const USE_optional& x);

  void
  USE (::std::auto_ptr< USE_type > p);

  // class
  // 
  typedef ::xml_schema::nmtoken class_type;
  typedef ::xsd::cxx::tree::optional< class_type > class_optional;
  typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

  const class_optional&
  class_ () const;

  class_optional&
  class_ ();

  void
  class_ (const class_type& x);

  void
  class_ (const class_optional& x);

  void
  class_ (::std::auto_ptr< class_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DScriptNode ();

  X3DScriptNode (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  X3DScriptNode (const X3DScriptNode& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual X3DScriptNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DScriptNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  MetadataDouble_optional MetadataDouble_;
  MetadataFloat_optional MetadataFloat_;
  MetadataInteger_optional MetadataInteger_;
  MetadataSet_optional MetadataSet_;
  MetadataString_optional MetadataString_;
  field_sequence field_;
  IS_optional IS_;
  DEF_optional DEF_;
  USE_optional USE_;
  class_optional class__;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DSequencerNode: public ::X3DChildNode
{
  public:
  // key
  // 
  typedef ::MFFloat key_type;
  typedef ::xsd::cxx::tree::optional< key_type > key_optional;
  typedef ::xsd::cxx::tree::traits< key_type, char > key_traits;

  const key_optional&
  key () const;

  key_optional&
  key ();

  void
  key (const key_type& x);

  void
  key (const key_optional& x);

  void
  key (::std::auto_ptr< key_type > p);

  // Constructors.
  //
  X3DSequencerNode ();

  X3DSequencerNode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  X3DSequencerNode (const X3DSequencerNode& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual X3DSequencerNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DSequencerNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  key_optional key_;
};

class X3DShaderNode: public ::X3DAppearanceChildNode
{
  public:
  // language
  // 
  typedef ::SFString language_type;
  typedef ::xsd::cxx::tree::optional< language_type > language_optional;
  typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

  const language_optional&
  language () const;

  language_optional&
  language ();

  void
  language (const language_type& x);

  void
  language (const language_optional& x);

  void
  language (::std::auto_ptr< language_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DShaderNode ();

  X3DShaderNode (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  X3DShaderNode (const X3DShaderNode& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual X3DShaderNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DShaderNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  language_optional language_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DShapeNode: public ::X3DChildNode
{
  public:
  // Appearance
  // 
  typedef ::Appearance Appearance_type;
  typedef ::xsd::cxx::tree::optional< Appearance_type > Appearance_optional;
  typedef ::xsd::cxx::tree::traits< Appearance_type, char > Appearance_traits;

  const Appearance_optional&
  Appearance () const;

  Appearance_optional&
  Appearance ();

  void
  Appearance (const Appearance_type& x);

  void
  Appearance (const Appearance_optional& x);

  void
  Appearance (::std::auto_ptr< Appearance_type > p);

  // Box
  // 
  typedef ::Box Box_type;
  typedef ::xsd::cxx::tree::optional< Box_type > Box_optional;
  typedef ::xsd::cxx::tree::traits< Box_type, char > Box_traits;

  const Box_optional&
  Box () const;

  Box_optional&
  Box ();

  void
  Box (const Box_type& x);

  void
  Box (const Box_optional& x);

  void
  Box (::std::auto_ptr< Box_type > p);

  // Cone
  // 
  typedef ::Cone Cone_type;
  typedef ::xsd::cxx::tree::optional< Cone_type > Cone_optional;
  typedef ::xsd::cxx::tree::traits< Cone_type, char > Cone_traits;

  const Cone_optional&
  Cone () const;

  Cone_optional&
  Cone ();

  void
  Cone (const Cone_type& x);

  void
  Cone (const Cone_optional& x);

  void
  Cone (::std::auto_ptr< Cone_type > p);

  // Cylinder
  // 
  typedef ::Cylinder Cylinder_type;
  typedef ::xsd::cxx::tree::optional< Cylinder_type > Cylinder_optional;
  typedef ::xsd::cxx::tree::traits< Cylinder_type, char > Cylinder_traits;

  const Cylinder_optional&
  Cylinder () const;

  Cylinder_optional&
  Cylinder ();

  void
  Cylinder (const Cylinder_type& x);

  void
  Cylinder (const Cylinder_optional& x);

  void
  Cylinder (::std::auto_ptr< Cylinder_type > p);

  // IndexedFaceSet
  // 
  typedef ::IndexedFaceSet IndexedFaceSet_type;
  typedef ::xsd::cxx::tree::optional< IndexedFaceSet_type > IndexedFaceSet_optional;
  typedef ::xsd::cxx::tree::traits< IndexedFaceSet_type, char > IndexedFaceSet_traits;

  const IndexedFaceSet_optional&
  IndexedFaceSet () const;

  IndexedFaceSet_optional&
  IndexedFaceSet ();

  void
  IndexedFaceSet (const IndexedFaceSet_type& x);

  void
  IndexedFaceSet (const IndexedFaceSet_optional& x);

  void
  IndexedFaceSet (::std::auto_ptr< IndexedFaceSet_type > p);

  // IndexedLineSet
  // 
  typedef ::IndexedLineSet IndexedLineSet_type;
  typedef ::xsd::cxx::tree::optional< IndexedLineSet_type > IndexedLineSet_optional;
  typedef ::xsd::cxx::tree::traits< IndexedLineSet_type, char > IndexedLineSet_traits;

  const IndexedLineSet_optional&
  IndexedLineSet () const;

  IndexedLineSet_optional&
  IndexedLineSet ();

  void
  IndexedLineSet (const IndexedLineSet_type& x);

  void
  IndexedLineSet (const IndexedLineSet_optional& x);

  void
  IndexedLineSet (::std::auto_ptr< IndexedLineSet_type > p);

  // IndexedTriangleFanSet
  // 
  typedef ::IndexedTriangleFanSet IndexedTriangleFanSet_type;
  typedef ::xsd::cxx::tree::optional< IndexedTriangleFanSet_type > IndexedTriangleFanSet_optional;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleFanSet_type, char > IndexedTriangleFanSet_traits;

  const IndexedTriangleFanSet_optional&
  IndexedTriangleFanSet () const;

  IndexedTriangleFanSet_optional&
  IndexedTriangleFanSet ();

  void
  IndexedTriangleFanSet (const IndexedTriangleFanSet_type& x);

  void
  IndexedTriangleFanSet (const IndexedTriangleFanSet_optional& x);

  void
  IndexedTriangleFanSet (::std::auto_ptr< IndexedTriangleFanSet_type > p);

  // IndexedTriangleSet
  // 
  typedef ::IndexedTriangleSet IndexedTriangleSet_type;
  typedef ::xsd::cxx::tree::optional< IndexedTriangleSet_type > IndexedTriangleSet_optional;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleSet_type, char > IndexedTriangleSet_traits;

  const IndexedTriangleSet_optional&
  IndexedTriangleSet () const;

  IndexedTriangleSet_optional&
  IndexedTriangleSet ();

  void
  IndexedTriangleSet (const IndexedTriangleSet_type& x);

  void
  IndexedTriangleSet (const IndexedTriangleSet_optional& x);

  void
  IndexedTriangleSet (::std::auto_ptr< IndexedTriangleSet_type > p);

  // IndexedTriangleStripSet
  // 
  typedef ::IndexedTriangleStripSet IndexedTriangleStripSet_type;
  typedef ::xsd::cxx::tree::optional< IndexedTriangleStripSet_type > IndexedTriangleStripSet_optional;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleStripSet_type, char > IndexedTriangleStripSet_traits;

  const IndexedTriangleStripSet_optional&
  IndexedTriangleStripSet () const;

  IndexedTriangleStripSet_optional&
  IndexedTriangleStripSet ();

  void
  IndexedTriangleStripSet (const IndexedTriangleStripSet_type& x);

  void
  IndexedTriangleStripSet (const IndexedTriangleStripSet_optional& x);

  void
  IndexedTriangleStripSet (::std::auto_ptr< IndexedTriangleStripSet_type > p);

  // LineSet
  // 
  typedef ::LineSet LineSet_type;
  typedef ::xsd::cxx::tree::optional< LineSet_type > LineSet_optional;
  typedef ::xsd::cxx::tree::traits< LineSet_type, char > LineSet_traits;

  const LineSet_optional&
  LineSet () const;

  LineSet_optional&
  LineSet ();

  void
  LineSet (const LineSet_type& x);

  void
  LineSet (const LineSet_optional& x);

  void
  LineSet (::std::auto_ptr< LineSet_type > p);

  // PointSet
  // 
  typedef ::PointSet PointSet_type;
  typedef ::xsd::cxx::tree::optional< PointSet_type > PointSet_optional;
  typedef ::xsd::cxx::tree::traits< PointSet_type, char > PointSet_traits;

  const PointSet_optional&
  PointSet () const;

  PointSet_optional&
  PointSet ();

  void
  PointSet (const PointSet_type& x);

  void
  PointSet (const PointSet_optional& x);

  void
  PointSet (::std::auto_ptr< PointSet_type > p);

  // Sphere
  // 
  typedef ::Sphere Sphere_type;
  typedef ::xsd::cxx::tree::optional< Sphere_type > Sphere_optional;
  typedef ::xsd::cxx::tree::traits< Sphere_type, char > Sphere_traits;

  const Sphere_optional&
  Sphere () const;

  Sphere_optional&
  Sphere ();

  void
  Sphere (const Sphere_type& x);

  void
  Sphere (const Sphere_optional& x);

  void
  Sphere (::std::auto_ptr< Sphere_type > p);

  // TriangleFanSet
  // 
  typedef ::TriangleFanSet TriangleFanSet_type;
  typedef ::xsd::cxx::tree::optional< TriangleFanSet_type > TriangleFanSet_optional;
  typedef ::xsd::cxx::tree::traits< TriangleFanSet_type, char > TriangleFanSet_traits;

  const TriangleFanSet_optional&
  TriangleFanSet () const;

  TriangleFanSet_optional&
  TriangleFanSet ();

  void
  TriangleFanSet (const TriangleFanSet_type& x);

  void
  TriangleFanSet (const TriangleFanSet_optional& x);

  void
  TriangleFanSet (::std::auto_ptr< TriangleFanSet_type > p);

  // TriangleSet
  // 
  typedef ::TriangleSet TriangleSet_type;
  typedef ::xsd::cxx::tree::optional< TriangleSet_type > TriangleSet_optional;
  typedef ::xsd::cxx::tree::traits< TriangleSet_type, char > TriangleSet_traits;

  const TriangleSet_optional&
  TriangleSet () const;

  TriangleSet_optional&
  TriangleSet ();

  void
  TriangleSet (const TriangleSet_type& x);

  void
  TriangleSet (const TriangleSet_optional& x);

  void
  TriangleSet (::std::auto_ptr< TriangleSet_type > p);

  // TriangleStripSet
  // 
  typedef ::TriangleStripSet TriangleStripSet_type;
  typedef ::xsd::cxx::tree::optional< TriangleStripSet_type > TriangleStripSet_optional;
  typedef ::xsd::cxx::tree::traits< TriangleStripSet_type, char > TriangleStripSet_traits;

  const TriangleStripSet_optional&
  TriangleStripSet () const;

  TriangleStripSet_optional&
  TriangleStripSet ();

  void
  TriangleStripSet (const TriangleStripSet_type& x);

  void
  TriangleStripSet (const TriangleStripSet_optional& x);

  void
  TriangleStripSet (::std::auto_ptr< TriangleStripSet_type > p);

  // ElevationGrid
  // 
  typedef ::ElevationGrid ElevationGrid_type;
  typedef ::xsd::cxx::tree::optional< ElevationGrid_type > ElevationGrid_optional;
  typedef ::xsd::cxx::tree::traits< ElevationGrid_type, char > ElevationGrid_traits;

  const ElevationGrid_optional&
  ElevationGrid () const;

  ElevationGrid_optional&
  ElevationGrid ();

  void
  ElevationGrid (const ElevationGrid_type& x);

  void
  ElevationGrid (const ElevationGrid_optional& x);

  void
  ElevationGrid (::std::auto_ptr< ElevationGrid_type > p);

  // Polyline2D
  // 
  typedef ::Polyline2D Polyline2D_type;
  typedef ::xsd::cxx::tree::optional< Polyline2D_type > Polyline2D_optional;
  typedef ::xsd::cxx::tree::traits< Polyline2D_type, char > Polyline2D_traits;

  const Polyline2D_optional&
  Polyline2D () const;

  Polyline2D_optional&
  Polyline2D ();

  void
  Polyline2D (const Polyline2D_type& x);

  void
  Polyline2D (const Polyline2D_optional& x);

  void
  Polyline2D (::std::auto_ptr< Polyline2D_type > p);

  // Polypoint2D
  // 
  typedef ::Polypoint2D Polypoint2D_type;
  typedef ::xsd::cxx::tree::optional< Polypoint2D_type > Polypoint2D_optional;
  typedef ::xsd::cxx::tree::traits< Polypoint2D_type, char > Polypoint2D_traits;

  const Polypoint2D_optional&
  Polypoint2D () const;

  Polypoint2D_optional&
  Polypoint2D ();

  void
  Polypoint2D (const Polypoint2D_type& x);

  void
  Polypoint2D (const Polypoint2D_optional& x);

  void
  Polypoint2D (::std::auto_ptr< Polypoint2D_type > p);

  // Rectangle2D
  // 
  typedef ::Rectangle2D Rectangle2D_type;
  typedef ::xsd::cxx::tree::optional< Rectangle2D_type > Rectangle2D_optional;
  typedef ::xsd::cxx::tree::traits< Rectangle2D_type, char > Rectangle2D_traits;

  const Rectangle2D_optional&
  Rectangle2D () const;

  Rectangle2D_optional&
  Rectangle2D ();

  void
  Rectangle2D (const Rectangle2D_type& x);

  void
  Rectangle2D (const Rectangle2D_optional& x);

  void
  Rectangle2D (::std::auto_ptr< Rectangle2D_type > p);

  // TriangleSet2D
  // 
  typedef ::TriangleSet2D TriangleSet2D_type;
  typedef ::xsd::cxx::tree::optional< TriangleSet2D_type > TriangleSet2D_optional;
  typedef ::xsd::cxx::tree::traits< TriangleSet2D_type, char > TriangleSet2D_traits;

  const TriangleSet2D_optional&
  TriangleSet2D () const;

  TriangleSet2D_optional&
  TriangleSet2D ();

  void
  TriangleSet2D (const TriangleSet2D_type& x);

  void
  TriangleSet2D (const TriangleSet2D_optional& x);

  void
  TriangleSet2D (::std::auto_ptr< TriangleSet2D_type > p);

  // Extrusion
  // 
  typedef ::Extrusion Extrusion_type;
  typedef ::xsd::cxx::tree::optional< Extrusion_type > Extrusion_optional;
  typedef ::xsd::cxx::tree::traits< Extrusion_type, char > Extrusion_traits;

  const Extrusion_optional&
  Extrusion () const;

  Extrusion_optional&
  Extrusion ();

  void
  Extrusion (const Extrusion_type& x);

  void
  Extrusion (const Extrusion_optional& x);

  void
  Extrusion (::std::auto_ptr< Extrusion_type > p);

  // Text
  // 
  typedef ::Text Text_type;
  typedef ::xsd::cxx::tree::optional< Text_type > Text_optional;
  typedef ::xsd::cxx::tree::traits< Text_type, char > Text_traits;

  const Text_optional&
  Text () const;

  Text_optional&
  Text ();

  void
  Text (const Text_type& x);

  void
  Text (const Text_optional& x);

  void
  Text (::std::auto_ptr< Text_type > p);

  // Arc2D
  // 
  typedef ::Arc2D Arc2D_type;
  typedef ::xsd::cxx::tree::optional< Arc2D_type > Arc2D_optional;
  typedef ::xsd::cxx::tree::traits< Arc2D_type, char > Arc2D_traits;

  const Arc2D_optional&
  Arc2D () const;

  Arc2D_optional&
  Arc2D ();

  void
  Arc2D (const Arc2D_type& x);

  void
  Arc2D (const Arc2D_optional& x);

  void
  Arc2D (::std::auto_ptr< Arc2D_type > p);

  // ArcClose2D
  // 
  typedef ::ArcClose2D ArcClose2D_type;
  typedef ::xsd::cxx::tree::optional< ArcClose2D_type > ArcClose2D_optional;
  typedef ::xsd::cxx::tree::traits< ArcClose2D_type, char > ArcClose2D_traits;

  const ArcClose2D_optional&
  ArcClose2D () const;

  ArcClose2D_optional&
  ArcClose2D ();

  void
  ArcClose2D (const ArcClose2D_type& x);

  void
  ArcClose2D (const ArcClose2D_optional& x);

  void
  ArcClose2D (::std::auto_ptr< ArcClose2D_type > p);

  // Circle2D
  // 
  typedef ::Circle2D Circle2D_type;
  typedef ::xsd::cxx::tree::optional< Circle2D_type > Circle2D_optional;
  typedef ::xsd::cxx::tree::traits< Circle2D_type, char > Circle2D_traits;

  const Circle2D_optional&
  Circle2D () const;

  Circle2D_optional&
  Circle2D ();

  void
  Circle2D (const Circle2D_type& x);

  void
  Circle2D (const Circle2D_optional& x);

  void
  Circle2D (::std::auto_ptr< Circle2D_type > p);

  // Disk2D
  // 
  typedef ::Disk2D Disk2D_type;
  typedef ::xsd::cxx::tree::optional< Disk2D_type > Disk2D_optional;
  typedef ::xsd::cxx::tree::traits< Disk2D_type, char > Disk2D_traits;

  const Disk2D_optional&
  Disk2D () const;

  Disk2D_optional&
  Disk2D ();

  void
  Disk2D (const Disk2D_type& x);

  void
  Disk2D (const Disk2D_optional& x);

  void
  Disk2D (::std::auto_ptr< Disk2D_type > p);

  // QuadSet
  // 
  typedef ::QuadSet QuadSet_type;
  typedef ::xsd::cxx::tree::optional< QuadSet_type > QuadSet_optional;
  typedef ::xsd::cxx::tree::traits< QuadSet_type, char > QuadSet_traits;

  const QuadSet_optional&
  QuadSet () const;

  QuadSet_optional&
  QuadSet ();

  void
  QuadSet (const QuadSet_type& x);

  void
  QuadSet (const QuadSet_optional& x);

  void
  QuadSet (::std::auto_ptr< QuadSet_type > p);

  // IndexedQuadSet
  // 
  typedef ::IndexedQuadSet IndexedQuadSet_type;
  typedef ::xsd::cxx::tree::optional< IndexedQuadSet_type > IndexedQuadSet_optional;
  typedef ::xsd::cxx::tree::traits< IndexedQuadSet_type, char > IndexedQuadSet_traits;

  const IndexedQuadSet_optional&
  IndexedQuadSet () const;

  IndexedQuadSet_optional&
  IndexedQuadSet ();

  void
  IndexedQuadSet (const IndexedQuadSet_type& x);

  void
  IndexedQuadSet (const IndexedQuadSet_optional& x);

  void
  IndexedQuadSet (::std::auto_ptr< IndexedQuadSet_type > p);

  // GeoElevationGrid
  // 
  typedef ::GeoElevationGrid GeoElevationGrid_type;
  typedef ::xsd::cxx::tree::optional< GeoElevationGrid_type > GeoElevationGrid_optional;
  typedef ::xsd::cxx::tree::traits< GeoElevationGrid_type, char > GeoElevationGrid_traits;

  const GeoElevationGrid_optional&
  GeoElevationGrid () const;

  GeoElevationGrid_optional&
  GeoElevationGrid ();

  void
  GeoElevationGrid (const GeoElevationGrid_type& x);

  void
  GeoElevationGrid (const GeoElevationGrid_optional& x);

  void
  GeoElevationGrid (::std::auto_ptr< GeoElevationGrid_type > p);

  // NurbsCurve
  // 
  typedef ::NurbsCurve NurbsCurve_type;
  typedef ::xsd::cxx::tree::optional< NurbsCurve_type > NurbsCurve_optional;
  typedef ::xsd::cxx::tree::traits< NurbsCurve_type, char > NurbsCurve_traits;

  const NurbsCurve_optional&
  NurbsCurve () const;

  NurbsCurve_optional&
  NurbsCurve ();

  void
  NurbsCurve (const NurbsCurve_type& x);

  void
  NurbsCurve (const NurbsCurve_optional& x);

  void
  NurbsCurve (::std::auto_ptr< NurbsCurve_type > p);

  // NurbsCurve2D
  // 
  typedef ::NurbsCurve2D NurbsCurve2D_type;
  typedef ::xsd::cxx::tree::optional< NurbsCurve2D_type > NurbsCurve2D_optional;
  typedef ::xsd::cxx::tree::traits< NurbsCurve2D_type, char > NurbsCurve2D_traits;

  const NurbsCurve2D_optional&
  NurbsCurve2D () const;

  NurbsCurve2D_optional&
  NurbsCurve2D ();

  void
  NurbsCurve2D (const NurbsCurve2D_type& x);

  void
  NurbsCurve2D (const NurbsCurve2D_optional& x);

  void
  NurbsCurve2D (::std::auto_ptr< NurbsCurve2D_type > p);

  // NurbsPatchSurface
  // 
  typedef ::NurbsPatchSurface NurbsPatchSurface_type;
  typedef ::xsd::cxx::tree::optional< NurbsPatchSurface_type > NurbsPatchSurface_optional;
  typedef ::xsd::cxx::tree::traits< NurbsPatchSurface_type, char > NurbsPatchSurface_traits;

  const NurbsPatchSurface_optional&
  NurbsPatchSurface () const;

  NurbsPatchSurface_optional&
  NurbsPatchSurface ();

  void
  NurbsPatchSurface (const NurbsPatchSurface_type& x);

  void
  NurbsPatchSurface (const NurbsPatchSurface_optional& x);

  void
  NurbsPatchSurface (::std::auto_ptr< NurbsPatchSurface_type > p);

  // NurbsSweptSurface
  // 
  typedef ::NurbsSweptSurface NurbsSweptSurface_type;
  typedef ::xsd::cxx::tree::optional< NurbsSweptSurface_type > NurbsSweptSurface_optional;
  typedef ::xsd::cxx::tree::traits< NurbsSweptSurface_type, char > NurbsSweptSurface_traits;

  const NurbsSweptSurface_optional&
  NurbsSweptSurface () const;

  NurbsSweptSurface_optional&
  NurbsSweptSurface ();

  void
  NurbsSweptSurface (const NurbsSweptSurface_type& x);

  void
  NurbsSweptSurface (const NurbsSweptSurface_optional& x);

  void
  NurbsSweptSurface (::std::auto_ptr< NurbsSweptSurface_type > p);

  // NurbsSwungSurface
  // 
  typedef ::NurbsSwungSurface NurbsSwungSurface_type;
  typedef ::xsd::cxx::tree::optional< NurbsSwungSurface_type > NurbsSwungSurface_optional;
  typedef ::xsd::cxx::tree::traits< NurbsSwungSurface_type, char > NurbsSwungSurface_traits;

  const NurbsSwungSurface_optional&
  NurbsSwungSurface () const;

  NurbsSwungSurface_optional&
  NurbsSwungSurface ();

  void
  NurbsSwungSurface (const NurbsSwungSurface_type& x);

  void
  NurbsSwungSurface (const NurbsSwungSurface_optional& x);

  void
  NurbsSwungSurface (::std::auto_ptr< NurbsSwungSurface_type > p);

  // NurbsTrimmedSurface
  // 
  typedef ::NurbsTrimmedSurface NurbsTrimmedSurface_type;
  typedef ::xsd::cxx::tree::optional< NurbsTrimmedSurface_type > NurbsTrimmedSurface_optional;
  typedef ::xsd::cxx::tree::traits< NurbsTrimmedSurface_type, char > NurbsTrimmedSurface_traits;

  const NurbsTrimmedSurface_optional&
  NurbsTrimmedSurface () const;

  NurbsTrimmedSurface_optional&
  NurbsTrimmedSurface ();

  void
  NurbsTrimmedSurface (const NurbsTrimmedSurface_type& x);

  void
  NurbsTrimmedSurface (const NurbsTrimmedSurface_optional& x);

  void
  NurbsTrimmedSurface (::std::auto_ptr< NurbsTrimmedSurface_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // bboxCenter
  // 
  typedef ::SFVec3f bboxCenter_type;
  typedef ::xsd::cxx::tree::traits< bboxCenter_type, char > bboxCenter_traits;

  const bboxCenter_type&
  bboxCenter () const;

  bboxCenter_type&
  bboxCenter ();

  void
  bboxCenter (const bboxCenter_type& x);

  void
  bboxCenter (::std::auto_ptr< bboxCenter_type > p);

  static const bboxCenter_type&
  bboxCenter_default_value ();

  // bboxSize
  // 
  typedef ::BoundingBoxSize bboxSize_type;
  typedef ::xsd::cxx::tree::traits< bboxSize_type, char > bboxSize_traits;

  const bboxSize_type&
  bboxSize () const;

  bboxSize_type&
  bboxSize ();

  void
  bboxSize (const bboxSize_type& x);

  void
  bboxSize (::std::auto_ptr< bboxSize_type > p);

  static const bboxSize_type&
  bboxSize_default_value ();

  // Constructors.
  //
  X3DShapeNode ();

  X3DShapeNode (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  X3DShapeNode (const X3DShapeNode& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual X3DShapeNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DShapeNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Appearance_optional Appearance_;
  Box_optional Box_;
  Cone_optional Cone_;
  Cylinder_optional Cylinder_;
  IndexedFaceSet_optional IndexedFaceSet_;
  IndexedLineSet_optional IndexedLineSet_;
  IndexedTriangleFanSet_optional IndexedTriangleFanSet_;
  IndexedTriangleSet_optional IndexedTriangleSet_;
  IndexedTriangleStripSet_optional IndexedTriangleStripSet_;
  LineSet_optional LineSet_;
  PointSet_optional PointSet_;
  Sphere_optional Sphere_;
  TriangleFanSet_optional TriangleFanSet_;
  TriangleSet_optional TriangleSet_;
  TriangleStripSet_optional TriangleStripSet_;
  ElevationGrid_optional ElevationGrid_;
  Polyline2D_optional Polyline2D_;
  Polypoint2D_optional Polypoint2D_;
  Rectangle2D_optional Rectangle2D_;
  TriangleSet2D_optional TriangleSet2D_;
  Extrusion_optional Extrusion_;
  Text_optional Text_;
  Arc2D_optional Arc2D_;
  ArcClose2D_optional ArcClose2D_;
  Circle2D_optional Circle2D_;
  Disk2D_optional Disk2D_;
  QuadSet_optional QuadSet_;
  IndexedQuadSet_optional IndexedQuadSet_;
  GeoElevationGrid_optional GeoElevationGrid_;
  NurbsCurve_optional NurbsCurve_;
  NurbsCurve2D_optional NurbsCurve2D_;
  NurbsPatchSurface_optional NurbsPatchSurface_;
  NurbsSweptSurface_optional NurbsSweptSurface_;
  NurbsSwungSurface_optional NurbsSwungSurface_;
  NurbsTrimmedSurface_optional NurbsTrimmedSurface_;
  ProtoInstance_sequence ProtoInstance_;
  ::xsd::cxx::tree::one< bboxCenter_type > bboxCenter_;
  static const bboxCenter_type bboxCenter_default_value_;
  ::xsd::cxx::tree::one< bboxSize_type > bboxSize_;
  static const bboxSize_type bboxSize_default_value_;
};

class X3DSoundNode: public ::X3DChildNode
{
  public:
  // AudioClip
  // 
  typedef ::AudioClip AudioClip_type;
  typedef ::xsd::cxx::tree::optional< AudioClip_type > AudioClip_optional;
  typedef ::xsd::cxx::tree::traits< AudioClip_type, char > AudioClip_traits;

  const AudioClip_optional&
  AudioClip () const;

  AudioClip_optional&
  AudioClip ();

  void
  AudioClip (const AudioClip_type& x);

  void
  AudioClip (const AudioClip_optional& x);

  void
  AudioClip (::std::auto_ptr< AudioClip_type > p);

  // MovieTexture
  // 
  typedef ::MovieTexture MovieTexture_type;
  typedef ::xsd::cxx::tree::optional< MovieTexture_type > MovieTexture_optional;
  typedef ::xsd::cxx::tree::traits< MovieTexture_type, char > MovieTexture_traits;

  const MovieTexture_optional&
  MovieTexture () const;

  MovieTexture_optional&
  MovieTexture ();

  void
  MovieTexture (const MovieTexture_type& x);

  void
  MovieTexture (const MovieTexture_optional& x);

  void
  MovieTexture (::std::auto_ptr< MovieTexture_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::optional< ProtoInstance_type > ProtoInstance_optional;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_optional&
  ProtoInstance () const;

  ProtoInstance_optional&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_type& x);

  void
  ProtoInstance (const ProtoInstance_optional& x);

  void
  ProtoInstance (::std::auto_ptr< ProtoInstance_type > p);

  // Constructors.
  //
  X3DSoundNode ();

  X3DSoundNode (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  X3DSoundNode (const X3DSoundNode& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual X3DSoundNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DSoundNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AudioClip_optional AudioClip_;
  MovieTexture_optional MovieTexture_;
  ProtoInstance_optional ProtoInstance_;
};

class X3DTimeDependentNode: public ::X3DChildNode
{
  public:
  // loop
  // 
  typedef ::SFBool loop_type;
  typedef ::xsd::cxx::tree::traits< loop_type, char > loop_traits;

  const loop_type&
  loop () const;

  loop_type&
  loop ();

  void
  loop (const loop_type& x);

  void
  loop (::std::auto_ptr< loop_type > p);

  static const loop_type&
  loop_default_value ();

  // pauseTime
  // 
  typedef ::SFTime pauseTime_type;
  typedef ::xsd::cxx::tree::traits< pauseTime_type, char > pauseTime_traits;

  const pauseTime_type&
  pauseTime () const;

  pauseTime_type&
  pauseTime ();

  void
  pauseTime (const pauseTime_type& x);

  void
  pauseTime (::std::auto_ptr< pauseTime_type > p);

  static const pauseTime_type&
  pauseTime_default_value ();

  // resumeTime
  // 
  typedef ::SFTime resumeTime_type;
  typedef ::xsd::cxx::tree::traits< resumeTime_type, char > resumeTime_traits;

  const resumeTime_type&
  resumeTime () const;

  resumeTime_type&
  resumeTime ();

  void
  resumeTime (const resumeTime_type& x);

  void
  resumeTime (::std::auto_ptr< resumeTime_type > p);

  static const resumeTime_type&
  resumeTime_default_value ();

  // startTime
  // 
  typedef ::SFTime startTime_type;
  typedef ::xsd::cxx::tree::traits< startTime_type, char > startTime_traits;

  const startTime_type&
  startTime () const;

  startTime_type&
  startTime ();

  void
  startTime (const startTime_type& x);

  void
  startTime (::std::auto_ptr< startTime_type > p);

  static const startTime_type&
  startTime_default_value ();

  // stopTime
  // 
  typedef ::SFTime stopTime_type;
  typedef ::xsd::cxx::tree::traits< stopTime_type, char > stopTime_traits;

  const stopTime_type&
  stopTime () const;

  stopTime_type&
  stopTime ();

  void
  stopTime (const stopTime_type& x);

  void
  stopTime (::std::auto_ptr< stopTime_type > p);

  static const stopTime_type&
  stopTime_default_value ();

  // Constructors.
  //
  X3DTimeDependentNode ();

  X3DTimeDependentNode (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  X3DTimeDependentNode (const X3DTimeDependentNode& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual X3DTimeDependentNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DTimeDependentNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< loop_type > loop_;
  static const loop_type loop_default_value_;
  ::xsd::cxx::tree::one< pauseTime_type > pauseTime_;
  static const pauseTime_type pauseTime_default_value_;
  ::xsd::cxx::tree::one< resumeTime_type > resumeTime_;
  static const resumeTime_type resumeTime_default_value_;
  ::xsd::cxx::tree::one< startTime_type > startTime_;
  static const startTime_type startTime_default_value_;
  ::xsd::cxx::tree::one< stopTime_type > stopTime_;
  static const stopTime_type stopTime_default_value_;
};

class X3DSoundSourceNode: public ::X3DTimeDependentNode
{
  public:
  // pitch
  // 
  typedef ::SFFloat pitch_type;
  typedef ::xsd::cxx::tree::traits< pitch_type, char > pitch_traits;

  const pitch_type&
  pitch () const;

  pitch_type&
  pitch ();

  void
  pitch (const pitch_type& x);

  void
  pitch (::std::auto_ptr< pitch_type > p);

  static const pitch_type&
  pitch_default_value ();

  // Constructors.
  //
  X3DSoundSourceNode ();

  X3DSoundSourceNode (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  X3DSoundSourceNode (const X3DSoundSourceNode& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual X3DSoundSourceNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DSoundSourceNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< pitch_type > pitch_;
  static const pitch_type pitch_default_value_;
};

class X3DTextureNode: public ::X3DAppearanceChildNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DTextureNode ();

  X3DTextureNode (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  X3DTextureNode (const X3DTextureNode& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual X3DTextureNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DTextureNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DTexture2DNode: public ::X3DTextureNode
{
  public:
  // repeatS
  // 
  typedef ::SFBool repeatS_type;
  typedef ::xsd::cxx::tree::traits< repeatS_type, char > repeatS_traits;

  const repeatS_type&
  repeatS () const;

  repeatS_type&
  repeatS ();

  void
  repeatS (const repeatS_type& x);

  void
  repeatS (::std::auto_ptr< repeatS_type > p);

  static const repeatS_type&
  repeatS_default_value ();

  // repeatT
  // 
  typedef ::SFBool repeatT_type;
  typedef ::xsd::cxx::tree::traits< repeatT_type, char > repeatT_traits;

  const repeatT_type&
  repeatT () const;

  repeatT_type&
  repeatT ();

  void
  repeatT (const repeatT_type& x);

  void
  repeatT (::std::auto_ptr< repeatT_type > p);

  static const repeatT_type&
  repeatT_default_value ();

  // Constructors.
  //
  X3DTexture2DNode ();

  X3DTexture2DNode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  X3DTexture2DNode (const X3DTexture2DNode& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual X3DTexture2DNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DTexture2DNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< repeatS_type > repeatS_;
  static const repeatS_type repeatS_default_value_;
  ::xsd::cxx::tree::one< repeatT_type > repeatT_;
  static const repeatT_type repeatT_default_value_;
};

class X3DTexture3DNode: public ::X3DTextureNode
{
  public:
  // repeatS
  // 
  typedef ::SFBool repeatS_type;
  typedef ::xsd::cxx::tree::traits< repeatS_type, char > repeatS_traits;

  const repeatS_type&
  repeatS () const;

  repeatS_type&
  repeatS ();

  void
  repeatS (const repeatS_type& x);

  void
  repeatS (::std::auto_ptr< repeatS_type > p);

  static const repeatS_type&
  repeatS_default_value ();

  // repeatT
  // 
  typedef ::SFBool repeatT_type;
  typedef ::xsd::cxx::tree::traits< repeatT_type, char > repeatT_traits;

  const repeatT_type&
  repeatT () const;

  repeatT_type&
  repeatT ();

  void
  repeatT (const repeatT_type& x);

  void
  repeatT (::std::auto_ptr< repeatT_type > p);

  static const repeatT_type&
  repeatT_default_value ();

  // repeatR
  // 
  typedef ::SFBool repeatR_type;
  typedef ::xsd::cxx::tree::traits< repeatR_type, char > repeatR_traits;

  const repeatR_type&
  repeatR () const;

  repeatR_type&
  repeatR ();

  void
  repeatR (const repeatR_type& x);

  void
  repeatR (::std::auto_ptr< repeatR_type > p);

  static const repeatR_type&
  repeatR_default_value ();

  // Constructors.
  //
  X3DTexture3DNode ();

  X3DTexture3DNode (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  X3DTexture3DNode (const X3DTexture3DNode& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual X3DTexture3DNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DTexture3DNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< repeatS_type > repeatS_;
  static const repeatS_type repeatS_default_value_;
  ::xsd::cxx::tree::one< repeatT_type > repeatT_;
  static const repeatT_type repeatT_default_value_;
  ::xsd::cxx::tree::one< repeatR_type > repeatR_;
  static const repeatR_type repeatR_default_value_;
};

class X3DTextureCoordinateNode: public ::X3DGeometricPropertyNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DTextureCoordinateNode ();

  X3DTextureCoordinateNode (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  X3DTextureCoordinateNode (const X3DTextureCoordinateNode& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual X3DTextureCoordinateNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DTextureCoordinateNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DTextureTransformNode: public ::X3DAppearanceChildNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DTextureTransformNode ();

  X3DTextureTransformNode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  X3DTextureTransformNode (const X3DTextureTransformNode& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual X3DTextureTransformNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DTextureTransformNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class X3DTextureTransform2DNode: public ::X3DTextureTransformNode
{
  public:
  // center
  // 
  typedef ::SFVec2f center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::auto_ptr< center_type > p);

  static const center_type&
  center_default_value ();

  // rotation
  // 
  typedef ::SFFloat rotation_type;
  typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

  const rotation_type&
  rotation () const;

  rotation_type&
  rotation ();

  void
  rotation (const rotation_type& x);

  void
  rotation (::std::auto_ptr< rotation_type > p);

  static const rotation_type&
  rotation_default_value ();

  // scale
  // 
  typedef ::SFVec2f scale_type;
  typedef ::xsd::cxx::tree::traits< scale_type, char > scale_traits;

  const scale_type&
  scale () const;

  scale_type&
  scale ();

  void
  scale (const scale_type& x);

  void
  scale (::std::auto_ptr< scale_type > p);

  static const scale_type&
  scale_default_value ();

  // translation
  // 
  typedef ::SFVec2f translation_type;
  typedef ::xsd::cxx::tree::traits< translation_type, char > translation_traits;

  const translation_type&
  translation () const;

  translation_type&
  translation ();

  void
  translation (const translation_type& x);

  void
  translation (::std::auto_ptr< translation_type > p);

  static const translation_type&
  translation_default_value ();

  // Constructors.
  //
  X3DTextureTransform2DNode ();

  X3DTextureTransform2DNode (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  X3DTextureTransform2DNode (const X3DTextureTransform2DNode& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual X3DTextureTransform2DNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DTextureTransform2DNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< center_type > center_;
  static const center_type center_default_value_;
  ::xsd::cxx::tree::one< rotation_type > rotation_;
  static const rotation_type rotation_default_value_;
  ::xsd::cxx::tree::one< scale_type > scale_;
  static const scale_type scale_default_value_;
  ::xsd::cxx::tree::one< translation_type > translation_;
  static const translation_type translation_default_value_;
};

class X3DTouchSensorNode: public ::X3DPointingDeviceSensorNode
{
  public:
  // Constructors.
  //
  X3DTouchSensorNode ();

  X3DTouchSensorNode (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  X3DTouchSensorNode (const X3DTouchSensorNode& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual X3DTouchSensorNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DTouchSensorNode ();
};

class X3DTriggerNode: public ::X3DChildNode
{
  public:
  // Constructors.
  //
  X3DTriggerNode ();

  X3DTriggerNode (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  X3DTriggerNode (const X3DTriggerNode& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual X3DTriggerNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DTriggerNode ();
};

class X3DUrlObject: public ::xml_schema::type
{
  public:
  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // Constructors.
  //
  X3DUrlObject ();

  X3DUrlObject (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  X3DUrlObject (const X3DUrlObject& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual X3DUrlObject*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DUrlObject ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  url_optional url_;
};

class X3DVertexAttributeNode: public ::X3DGeometricPropertyNode
{
  public:
  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  X3DVertexAttributeNode ();

  X3DVertexAttributeNode (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  X3DVertexAttributeNode (const X3DVertexAttributeNode& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual X3DVertexAttributeNode*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DVertexAttributeNode ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  name_optional name_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class SceneGraphStructureNodeType: public ::xml_schema::type
{
  public:
  // Constructors.
  //
  SceneGraphStructureNodeType ();

  SceneGraphStructureNodeType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  SceneGraphStructureNodeType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  SceneGraphStructureNodeType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  SceneGraphStructureNodeType (const SceneGraphStructureNodeType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  virtual SceneGraphStructureNodeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SceneGraphStructureNodeType ();
};

class X3DPrototype: public ::SceneGraphStructureNodeType
{
  public:
  // name
  // 
  typedef ::xml_schema::nmtoken name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  X3DPrototype (const name_type&);

  X3DPrototype (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  X3DPrototype (const X3DPrototype& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual X3DPrototype*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3DPrototype ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
};

class WildcardNodeType: public ::X3DNode
{
  public:
  // Constructors.
  //
  WildcardNodeType ();

  WildcardNodeType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  WildcardNodeType (const WildcardNodeType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual WildcardNodeType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~WildcardNodeType ();
};

class geoSystemType: public ::SFString
{
  public:
  // Constructors.
  //
  geoSystemType ();

  geoSystemType (const char*);

  geoSystemType (const ::std::string&);

  geoSystemType (const ::xml_schema::string&);

  geoSystemType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  geoSystemType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  geoSystemType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  geoSystemType (const geoSystemType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual geoSystemType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~geoSystemType ();
};

class jointName: public ::xml_schema::string
{
  public:
  enum value
  {
    c1,
    c2,
    c3,
    c4,
    c5,
    c6,
    c7,
    HumanoidRoot,
    jaw,
    l_acromioclavicular,
    l_ankle,
    l_calf,
    l_clavicle,
    l_elbow,
    l_eyeball,
    l_eyeball_joint,
    l_eyebrow,
    l_eyebrow_joint,
    l_eyelid,
    l_eyelid_joint,
    l_forearm,
    l_forefoot,
    l_hand,
    l_hindfoot,
    l_hip,
    l_index_distal,
    l_index_metacarpal,
    l_index_middle,
    l_index_proximal,
    l_index0,
    l_index1,
    l_index2,
    l_index3,
    l_knee,
    l_metatarsal,
    l_middistal,
    l_middle_distal,
    l_middle_metacarpal,
    l_middle_middle,
    l_middle_proximal,
    l_middle0,
    l_middle1,
    l_middle2,
    l_middle3,
    l_midproximal,
    l_midtarsal,
    l_pinky_distal,
    l_pinky_metacarpal,
    l_pinky_middle,
    l_pinky_proximal,
    l_pinky0,
    l_pinky1,
    l_pinky2,
    l_pinky3,
    l_ring_distal,
    l_ring_metacarpal,
    l_ring_middle,
    l_ring_proximal,
    l_ring0,
    l_ring1,
    l_ring2,
    l_ring3,
    l_scapula,
    l_shoulder,
    l_sternoclavicular,
    l_subtalar,
    l_thigh,
    l_thumb_distal,
    l_thumb_metacarpal,
    l_thumb_proximal,
    l_thumb1,
    l_thumb2,
    l_thumb3,
    l_upperarm,
    l_wrist,
    l1,
    l2,
    l3,
    l4,
    l5,
    pelvis,
    r_acromioclavicular,
    r_ankle,
    r_calf,
    r_clavicle,
    r_elbow,
    r_eyeball,
    r_eyeball_joint,
    r_eyebrow,
    r_eyebrow_joint,
    r_eyelid,
    r_eyelid_joint,
    r_forearm,
    r_forefoot,
    r_hand,
    r_hindfoot,
    r_hip,
    r_index_distal,
    r_index_metacarpal,
    r_index_middle,
    r_index_proximal,
    r_index0,
    r_index1,
    r_index2,
    r_index3,
    r_knee,
    r_metatarsal,
    r_middistal,
    r_middle_distal,
    r_middle_metacarpal,
    r_middle_middle,
    r_middle_proximal,
    r_middle0,
    r_middle1,
    r_middle2,
    r_middle3,
    r_midproximal,
    r_midtarsal,
    r_pinky_distal,
    r_pinky_metacarpal,
    r_pinky_middle,
    r_pinky_proximal,
    r_pinky0,
    r_pinky1,
    r_pinky2,
    r_pinky3,
    r_ring_distal,
    r_ring_metacarpal,
    r_ring_middle,
    r_ring_proximal,
    r_ring0,
    r_ring1,
    r_ring2,
    r_ring3,
    r_scapula,
    r_shoulder,
    r_sternoclavicular,
    r_subtalar,
    r_thigh,
    r_thumb_distal,
    r_thumb_metacarpal,
    r_thumb_proximal,
    r_thumb1,
    r_thumb2,
    r_thumb3,
    r_upperarm,
    r_wrist,
    sacroiliac,
    sacrum,
    skull,
    skullbase,
    t1,
    t2,
    t3,
    t4,
    t5,
    t6,
    t7,
    t8,
    t9,
    t10,
    t11,
    t12,
    temporomandibular,
    vc1,
    vc2,
    vc3,
    vc4,
    vc5,
    vc6,
    vc7,
    vl1,
    vl2,
    vl3,
    vl4,
    vl5,
    vt1,
    vt2,
    vt3,
    vt4,
    vt5,
    vt6,
    vt7,
    vt8,
    vt9,
    vt10,
    vt11,
    vt12
  };

  jointName (value v);

  jointName (const char* v);

  jointName (const ::std::string& v);

  jointName (const ::xml_schema::string& v);

  jointName (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  jointName (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  jointName (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  jointName (const jointName& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual jointName*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  jointName&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_jointName_convert ();
  }

  protected:
  value
  _xsd_jointName_convert () const;

  public:
  static const char* const _xsd_jointName_literals_[188];
  static const value _xsd_jointName_indexes_[188];
};

class ambientIntensity: public ::SFFloat
{
  public:
  // Constructors.
  //
  ambientIntensity (const ::xml_schema::float_&);

  ambientIntensity (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  ambientIntensity (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  ambientIntensity (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  ambientIntensity (const ambientIntensity& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual ambientIntensity*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ambientIntensity ();
};

class intensity: public ::SFFloat
{
  public:
  // Constructors.
  //
  intensity (const ::xml_schema::float_&);

  intensity (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  intensity (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  intensity (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  intensity (const intensity& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual intensity*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~intensity ();
};

class Anchor: public ::X3DGroupingNode
{
  public:
  // description
  // 
  typedef ::SFString description_type;
  typedef ::xsd::cxx::tree::optional< description_type > description_optional;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_optional&
  description () const;

  description_optional&
  description ();

  void
  description (const description_type& x);

  void
  description (const description_optional& x);

  void
  description (::std::auto_ptr< description_type > p);

  // parameter
  // 
  typedef ::MFString parameter_type;
  typedef ::xsd::cxx::tree::optional< parameter_type > parameter_optional;
  typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

  const parameter_optional&
  parameter () const;

  parameter_optional&
  parameter ();

  void
  parameter (const parameter_type& x);

  void
  parameter (const parameter_optional& x);

  void
  parameter (::std::auto_ptr< parameter_type > p);

  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // Constructors.
  //
  Anchor ();

  Anchor (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Anchor (const Anchor& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Anchor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Anchor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  description_optional description_;
  parameter_optional parameter_;
  url_optional url_;
};

class Appearance: public ::X3DAppearanceNode
{
  public:
  // Constructors.
  //
  Appearance ();

  Appearance (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  Appearance (const Appearance& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual Appearance*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Appearance ();
};

class Arc2D: public ::X3DGeometryNode
{
  public:
  // radius
  // 
  typedef ::radius radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  void
  radius (::std::auto_ptr< radius_type > p);

  static const radius_type&
  radius_default_value ();

  // startAngle
  // 
  typedef ::SFFloat startAngle_type;
  typedef ::xsd::cxx::tree::traits< startAngle_type, char > startAngle_traits;

  const startAngle_type&
  startAngle () const;

  startAngle_type&
  startAngle ();

  void
  startAngle (const startAngle_type& x);

  void
  startAngle (::std::auto_ptr< startAngle_type > p);

  static const startAngle_type&
  startAngle_default_value ();

  // endAngle
  // 
  typedef ::SFFloat endAngle_type;
  typedef ::xsd::cxx::tree::traits< endAngle_type, char > endAngle_traits;

  const endAngle_type&
  endAngle () const;

  endAngle_type&
  endAngle ();

  void
  endAngle (const endAngle_type& x);

  void
  endAngle (::std::auto_ptr< endAngle_type > p);

  static const endAngle_type&
  endAngle_default_value ();

  // Constructors.
  //
  Arc2D ();

  Arc2D (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Arc2D (const Arc2D& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Arc2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Arc2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< radius_type > radius_;
  static const radius_type radius_default_value_;
  ::xsd::cxx::tree::one< startAngle_type > startAngle_;
  static const startAngle_type startAngle_default_value_;
  ::xsd::cxx::tree::one< endAngle_type > endAngle_;
  static const endAngle_type endAngle_default_value_;
};

class ArcClose2D: public ::X3DGeometryNode
{
  public:
  // radius
  // 
  typedef ::radius1 radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  void
  radius (::std::auto_ptr< radius_type > p);

  static const radius_type&
  radius_default_value ();

  // startAngle
  // 
  typedef ::SFFloat startAngle_type;
  typedef ::xsd::cxx::tree::traits< startAngle_type, char > startAngle_traits;

  const startAngle_type&
  startAngle () const;

  startAngle_type&
  startAngle ();

  void
  startAngle (const startAngle_type& x);

  void
  startAngle (::std::auto_ptr< startAngle_type > p);

  static const startAngle_type&
  startAngle_default_value ();

  // endAngle
  // 
  typedef ::SFFloat endAngle_type;
  typedef ::xsd::cxx::tree::traits< endAngle_type, char > endAngle_traits;

  const endAngle_type&
  endAngle () const;

  endAngle_type&
  endAngle ();

  void
  endAngle (const endAngle_type& x);

  void
  endAngle (::std::auto_ptr< endAngle_type > p);

  static const endAngle_type&
  endAngle_default_value ();

  // closureType
  // 
  typedef ::ArcClose2dTypeValues closureType_type;
  typedef ::xsd::cxx::tree::traits< closureType_type, char > closureType_traits;

  const closureType_type&
  closureType () const;

  closureType_type&
  closureType ();

  void
  closureType (const closureType_type& x);

  void
  closureType (::std::auto_ptr< closureType_type > p);

  static const closureType_type&
  closureType_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  ArcClose2D ();

  ArcClose2D (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  ArcClose2D (const ArcClose2D& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual ArcClose2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ArcClose2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< radius_type > radius_;
  static const radius_type radius_default_value_;
  ::xsd::cxx::tree::one< startAngle_type > startAngle_;
  static const startAngle_type startAngle_default_value_;
  ::xsd::cxx::tree::one< endAngle_type > endAngle_;
  static const endAngle_type endAngle_default_value_;
  ::xsd::cxx::tree::one< closureType_type > closureType_;
  static const closureType_type closureType_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class AudioClip: public ::X3DSoundSourceNode
{
  public:
  // description
  // 
  typedef ::SFString description_type;
  typedef ::xsd::cxx::tree::optional< description_type > description_optional;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_optional&
  description () const;

  description_optional&
  description ();

  void
  description (const description_type& x);

  void
  description (const description_optional& x);

  void
  description (::std::auto_ptr< description_type > p);

  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // Constructors.
  //
  AudioClip ();

  AudioClip (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  AudioClip (const AudioClip& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual AudioClip*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~AudioClip ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  description_optional description_;
  url_optional url_;
};

class Background: public ::X3DBackgroundNode
{
  public:
  // backUrl
  // 
  typedef ::MFString backUrl_type;
  typedef ::xsd::cxx::tree::optional< backUrl_type > backUrl_optional;
  typedef ::xsd::cxx::tree::traits< backUrl_type, char > backUrl_traits;

  const backUrl_optional&
  backUrl () const;

  backUrl_optional&
  backUrl ();

  void
  backUrl (const backUrl_type& x);

  void
  backUrl (const backUrl_optional& x);

  void
  backUrl (::std::auto_ptr< backUrl_type > p);

  // bottomUrl
  // 
  typedef ::MFString bottomUrl_type;
  typedef ::xsd::cxx::tree::optional< bottomUrl_type > bottomUrl_optional;
  typedef ::xsd::cxx::tree::traits< bottomUrl_type, char > bottomUrl_traits;

  const bottomUrl_optional&
  bottomUrl () const;

  bottomUrl_optional&
  bottomUrl ();

  void
  bottomUrl (const bottomUrl_type& x);

  void
  bottomUrl (const bottomUrl_optional& x);

  void
  bottomUrl (::std::auto_ptr< bottomUrl_type > p);

  // frontUrl
  // 
  typedef ::MFString frontUrl_type;
  typedef ::xsd::cxx::tree::optional< frontUrl_type > frontUrl_optional;
  typedef ::xsd::cxx::tree::traits< frontUrl_type, char > frontUrl_traits;

  const frontUrl_optional&
  frontUrl () const;

  frontUrl_optional&
  frontUrl ();

  void
  frontUrl (const frontUrl_type& x);

  void
  frontUrl (const frontUrl_optional& x);

  void
  frontUrl (::std::auto_ptr< frontUrl_type > p);

  // leftUrl
  // 
  typedef ::MFString leftUrl_type;
  typedef ::xsd::cxx::tree::optional< leftUrl_type > leftUrl_optional;
  typedef ::xsd::cxx::tree::traits< leftUrl_type, char > leftUrl_traits;

  const leftUrl_optional&
  leftUrl () const;

  leftUrl_optional&
  leftUrl ();

  void
  leftUrl (const leftUrl_type& x);

  void
  leftUrl (const leftUrl_optional& x);

  void
  leftUrl (::std::auto_ptr< leftUrl_type > p);

  // rightUrl
  // 
  typedef ::MFString rightUrl_type;
  typedef ::xsd::cxx::tree::optional< rightUrl_type > rightUrl_optional;
  typedef ::xsd::cxx::tree::traits< rightUrl_type, char > rightUrl_traits;

  const rightUrl_optional&
  rightUrl () const;

  rightUrl_optional&
  rightUrl ();

  void
  rightUrl (const rightUrl_type& x);

  void
  rightUrl (const rightUrl_optional& x);

  void
  rightUrl (::std::auto_ptr< rightUrl_type > p);

  // topUrl
  // 
  typedef ::MFString topUrl_type;
  typedef ::xsd::cxx::tree::optional< topUrl_type > topUrl_optional;
  typedef ::xsd::cxx::tree::traits< topUrl_type, char > topUrl_traits;

  const topUrl_optional&
  topUrl () const;

  topUrl_optional&
  topUrl ();

  void
  topUrl (const topUrl_type& x);

  void
  topUrl (const topUrl_optional& x);

  void
  topUrl (::std::auto_ptr< topUrl_type > p);

  // Constructors.
  //
  Background ();

  Background (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  Background (const Background& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual Background*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Background ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  backUrl_optional backUrl_;
  bottomUrl_optional bottomUrl_;
  frontUrl_optional frontUrl_;
  leftUrl_optional leftUrl_;
  rightUrl_optional rightUrl_;
  topUrl_optional topUrl_;
};

class Billboard: public ::X3DGroupingNode
{
  public:
  // axisOfRotation
  // 
  typedef ::SFVec3f axisOfRotation_type;
  typedef ::xsd::cxx::tree::traits< axisOfRotation_type, char > axisOfRotation_traits;

  const axisOfRotation_type&
  axisOfRotation () const;

  axisOfRotation_type&
  axisOfRotation ();

  void
  axisOfRotation (const axisOfRotation_type& x);

  void
  axisOfRotation (::std::auto_ptr< axisOfRotation_type > p);

  static const axisOfRotation_type&
  axisOfRotation_default_value ();

  // Constructors.
  //
  Billboard ();

  Billboard (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  Billboard (const Billboard& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual Billboard*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Billboard ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< axisOfRotation_type > axisOfRotation_;
  static const axisOfRotation_type axisOfRotation_default_value_;
};

class BooleanFilter: public ::X3DChildNode
{
  public:
  // Constructors.
  //
  BooleanFilter ();

  BooleanFilter (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  BooleanFilter (const BooleanFilter& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual BooleanFilter*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~BooleanFilter ();
};

class BooleanSequencer: public ::X3DSequencerNode
{
  public:
  // keyValue
  // 
  typedef ::MFBool keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  BooleanSequencer ();

  BooleanSequencer (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  BooleanSequencer (const BooleanSequencer& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual BooleanSequencer*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~BooleanSequencer ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  keyValue_optional keyValue_;
};

class BooleanToggle: public ::X3DChildNode
{
  public:
  // toggle
  // 
  typedef ::SFBool toggle_type;
  typedef ::xsd::cxx::tree::traits< toggle_type, char > toggle_traits;

  const toggle_type&
  toggle () const;

  toggle_type&
  toggle ();

  void
  toggle (const toggle_type& x);

  void
  toggle (::std::auto_ptr< toggle_type > p);

  static const toggle_type&
  toggle_default_value ();

  // Constructors.
  //
  BooleanToggle ();

  BooleanToggle (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  BooleanToggle (const BooleanToggle& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual BooleanToggle*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~BooleanToggle ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< toggle_type > toggle_;
  static const toggle_type toggle_default_value_;
};

class BooleanTrigger: public ::X3DChildNode
{
  public:
  // Constructors.
  //
  BooleanTrigger ();

  BooleanTrigger (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  BooleanTrigger (const BooleanTrigger& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual BooleanTrigger*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~BooleanTrigger ();
};

class Box: public ::X3DGeometryNode
{
  public:
  // size
  // 
  typedef ::SFVec3f size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  static const size_type&
  size_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  Box ();

  Box (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  Box (const Box& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual Box*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Box ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< size_type > size_;
  static const size_type size_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class Circle2D: public ::X3DGeometryNode
{
  public:
  // radius
  // 
  typedef ::radius2 radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  void
  radius (::std::auto_ptr< radius_type > p);

  static const radius_type&
  radius_default_value ();

  // Constructors.
  //
  Circle2D ();

  Circle2D (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  Circle2D (const Circle2D& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual Circle2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Circle2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< radius_type > radius_;
  static const radius_type radius_default_value_;
};

class Collision: public ::X3DGroupingNode
{
  public:
  // enabled
  // 
  typedef ::SFBool enabled_type;
  typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

  const enabled_type&
  enabled () const;

  enabled_type&
  enabled ();

  void
  enabled (const enabled_type& x);

  void
  enabled (::std::auto_ptr< enabled_type > p);

  static const enabled_type&
  enabled_default_value ();

  // Constructors.
  //
  Collision ();

  Collision (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  Collision (const Collision& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual Collision*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Collision ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< enabled_type > enabled_;
  static const enabled_type enabled_default_value_;
};

class Color: public ::X3DColorNode
{
  public:
  // color
  // 
  typedef ::MFColor color_type;
  typedef ::xsd::cxx::tree::optional< color_type > color_optional;
  typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

  const color_optional&
  color () const;

  color_optional&
  color ();

  void
  color (const color_type& x);

  void
  color (const color_optional& x);

  void
  color (::std::auto_ptr< color_type > p);

  // Constructors.
  //
  Color ();

  Color (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Color (const Color& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Color*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Color ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  color_optional color_;
};

class ColorRGBA: public ::X3DColorNode
{
  public:
  // color
  // 
  typedef ::MFColorRGBA color_type;
  typedef ::xsd::cxx::tree::optional< color_type > color_optional;
  typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

  const color_optional&
  color () const;

  color_optional&
  color ();

  void
  color (const color_type& x);

  void
  color (const color_optional& x);

  void
  color (::std::auto_ptr< color_type > p);

  // Constructors.
  //
  ColorRGBA ();

  ColorRGBA (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  ColorRGBA (const ColorRGBA& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual ColorRGBA*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ColorRGBA ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  color_optional color_;
};

class ColorInterpolator: public ::X3DInterpolatorNode
{
  public:
  // keyValue
  // 
  typedef ::MFColor keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  ColorInterpolator ();

  ColorInterpolator (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  ColorInterpolator (const ColorInterpolator& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual ColorInterpolator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ColorInterpolator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  keyValue_optional keyValue_;
};

class Cone: public ::X3DGeometryNode
{
  public:
  // bottomRadius
  // 
  typedef ::bottomRadius bottomRadius_type;
  typedef ::xsd::cxx::tree::traits< bottomRadius_type, char > bottomRadius_traits;

  const bottomRadius_type&
  bottomRadius () const;

  bottomRadius_type&
  bottomRadius ();

  void
  bottomRadius (const bottomRadius_type& x);

  void
  bottomRadius (::std::auto_ptr< bottomRadius_type > p);

  static const bottomRadius_type&
  bottomRadius_default_value ();

  // height
  // 
  typedef ::height height_type;
  typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

  const height_type&
  height () const;

  height_type&
  height ();

  void
  height (const height_type& x);

  void
  height (::std::auto_ptr< height_type > p);

  static const height_type&
  height_default_value ();

  // side
  // 
  typedef ::SFBool side_type;
  typedef ::xsd::cxx::tree::traits< side_type, char > side_traits;

  const side_type&
  side () const;

  side_type&
  side ();

  void
  side (const side_type& x);

  void
  side (::std::auto_ptr< side_type > p);

  static const side_type&
  side_default_value ();

  // bottom
  // 
  typedef ::SFBool bottom_type;
  typedef ::xsd::cxx::tree::traits< bottom_type, char > bottom_traits;

  const bottom_type&
  bottom () const;

  bottom_type&
  bottom ();

  void
  bottom (const bottom_type& x);

  void
  bottom (::std::auto_ptr< bottom_type > p);

  static const bottom_type&
  bottom_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  Cone ();

  Cone (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  Cone (const Cone& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual Cone*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Cone ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< bottomRadius_type > bottomRadius_;
  static const bottomRadius_type bottomRadius_default_value_;
  ::xsd::cxx::tree::one< height_type > height_;
  static const height_type height_default_value_;
  ::xsd::cxx::tree::one< side_type > side_;
  static const side_type side_default_value_;
  ::xsd::cxx::tree::one< bottom_type > bottom_;
  static const bottom_type bottom_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class Coordinate: public ::X3DCoordinateNode
{
  public:
  // point
  // 
  typedef ::MFVec3f point_type;
  typedef ::xsd::cxx::tree::optional< point_type > point_optional;
  typedef ::xsd::cxx::tree::traits< point_type, char > point_traits;

  const point_optional&
  point () const;

  point_optional&
  point ();

  void
  point (const point_type& x);

  void
  point (const point_optional& x);

  void
  point (::std::auto_ptr< point_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  Coordinate ();

  Coordinate (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  Coordinate (const Coordinate& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual Coordinate*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Coordinate ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  point_optional point_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class CoordinateDouble: public ::X3DCoordinateNode
{
  public:
  // point
  // 
  typedef ::MFVec3d point_type;
  typedef ::xsd::cxx::tree::optional< point_type > point_optional;
  typedef ::xsd::cxx::tree::traits< point_type, char > point_traits;

  const point_optional&
  point () const;

  point_optional&
  point ();

  void
  point (const point_type& x);

  void
  point (const point_optional& x);

  void
  point (::std::auto_ptr< point_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  CoordinateDouble ();

  CoordinateDouble (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  CoordinateDouble (const CoordinateDouble& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual CoordinateDouble*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CoordinateDouble ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  point_optional point_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class CoordinateInterpolator: public ::X3DInterpolatorNode
{
  public:
  // keyValue
  // 
  typedef ::MFVec3f keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  CoordinateInterpolator ();

  CoordinateInterpolator (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  CoordinateInterpolator (const CoordinateInterpolator& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual CoordinateInterpolator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CoordinateInterpolator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  keyValue_optional keyValue_;
};

class CoordinateInterpolator2D: public ::X3DInterpolatorNode
{
  public:
  // keyValue
  // 
  typedef ::MFVec2f keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  CoordinateInterpolator2D ();

  CoordinateInterpolator2D (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  CoordinateInterpolator2D (const CoordinateInterpolator2D& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual CoordinateInterpolator2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CoordinateInterpolator2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  keyValue_optional keyValue_;
};

class Cylinder: public ::X3DGeometryNode
{
  public:
  // bottom
  // 
  typedef ::SFBool bottom_type;
  typedef ::xsd::cxx::tree::traits< bottom_type, char > bottom_traits;

  const bottom_type&
  bottom () const;

  bottom_type&
  bottom ();

  void
  bottom (const bottom_type& x);

  void
  bottom (::std::auto_ptr< bottom_type > p);

  static const bottom_type&
  bottom_default_value ();

  // height
  // 
  typedef ::height1 height_type;
  typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

  const height_type&
  height () const;

  height_type&
  height ();

  void
  height (const height_type& x);

  void
  height (::std::auto_ptr< height_type > p);

  static const height_type&
  height_default_value ();

  // radius
  // 
  typedef ::radius3 radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  void
  radius (::std::auto_ptr< radius_type > p);

  static const radius_type&
  radius_default_value ();

  // side
  // 
  typedef ::SFBool side_type;
  typedef ::xsd::cxx::tree::traits< side_type, char > side_traits;

  const side_type&
  side () const;

  side_type&
  side ();

  void
  side (const side_type& x);

  void
  side (::std::auto_ptr< side_type > p);

  static const side_type&
  side_default_value ();

  // top
  // 
  typedef ::SFBool top_type;
  typedef ::xsd::cxx::tree::traits< top_type, char > top_traits;

  const top_type&
  top () const;

  top_type&
  top ();

  void
  top (const top_type& x);

  void
  top (::std::auto_ptr< top_type > p);

  static const top_type&
  top_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  Cylinder ();

  Cylinder (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  Cylinder (const Cylinder& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual Cylinder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Cylinder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< bottom_type > bottom_;
  static const bottom_type bottom_default_value_;
  ::xsd::cxx::tree::one< height_type > height_;
  static const height_type height_default_value_;
  ::xsd::cxx::tree::one< radius_type > radius_;
  static const radius_type radius_default_value_;
  ::xsd::cxx::tree::one< side_type > side_;
  static const side_type side_default_value_;
  ::xsd::cxx::tree::one< top_type > top_;
  static const top_type top_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class CylinderSensor: public ::X3DDragSensorNode
{
  public:
  // diskAngle
  // 
  typedef ::SFFloat diskAngle_type;
  typedef ::xsd::cxx::tree::traits< diskAngle_type, char > diskAngle_traits;

  const diskAngle_type&
  diskAngle () const;

  diskAngle_type&
  diskAngle ();

  void
  diskAngle (const diskAngle_type& x);

  void
  diskAngle (::std::auto_ptr< diskAngle_type > p);

  static const diskAngle_type&
  diskAngle_default_value ();

  // maxAngle
  // 
  typedef ::SFFloat maxAngle_type;
  typedef ::xsd::cxx::tree::traits< maxAngle_type, char > maxAngle_traits;

  const maxAngle_type&
  maxAngle () const;

  maxAngle_type&
  maxAngle ();

  void
  maxAngle (const maxAngle_type& x);

  void
  maxAngle (::std::auto_ptr< maxAngle_type > p);

  static const maxAngle_type&
  maxAngle_default_value ();

  // minAngle
  // 
  typedef ::SFFloat minAngle_type;
  typedef ::xsd::cxx::tree::traits< minAngle_type, char > minAngle_traits;

  const minAngle_type&
  minAngle () const;

  minAngle_type&
  minAngle ();

  void
  minAngle (const minAngle_type& x);

  void
  minAngle (::std::auto_ptr< minAngle_type > p);

  static const minAngle_type&
  minAngle_default_value ();

  // offset
  // 
  typedef ::SFFloat offset_type;
  typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

  const offset_type&
  offset () const;

  offset_type&
  offset ();

  void
  offset (const offset_type& x);

  void
  offset (::std::auto_ptr< offset_type > p);

  static const offset_type&
  offset_default_value ();

  // Constructors.
  //
  CylinderSensor ();

  CylinderSensor (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  CylinderSensor (const CylinderSensor& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual CylinderSensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CylinderSensor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< diskAngle_type > diskAngle_;
  static const diskAngle_type diskAngle_default_value_;
  ::xsd::cxx::tree::one< maxAngle_type > maxAngle_;
  static const maxAngle_type maxAngle_default_value_;
  ::xsd::cxx::tree::one< minAngle_type > minAngle_;
  static const minAngle_type minAngle_default_value_;
  ::xsd::cxx::tree::one< offset_type > offset_;
  static const offset_type offset_default_value_;
};

class DirectionalLight: public ::X3DLightNode
{
  public:
  // direction
  // 
  typedef ::SFVec3f direction_type;
  typedef ::xsd::cxx::tree::traits< direction_type, char > direction_traits;

  const direction_type&
  direction () const;

  direction_type&
  direction ();

  void
  direction (const direction_type& x);

  void
  direction (::std::auto_ptr< direction_type > p);

  static const direction_type&
  direction_default_value ();

  // global
  // 
  typedef ::SFBool global_type;
  typedef ::xsd::cxx::tree::traits< global_type, char > global_traits;

  const global_type&
  global () const;

  global_type&
  global ();

  void
  global (const global_type& x);

  void
  global (::std::auto_ptr< global_type > p);

  static const global_type&
  global_default_value ();

  // Constructors.
  //
  DirectionalLight ();

  DirectionalLight (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  DirectionalLight (const DirectionalLight& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual DirectionalLight*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~DirectionalLight ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< direction_type > direction_;
  static const direction_type direction_default_value_;
  ::xsd::cxx::tree::one< global_type > global_;
  static const global_type global_default_value_;
};

class Disk2D: public ::X3DGeometryNode
{
  public:
  // innerRadius
  // 
  typedef ::innerRadius innerRadius_type;
  typedef ::xsd::cxx::tree::traits< innerRadius_type, char > innerRadius_traits;

  const innerRadius_type&
  innerRadius () const;

  innerRadius_type&
  innerRadius ();

  void
  innerRadius (const innerRadius_type& x);

  void
  innerRadius (::std::auto_ptr< innerRadius_type > p);

  static const innerRadius_type&
  innerRadius_default_value ();

  // outerRadius
  // 
  typedef ::outerRadius outerRadius_type;
  typedef ::xsd::cxx::tree::traits< outerRadius_type, char > outerRadius_traits;

  const outerRadius_type&
  outerRadius () const;

  outerRadius_type&
  outerRadius ();

  void
  outerRadius (const outerRadius_type& x);

  void
  outerRadius (::std::auto_ptr< outerRadius_type > p);

  static const outerRadius_type&
  outerRadius_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  Disk2D ();

  Disk2D (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Disk2D (const Disk2D& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Disk2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Disk2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< innerRadius_type > innerRadius_;
  static const innerRadius_type innerRadius_default_value_;
  ::xsd::cxx::tree::one< outerRadius_type > outerRadius_;
  static const outerRadius_type outerRadius_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class ElevationGrid: public ::X3DGeometryNode
{
  public:
  // FloatVertexAttribute
  // 
  typedef ::FloatVertexAttribute FloatVertexAttribute_type;
  typedef ::xsd::cxx::tree::sequence< FloatVertexAttribute_type > FloatVertexAttribute_sequence;
  typedef FloatVertexAttribute_sequence::iterator FloatVertexAttribute_iterator;
  typedef FloatVertexAttribute_sequence::const_iterator FloatVertexAttribute_const_iterator;
  typedef ::xsd::cxx::tree::traits< FloatVertexAttribute_type, char > FloatVertexAttribute_traits;

  const FloatVertexAttribute_sequence&
  FloatVertexAttribute () const;

  FloatVertexAttribute_sequence&
  FloatVertexAttribute ();

  void
  FloatVertexAttribute (const FloatVertexAttribute_sequence& s);

  // Matrix3VertexAttribute
  // 
  typedef ::Matrix3VertexAttribute Matrix3VertexAttribute_type;
  typedef ::xsd::cxx::tree::sequence< Matrix3VertexAttribute_type > Matrix3VertexAttribute_sequence;
  typedef Matrix3VertexAttribute_sequence::iterator Matrix3VertexAttribute_iterator;
  typedef Matrix3VertexAttribute_sequence::const_iterator Matrix3VertexAttribute_const_iterator;
  typedef ::xsd::cxx::tree::traits< Matrix3VertexAttribute_type, char > Matrix3VertexAttribute_traits;

  const Matrix3VertexAttribute_sequence&
  Matrix3VertexAttribute () const;

  Matrix3VertexAttribute_sequence&
  Matrix3VertexAttribute ();

  void
  Matrix3VertexAttribute (const Matrix3VertexAttribute_sequence& s);

  // Matrix4VertexAttribute
  // 
  typedef ::Matrix4VertexAttribute Matrix4VertexAttribute_type;
  typedef ::xsd::cxx::tree::sequence< Matrix4VertexAttribute_type > Matrix4VertexAttribute_sequence;
  typedef Matrix4VertexAttribute_sequence::iterator Matrix4VertexAttribute_iterator;
  typedef Matrix4VertexAttribute_sequence::const_iterator Matrix4VertexAttribute_const_iterator;
  typedef ::xsd::cxx::tree::traits< Matrix4VertexAttribute_type, char > Matrix4VertexAttribute_traits;

  const Matrix4VertexAttribute_sequence&
  Matrix4VertexAttribute () const;

  Matrix4VertexAttribute_sequence&
  Matrix4VertexAttribute ();

  void
  Matrix4VertexAttribute (const Matrix4VertexAttribute_sequence& s);

  // Color
  // 
  typedef ::Color Color_type;
  typedef ::xsd::cxx::tree::sequence< Color_type > Color_sequence;
  typedef Color_sequence::iterator Color_iterator;
  typedef Color_sequence::const_iterator Color_const_iterator;
  typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

  const Color_sequence&
  Color () const;

  Color_sequence&
  Color ();

  void
  Color (const Color_sequence& s);

  // ColorRGBA
  // 
  typedef ::ColorRGBA ColorRGBA_type;
  typedef ::xsd::cxx::tree::sequence< ColorRGBA_type > ColorRGBA_sequence;
  typedef ColorRGBA_sequence::iterator ColorRGBA_iterator;
  typedef ColorRGBA_sequence::const_iterator ColorRGBA_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorRGBA_type, char > ColorRGBA_traits;

  const ColorRGBA_sequence&
  ColorRGBA () const;

  ColorRGBA_sequence&
  ColorRGBA ();

  void
  ColorRGBA (const ColorRGBA_sequence& s);

  // FogCoordinate
  // 
  typedef ::FogCoordinate FogCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< FogCoordinate_type > FogCoordinate_sequence;
  typedef FogCoordinate_sequence::iterator FogCoordinate_iterator;
  typedef FogCoordinate_sequence::const_iterator FogCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< FogCoordinate_type, char > FogCoordinate_traits;

  const FogCoordinate_sequence&
  FogCoordinate () const;

  FogCoordinate_sequence&
  FogCoordinate ();

  void
  FogCoordinate (const FogCoordinate_sequence& s);

  // Normal
  // 
  typedef ::Normal Normal_type;
  typedef ::xsd::cxx::tree::sequence< Normal_type > Normal_sequence;
  typedef Normal_sequence::iterator Normal_iterator;
  typedef Normal_sequence::const_iterator Normal_const_iterator;
  typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

  const Normal_sequence&
  Normal () const;

  Normal_sequence&
  Normal ();

  void
  Normal (const Normal_sequence& s);

  // TextureCoordinate
  // 
  typedef ::TextureCoordinate TextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate_type > TextureCoordinate_sequence;
  typedef TextureCoordinate_sequence::iterator TextureCoordinate_iterator;
  typedef TextureCoordinate_sequence::const_iterator TextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate_type, char > TextureCoordinate_traits;

  const TextureCoordinate_sequence&
  TextureCoordinate () const;

  TextureCoordinate_sequence&
  TextureCoordinate ();

  void
  TextureCoordinate (const TextureCoordinate_sequence& s);

  // TextureCoordinate3D
  // 
  typedef ::TextureCoordinate3D TextureCoordinate3D_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate3D_type > TextureCoordinate3D_sequence;
  typedef TextureCoordinate3D_sequence::iterator TextureCoordinate3D_iterator;
  typedef TextureCoordinate3D_sequence::const_iterator TextureCoordinate3D_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate3D_type, char > TextureCoordinate3D_traits;

  const TextureCoordinate3D_sequence&
  TextureCoordinate3D () const;

  TextureCoordinate3D_sequence&
  TextureCoordinate3D ();

  void
  TextureCoordinate3D (const TextureCoordinate3D_sequence& s);

  // TextureCoordinate4D
  // 
  typedef ::TextureCoordinate4D TextureCoordinate4D_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate4D_type > TextureCoordinate4D_sequence;
  typedef TextureCoordinate4D_sequence::iterator TextureCoordinate4D_iterator;
  typedef TextureCoordinate4D_sequence::const_iterator TextureCoordinate4D_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate4D_type, char > TextureCoordinate4D_traits;

  const TextureCoordinate4D_sequence&
  TextureCoordinate4D () const;

  TextureCoordinate4D_sequence&
  TextureCoordinate4D ();

  void
  TextureCoordinate4D (const TextureCoordinate4D_sequence& s);

  // TextureCoordinateGenerator
  // 
  typedef ::TextureCoordinateGenerator TextureCoordinateGenerator_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinateGenerator_type > TextureCoordinateGenerator_sequence;
  typedef TextureCoordinateGenerator_sequence::iterator TextureCoordinateGenerator_iterator;
  typedef TextureCoordinateGenerator_sequence::const_iterator TextureCoordinateGenerator_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinateGenerator_type, char > TextureCoordinateGenerator_traits;

  const TextureCoordinateGenerator_sequence&
  TextureCoordinateGenerator () const;

  TextureCoordinateGenerator_sequence&
  TextureCoordinateGenerator ();

  void
  TextureCoordinateGenerator (const TextureCoordinateGenerator_sequence& s);

  // MultiTextureCoordinate
  // 
  typedef ::MultiTextureCoordinate MultiTextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< MultiTextureCoordinate_type > MultiTextureCoordinate_sequence;
  typedef MultiTextureCoordinate_sequence::iterator MultiTextureCoordinate_iterator;
  typedef MultiTextureCoordinate_sequence::const_iterator MultiTextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTextureCoordinate_type, char > MultiTextureCoordinate_traits;

  const MultiTextureCoordinate_sequence&
  MultiTextureCoordinate () const;

  MultiTextureCoordinate_sequence&
  MultiTextureCoordinate ();

  void
  MultiTextureCoordinate (const MultiTextureCoordinate_sequence& s);

  // NurbsTextureCoordinate
  // 
  typedef ::NurbsTextureCoordinate NurbsTextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTextureCoordinate_type > NurbsTextureCoordinate_sequence;
  typedef NurbsTextureCoordinate_sequence::iterator NurbsTextureCoordinate_iterator;
  typedef NurbsTextureCoordinate_sequence::const_iterator NurbsTextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTextureCoordinate_type, char > NurbsTextureCoordinate_traits;

  const NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate () const;

  NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate ();

  void
  NurbsTextureCoordinate (const NurbsTextureCoordinate_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // height
  // 
  typedef ::MFFloat height_type;
  typedef ::xsd::cxx::tree::optional< height_type > height_optional;
  typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

  const height_optional&
  height () const;

  height_optional&
  height ();

  void
  height (const height_type& x);

  void
  height (const height_optional& x);

  void
  height (::std::auto_ptr< height_type > p);

  // ccw
  // 
  typedef ::SFBool ccw_type;
  typedef ::xsd::cxx::tree::traits< ccw_type, char > ccw_traits;

  const ccw_type&
  ccw () const;

  ccw_type&
  ccw ();

  void
  ccw (const ccw_type& x);

  void
  ccw (::std::auto_ptr< ccw_type > p);

  static const ccw_type&
  ccw_default_value ();

  // colorPerVertex
  // 
  typedef ::SFBool colorPerVertex_type;
  typedef ::xsd::cxx::tree::traits< colorPerVertex_type, char > colorPerVertex_traits;

  const colorPerVertex_type&
  colorPerVertex () const;

  colorPerVertex_type&
  colorPerVertex ();

  void
  colorPerVertex (const colorPerVertex_type& x);

  void
  colorPerVertex (::std::auto_ptr< colorPerVertex_type > p);

  static const colorPerVertex_type&
  colorPerVertex_default_value ();

  // creaseAngle
  // 
  typedef ::creaseAngle creaseAngle_type;
  typedef ::xsd::cxx::tree::traits< creaseAngle_type, char > creaseAngle_traits;

  const creaseAngle_type&
  creaseAngle () const;

  creaseAngle_type&
  creaseAngle ();

  void
  creaseAngle (const creaseAngle_type& x);

  void
  creaseAngle (::std::auto_ptr< creaseAngle_type > p);

  static const creaseAngle_type&
  creaseAngle_default_value ();

  // normalPerVertex
  // 
  typedef ::SFBool normalPerVertex_type;
  typedef ::xsd::cxx::tree::traits< normalPerVertex_type, char > normalPerVertex_traits;

  const normalPerVertex_type&
  normalPerVertex () const;

  normalPerVertex_type&
  normalPerVertex ();

  void
  normalPerVertex (const normalPerVertex_type& x);

  void
  normalPerVertex (::std::auto_ptr< normalPerVertex_type > p);

  static const normalPerVertex_type&
  normalPerVertex_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // xDimension
  // 
  typedef ::SFInt32 xDimension_type;
  typedef ::xsd::cxx::tree::traits< xDimension_type, char > xDimension_traits;

  const xDimension_type&
  xDimension () const;

  xDimension_type&
  xDimension ();

  void
  xDimension (const xDimension_type& x);

  void
  xDimension (::std::auto_ptr< xDimension_type > p);

  static const xDimension_type&
  xDimension_default_value ();

  // xSpacing
  // 
  typedef ::xSpacing xSpacing_type;
  typedef ::xsd::cxx::tree::traits< xSpacing_type, char > xSpacing_traits;

  const xSpacing_type&
  xSpacing () const;

  xSpacing_type&
  xSpacing ();

  void
  xSpacing (const xSpacing_type& x);

  void
  xSpacing (::std::auto_ptr< xSpacing_type > p);

  static const xSpacing_type&
  xSpacing_default_value ();

  // zDimension
  // 
  typedef ::SFInt32 zDimension_type;
  typedef ::xsd::cxx::tree::traits< zDimension_type, char > zDimension_traits;

  const zDimension_type&
  zDimension () const;

  zDimension_type&
  zDimension ();

  void
  zDimension (const zDimension_type& x);

  void
  zDimension (::std::auto_ptr< zDimension_type > p);

  static const zDimension_type&
  zDimension_default_value ();

  // zSpacing
  // 
  typedef ::zSpacing zSpacing_type;
  typedef ::xsd::cxx::tree::traits< zSpacing_type, char > zSpacing_traits;

  const zSpacing_type&
  zSpacing () const;

  zSpacing_type&
  zSpacing ();

  void
  zSpacing (const zSpacing_type& x);

  void
  zSpacing (::std::auto_ptr< zSpacing_type > p);

  static const zSpacing_type&
  zSpacing_default_value ();

  // Constructors.
  //
  ElevationGrid ();

  ElevationGrid (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ElevationGrid (const ElevationGrid& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ElevationGrid*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ElevationGrid ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  FloatVertexAttribute_sequence FloatVertexAttribute_;
  Matrix3VertexAttribute_sequence Matrix3VertexAttribute_;
  Matrix4VertexAttribute_sequence Matrix4VertexAttribute_;
  Color_sequence Color_;
  ColorRGBA_sequence ColorRGBA_;
  FogCoordinate_sequence FogCoordinate_;
  Normal_sequence Normal_;
  TextureCoordinate_sequence TextureCoordinate_;
  TextureCoordinate3D_sequence TextureCoordinate3D_;
  TextureCoordinate4D_sequence TextureCoordinate4D_;
  TextureCoordinateGenerator_sequence TextureCoordinateGenerator_;
  MultiTextureCoordinate_sequence MultiTextureCoordinate_;
  NurbsTextureCoordinate_sequence NurbsTextureCoordinate_;
  ProtoInstance_sequence ProtoInstance_;
  height_optional height_;
  ::xsd::cxx::tree::one< ccw_type > ccw_;
  static const ccw_type ccw_default_value_;
  ::xsd::cxx::tree::one< colorPerVertex_type > colorPerVertex_;
  static const colorPerVertex_type colorPerVertex_default_value_;
  ::xsd::cxx::tree::one< creaseAngle_type > creaseAngle_;
  static const creaseAngle_type creaseAngle_default_value_;
  ::xsd::cxx::tree::one< normalPerVertex_type > normalPerVertex_;
  static const normalPerVertex_type normalPerVertex_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
  ::xsd::cxx::tree::one< xDimension_type > xDimension_;
  static const xDimension_type xDimension_default_value_;
  ::xsd::cxx::tree::one< xSpacing_type > xSpacing_;
  static const xSpacing_type xSpacing_default_value_;
  ::xsd::cxx::tree::one< zDimension_type > zDimension_;
  static const zDimension_type zDimension_default_value_;
  ::xsd::cxx::tree::one< zSpacing_type > zSpacing_;
  static const zSpacing_type zSpacing_default_value_;
};

class Extrusion: public ::X3DGeometryNode
{
  public:
  // beginCap
  // 
  typedef ::SFBool beginCap_type;
  typedef ::xsd::cxx::tree::traits< beginCap_type, char > beginCap_traits;

  const beginCap_type&
  beginCap () const;

  beginCap_type&
  beginCap ();

  void
  beginCap (const beginCap_type& x);

  void
  beginCap (::std::auto_ptr< beginCap_type > p);

  static const beginCap_type&
  beginCap_default_value ();

  // ccw
  // 
  typedef ::SFBool ccw_type;
  typedef ::xsd::cxx::tree::traits< ccw_type, char > ccw_traits;

  const ccw_type&
  ccw () const;

  ccw_type&
  ccw ();

  void
  ccw (const ccw_type& x);

  void
  ccw (::std::auto_ptr< ccw_type > p);

  static const ccw_type&
  ccw_default_value ();

  // convex
  // 
  typedef ::SFBool convex_type;
  typedef ::xsd::cxx::tree::traits< convex_type, char > convex_traits;

  const convex_type&
  convex () const;

  convex_type&
  convex ();

  void
  convex (const convex_type& x);

  void
  convex (::std::auto_ptr< convex_type > p);

  static const convex_type&
  convex_default_value ();

  // creaseAngle
  // 
  typedef ::creaseAngle1 creaseAngle_type;
  typedef ::xsd::cxx::tree::traits< creaseAngle_type, char > creaseAngle_traits;

  const creaseAngle_type&
  creaseAngle () const;

  creaseAngle_type&
  creaseAngle ();

  void
  creaseAngle (const creaseAngle_type& x);

  void
  creaseAngle (::std::auto_ptr< creaseAngle_type > p);

  static const creaseAngle_type&
  creaseAngle_default_value ();

  // crossSection
  // 
  typedef ::MFVec2f crossSection_type;
  typedef ::xsd::cxx::tree::traits< crossSection_type, char > crossSection_traits;

  const crossSection_type&
  crossSection () const;

  crossSection_type&
  crossSection ();

  void
  crossSection (const crossSection_type& x);

  void
  crossSection (::std::auto_ptr< crossSection_type > p);

  static const crossSection_type&
  crossSection_default_value ();

  // endCap
  // 
  typedef ::SFBool endCap_type;
  typedef ::xsd::cxx::tree::traits< endCap_type, char > endCap_traits;

  const endCap_type&
  endCap () const;

  endCap_type&
  endCap ();

  void
  endCap (const endCap_type& x);

  void
  endCap (::std::auto_ptr< endCap_type > p);

  static const endCap_type&
  endCap_default_value ();

  // orientation
  // 
  typedef ::MFRotation orientation_type;
  typedef ::xsd::cxx::tree::traits< orientation_type, char > orientation_traits;

  const orientation_type&
  orientation () const;

  orientation_type&
  orientation ();

  void
  orientation (const orientation_type& x);

  void
  orientation (::std::auto_ptr< orientation_type > p);

  static const orientation_type&
  orientation_default_value ();

  // scale
  // 
  typedef ::MFVec2f scale_type;
  typedef ::xsd::cxx::tree::traits< scale_type, char > scale_traits;

  const scale_type&
  scale () const;

  scale_type&
  scale ();

  void
  scale (const scale_type& x);

  void
  scale (::std::auto_ptr< scale_type > p);

  static const scale_type&
  scale_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // spine
  // 
  typedef ::MFVec3f spine_type;
  typedef ::xsd::cxx::tree::traits< spine_type, char > spine_traits;

  const spine_type&
  spine () const;

  spine_type&
  spine ();

  void
  spine (const spine_type& x);

  void
  spine (::std::auto_ptr< spine_type > p);

  static const spine_type&
  spine_default_value ();

  // Constructors.
  //
  Extrusion ();

  Extrusion (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  Extrusion (const Extrusion& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual Extrusion*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Extrusion ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< beginCap_type > beginCap_;
  static const beginCap_type beginCap_default_value_;
  ::xsd::cxx::tree::one< ccw_type > ccw_;
  static const ccw_type ccw_default_value_;
  ::xsd::cxx::tree::one< convex_type > convex_;
  static const convex_type convex_default_value_;
  ::xsd::cxx::tree::one< creaseAngle_type > creaseAngle_;
  static const creaseAngle_type creaseAngle_default_value_;
  ::xsd::cxx::tree::one< crossSection_type > crossSection_;
  static const crossSection_type crossSection_default_value_;
  ::xsd::cxx::tree::one< endCap_type > endCap_;
  static const endCap_type endCap_default_value_;
  ::xsd::cxx::tree::one< orientation_type > orientation_;
  static const orientation_type orientation_default_value_;
  ::xsd::cxx::tree::one< scale_type > scale_;
  static const scale_type scale_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
  ::xsd::cxx::tree::one< spine_type > spine_;
  static const spine_type spine_default_value_;
};

class FillProperties: public ::X3DAppearanceChildNode
{
  public:
  // filled
  // 
  typedef ::SFBool filled_type;
  typedef ::xsd::cxx::tree::traits< filled_type, char > filled_traits;

  const filled_type&
  filled () const;

  filled_type&
  filled ();

  void
  filled (const filled_type& x);

  void
  filled (::std::auto_ptr< filled_type > p);

  static const filled_type&
  filled_default_value ();

  // hatched
  // 
  typedef ::SFBool hatched_type;
  typedef ::xsd::cxx::tree::traits< hatched_type, char > hatched_traits;

  const hatched_type&
  hatched () const;

  hatched_type&
  hatched ();

  void
  hatched (const hatched_type& x);

  void
  hatched (::std::auto_ptr< hatched_type > p);

  static const hatched_type&
  hatched_default_value ();

  // hatchStyle
  // 
  typedef ::SFInt32 hatchStyle_type;
  typedef ::xsd::cxx::tree::traits< hatchStyle_type, char > hatchStyle_traits;

  const hatchStyle_type&
  hatchStyle () const;

  hatchStyle_type&
  hatchStyle ();

  void
  hatchStyle (const hatchStyle_type& x);

  void
  hatchStyle (::std::auto_ptr< hatchStyle_type > p);

  static const hatchStyle_type&
  hatchStyle_default_value ();

  // hatchColor
  // 
  typedef ::SFColor hatchColor_type;
  typedef ::xsd::cxx::tree::traits< hatchColor_type, char > hatchColor_traits;

  const hatchColor_type&
  hatchColor () const;

  hatchColor_type&
  hatchColor ();

  void
  hatchColor (const hatchColor_type& x);

  void
  hatchColor (::std::auto_ptr< hatchColor_type > p);

  static const hatchColor_type&
  hatchColor_default_value ();

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  FillProperties ();

  FillProperties (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  FillProperties (const FillProperties& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual FillProperties*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~FillProperties ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< filled_type > filled_;
  static const filled_type filled_default_value_;
  ::xsd::cxx::tree::one< hatched_type > hatched_;
  static const hatched_type hatched_default_value_;
  ::xsd::cxx::tree::one< hatchStyle_type > hatchStyle_;
  static const hatchStyle_type hatchStyle_default_value_;
  ::xsd::cxx::tree::one< hatchColor_type > hatchColor_;
  static const hatchColor_type hatchColor_default_value_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class Fog: public ::X3DBindableNode
{
  public:
  // color
  // 
  typedef ::SFColor color_type;
  typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

  const color_type&
  color () const;

  color_type&
  color ();

  void
  color (const color_type& x);

  void
  color (::std::auto_ptr< color_type > p);

  static const color_type&
  color_default_value ();

  // fogType
  // 
  typedef ::fogTypeValues fogType_type;
  typedef ::xsd::cxx::tree::traits< fogType_type, char > fogType_traits;

  const fogType_type&
  fogType () const;

  fogType_type&
  fogType ();

  void
  fogType (const fogType_type& x);

  void
  fogType (::std::auto_ptr< fogType_type > p);

  static const fogType_type&
  fogType_default_value ();

  // visibilityRange
  // 
  typedef ::SFFloat visibilityRange_type;
  typedef ::xsd::cxx::tree::traits< visibilityRange_type, char > visibilityRange_traits;

  const visibilityRange_type&
  visibilityRange () const;

  visibilityRange_type&
  visibilityRange ();

  void
  visibilityRange (const visibilityRange_type& x);

  void
  visibilityRange (::std::auto_ptr< visibilityRange_type > p);

  static const visibilityRange_type&
  visibilityRange_default_value ();

  // Constructors.
  //
  Fog ();

  Fog (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  Fog (const Fog& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual Fog*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Fog ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< color_type > color_;
  static const color_type color_default_value_;
  ::xsd::cxx::tree::one< fogType_type > fogType_;
  static const fogType_type fogType_default_value_;
  ::xsd::cxx::tree::one< visibilityRange_type > visibilityRange_;
  static const visibilityRange_type visibilityRange_default_value_;
};

class FogCoordinate: public ::X3DCoordinateNode
{
  public:
  // depth
  // 
  typedef ::MFVec3f depth_type;
  typedef ::xsd::cxx::tree::optional< depth_type > depth_optional;
  typedef ::xsd::cxx::tree::traits< depth_type, char > depth_traits;

  const depth_optional&
  depth () const;

  depth_optional&
  depth ();

  void
  depth (const depth_type& x);

  void
  depth (const depth_optional& x);

  void
  depth (::std::auto_ptr< depth_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  FogCoordinate ();

  FogCoordinate (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  FogCoordinate (const FogCoordinate& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual FogCoordinate*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~FogCoordinate ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  depth_optional depth_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class FontStyle: public ::X3DFontStyleNode
{
  public:
  // family
  // 
  typedef ::MFString family_type;
  typedef ::xsd::cxx::tree::traits< family_type, char > family_traits;

  const family_type&
  family () const;

  family_type&
  family ();

  void
  family (const family_type& x);

  void
  family (::std::auto_ptr< family_type > p);

  static const family_type&
  family_default_value ();

  // horizontal
  // 
  typedef ::SFBool horizontal_type;
  typedef ::xsd::cxx::tree::traits< horizontal_type, char > horizontal_traits;

  const horizontal_type&
  horizontal () const;

  horizontal_type&
  horizontal ();

  void
  horizontal (const horizontal_type& x);

  void
  horizontal (::std::auto_ptr< horizontal_type > p);

  static const horizontal_type&
  horizontal_default_value ();

  // justify
  // 
  typedef ::MFString justify_type;
  typedef ::xsd::cxx::tree::traits< justify_type, char > justify_traits;

  const justify_type&
  justify () const;

  justify_type&
  justify ();

  void
  justify (const justify_type& x);

  void
  justify (::std::auto_ptr< justify_type > p);

  static const justify_type&
  justify_default_value ();

  // language
  // 
  typedef ::SFString language_type;
  typedef ::xsd::cxx::tree::optional< language_type > language_optional;
  typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

  const language_optional&
  language () const;

  language_optional&
  language ();

  void
  language (const language_type& x);

  void
  language (const language_optional& x);

  void
  language (::std::auto_ptr< language_type > p);

  // leftToRight
  // 
  typedef ::SFBool leftToRight_type;
  typedef ::xsd::cxx::tree::traits< leftToRight_type, char > leftToRight_traits;

  const leftToRight_type&
  leftToRight () const;

  leftToRight_type&
  leftToRight ();

  void
  leftToRight (const leftToRight_type& x);

  void
  leftToRight (::std::auto_ptr< leftToRight_type > p);

  static const leftToRight_type&
  leftToRight_default_value ();

  // size
  // 
  typedef ::SFFloat size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  static const size_type&
  size_default_value ();

  // spacing
  // 
  typedef ::SFFloat spacing_type;
  typedef ::xsd::cxx::tree::traits< spacing_type, char > spacing_traits;

  const spacing_type&
  spacing () const;

  spacing_type&
  spacing ();

  void
  spacing (const spacing_type& x);

  void
  spacing (::std::auto_ptr< spacing_type > p);

  static const spacing_type&
  spacing_default_value ();

  // style
  // 
  typedef ::fontStyleValues style_type;
  typedef ::xsd::cxx::tree::traits< style_type, char > style_traits;

  const style_type&
  style () const;

  style_type&
  style ();

  void
  style (const style_type& x);

  void
  style (::std::auto_ptr< style_type > p);

  static const style_type&
  style_default_value ();

  // topToBottom
  // 
  typedef ::SFBool topToBottom_type;
  typedef ::xsd::cxx::tree::traits< topToBottom_type, char > topToBottom_traits;

  const topToBottom_type&
  topToBottom () const;

  topToBottom_type&
  topToBottom ();

  void
  topToBottom (const topToBottom_type& x);

  void
  topToBottom (::std::auto_ptr< topToBottom_type > p);

  static const topToBottom_type&
  topToBottom_default_value ();

  // Constructors.
  //
  FontStyle ();

  FontStyle (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  FontStyle (const FontStyle& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual FontStyle*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~FontStyle ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< family_type > family_;
  static const family_type family_default_value_;
  ::xsd::cxx::tree::one< horizontal_type > horizontal_;
  static const horizontal_type horizontal_default_value_;
  ::xsd::cxx::tree::one< justify_type > justify_;
  static const justify_type justify_default_value_;
  language_optional language_;
  ::xsd::cxx::tree::one< leftToRight_type > leftToRight_;
  static const leftToRight_type leftToRight_default_value_;
  ::xsd::cxx::tree::one< size_type > size_;
  static const size_type size_default_value_;
  ::xsd::cxx::tree::one< spacing_type > spacing_;
  static const spacing_type spacing_default_value_;
  ::xsd::cxx::tree::one< style_type > style_;
  static const style_type style_default_value_;
  ::xsd::cxx::tree::one< topToBottom_type > topToBottom_;
  static const topToBottom_type topToBottom_default_value_;
};

class Group: public ::X3DGroupingNode
{
  public:
  // Constructors.
  //
  Group ();

  Group (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Group (const Group& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Group*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Group ();
};

class ImageTexture: public ::X3DTexture2DNode
{
  public:
  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // Constructors.
  //
  ImageTexture ();

  ImageTexture (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  ImageTexture (const ImageTexture& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual ImageTexture*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ImageTexture ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  url_optional url_;
};

class IndexedFaceSet: public ::X3DComposedGeometryNode
{
  public:
  // convex
  // 
  typedef ::SFBool convex_type;
  typedef ::xsd::cxx::tree::traits< convex_type, char > convex_traits;

  const convex_type&
  convex () const;

  convex_type&
  convex ();

  void
  convex (const convex_type& x);

  void
  convex (::std::auto_ptr< convex_type > p);

  static const convex_type&
  convex_default_value ();

  // creaseAngle
  // 
  typedef ::creaseAngle2 creaseAngle_type;
  typedef ::xsd::cxx::tree::traits< creaseAngle_type, char > creaseAngle_traits;

  const creaseAngle_type&
  creaseAngle () const;

  creaseAngle_type&
  creaseAngle ();

  void
  creaseAngle (const creaseAngle_type& x);

  void
  creaseAngle (::std::auto_ptr< creaseAngle_type > p);

  static const creaseAngle_type&
  creaseAngle_default_value ();

  // colorIndex
  // 
  typedef ::MFInt32 colorIndex_type;
  typedef ::xsd::cxx::tree::optional< colorIndex_type > colorIndex_optional;
  typedef ::xsd::cxx::tree::traits< colorIndex_type, char > colorIndex_traits;

  const colorIndex_optional&
  colorIndex () const;

  colorIndex_optional&
  colorIndex ();

  void
  colorIndex (const colorIndex_type& x);

  void
  colorIndex (const colorIndex_optional& x);

  void
  colorIndex (::std::auto_ptr< colorIndex_type > p);

  // coordIndex
  // 
  typedef ::MFInt32 coordIndex_type;
  typedef ::xsd::cxx::tree::optional< coordIndex_type > coordIndex_optional;
  typedef ::xsd::cxx::tree::traits< coordIndex_type, char > coordIndex_traits;

  const coordIndex_optional&
  coordIndex () const;

  coordIndex_optional&
  coordIndex ();

  void
  coordIndex (const coordIndex_type& x);

  void
  coordIndex (const coordIndex_optional& x);

  void
  coordIndex (::std::auto_ptr< coordIndex_type > p);

  // normalIndex
  // 
  typedef ::MFInt32 normalIndex_type;
  typedef ::xsd::cxx::tree::optional< normalIndex_type > normalIndex_optional;
  typedef ::xsd::cxx::tree::traits< normalIndex_type, char > normalIndex_traits;

  const normalIndex_optional&
  normalIndex () const;

  normalIndex_optional&
  normalIndex ();

  void
  normalIndex (const normalIndex_type& x);

  void
  normalIndex (const normalIndex_optional& x);

  void
  normalIndex (::std::auto_ptr< normalIndex_type > p);

  // texCoordIndex
  // 
  typedef ::MFInt32 texCoordIndex_type;
  typedef ::xsd::cxx::tree::optional< texCoordIndex_type > texCoordIndex_optional;
  typedef ::xsd::cxx::tree::traits< texCoordIndex_type, char > texCoordIndex_traits;

  const texCoordIndex_optional&
  texCoordIndex () const;

  texCoordIndex_optional&
  texCoordIndex ();

  void
  texCoordIndex (const texCoordIndex_type& x);

  void
  texCoordIndex (const texCoordIndex_optional& x);

  void
  texCoordIndex (::std::auto_ptr< texCoordIndex_type > p);

  // Constructors.
  //
  IndexedFaceSet ();

  IndexedFaceSet (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  IndexedFaceSet (const IndexedFaceSet& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual IndexedFaceSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IndexedFaceSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< convex_type > convex_;
  static const convex_type convex_default_value_;
  ::xsd::cxx::tree::one< creaseAngle_type > creaseAngle_;
  static const creaseAngle_type creaseAngle_default_value_;
  colorIndex_optional colorIndex_;
  coordIndex_optional coordIndex_;
  normalIndex_optional normalIndex_;
  texCoordIndex_optional texCoordIndex_;
};

class IndexedLineSet: public ::X3DGeometryNode
{
  public:
  // Color
  // 
  typedef ::Color Color_type;
  typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
  typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

  const Color_optional&
  Color () const;

  Color_optional&
  Color ();

  void
  Color (const Color_type& x);

  void
  Color (const Color_optional& x);

  void
  Color (::std::auto_ptr< Color_type > p);

  // ColorRGBA
  // 
  typedef ::ColorRGBA ColorRGBA_type;
  typedef ::xsd::cxx::tree::optional< ColorRGBA_type > ColorRGBA_optional;
  typedef ::xsd::cxx::tree::traits< ColorRGBA_type, char > ColorRGBA_traits;

  const ColorRGBA_optional&
  ColorRGBA () const;

  ColorRGBA_optional&
  ColorRGBA ();

  void
  ColorRGBA (const ColorRGBA_type& x);

  void
  ColorRGBA (const ColorRGBA_optional& x);

  void
  ColorRGBA (::std::auto_ptr< ColorRGBA_type > p);

  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::optional< Coordinate_type > Coordinate_optional;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_optional&
  Coordinate () const;

  Coordinate_optional&
  Coordinate ();

  void
  Coordinate (const Coordinate_type& x);

  void
  Coordinate (const Coordinate_optional& x);

  void
  Coordinate (::std::auto_ptr< Coordinate_type > p);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::optional< CoordinateDouble_type > CoordinateDouble_optional;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_optional&
  CoordinateDouble () const;

  CoordinateDouble_optional&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_type& x);

  void
  CoordinateDouble (const CoordinateDouble_optional& x);

  void
  CoordinateDouble (::std::auto_ptr< CoordinateDouble_type > p);

  // GeoCoordinate
  // 
  typedef ::GeoCoordinate GeoCoordinate_type;
  typedef ::xsd::cxx::tree::optional< GeoCoordinate_type > GeoCoordinate_optional;
  typedef ::xsd::cxx::tree::traits< GeoCoordinate_type, char > GeoCoordinate_traits;

  const GeoCoordinate_optional&
  GeoCoordinate () const;

  GeoCoordinate_optional&
  GeoCoordinate ();

  void
  GeoCoordinate (const GeoCoordinate_type& x);

  void
  GeoCoordinate (const GeoCoordinate_optional& x);

  void
  GeoCoordinate (::std::auto_ptr< GeoCoordinate_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // colorPerVertex
  // 
  typedef ::SFBool colorPerVertex_type;
  typedef ::xsd::cxx::tree::traits< colorPerVertex_type, char > colorPerVertex_traits;

  const colorPerVertex_type&
  colorPerVertex () const;

  colorPerVertex_type&
  colorPerVertex ();

  void
  colorPerVertex (const colorPerVertex_type& x);

  void
  colorPerVertex (::std::auto_ptr< colorPerVertex_type > p);

  static const colorPerVertex_type&
  colorPerVertex_default_value ();

  // colorIndex
  // 
  typedef ::MFInt32 colorIndex_type;
  typedef ::xsd::cxx::tree::optional< colorIndex_type > colorIndex_optional;
  typedef ::xsd::cxx::tree::traits< colorIndex_type, char > colorIndex_traits;

  const colorIndex_optional&
  colorIndex () const;

  colorIndex_optional&
  colorIndex ();

  void
  colorIndex (const colorIndex_type& x);

  void
  colorIndex (const colorIndex_optional& x);

  void
  colorIndex (::std::auto_ptr< colorIndex_type > p);

  // coordIndex
  // 
  typedef ::MFInt32 coordIndex_type;
  typedef ::xsd::cxx::tree::optional< coordIndex_type > coordIndex_optional;
  typedef ::xsd::cxx::tree::traits< coordIndex_type, char > coordIndex_traits;

  const coordIndex_optional&
  coordIndex () const;

  coordIndex_optional&
  coordIndex ();

  void
  coordIndex (const coordIndex_type& x);

  void
  coordIndex (const coordIndex_optional& x);

  void
  coordIndex (::std::auto_ptr< coordIndex_type > p);

  // Constructors.
  //
  IndexedLineSet ();

  IndexedLineSet (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  IndexedLineSet (const IndexedLineSet& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual IndexedLineSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IndexedLineSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Color_optional Color_;
  ColorRGBA_optional ColorRGBA_;
  Coordinate_optional Coordinate_;
  CoordinateDouble_optional CoordinateDouble_;
  GeoCoordinate_optional GeoCoordinate_;
  ProtoInstance_sequence ProtoInstance_;
  ::xsd::cxx::tree::one< colorPerVertex_type > colorPerVertex_;
  static const colorPerVertex_type colorPerVertex_default_value_;
  colorIndex_optional colorIndex_;
  coordIndex_optional coordIndex_;
};

class IndexedTriangleFanSet: public ::X3DComposedGeometryNode
{
  public:
  // index
  // 
  typedef ::MFInt32 index_type;
  typedef ::xsd::cxx::tree::optional< index_type > index_optional;
  typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

  const index_optional&
  index () const;

  index_optional&
  index ();

  void
  index (const index_type& x);

  void
  index (const index_optional& x);

  void
  index (::std::auto_ptr< index_type > p);

  // Constructors.
  //
  IndexedTriangleFanSet ();

  IndexedTriangleFanSet (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  IndexedTriangleFanSet (const IndexedTriangleFanSet& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual IndexedTriangleFanSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IndexedTriangleFanSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  index_optional index_;
};

class IndexedTriangleSet: public ::X3DComposedGeometryNode
{
  public:
  // index
  // 
  typedef ::MFInt32 index_type;
  typedef ::xsd::cxx::tree::optional< index_type > index_optional;
  typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

  const index_optional&
  index () const;

  index_optional&
  index ();

  void
  index (const index_type& x);

  void
  index (const index_optional& x);

  void
  index (::std::auto_ptr< index_type > p);

  // Constructors.
  //
  IndexedTriangleSet ();

  IndexedTriangleSet (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  IndexedTriangleSet (const IndexedTriangleSet& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual IndexedTriangleSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IndexedTriangleSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  index_optional index_;
};

class IndexedTriangleStripSet: public ::X3DComposedGeometryNode
{
  public:
  // index
  // 
  typedef ::MFInt32 index_type;
  typedef ::xsd::cxx::tree::optional< index_type > index_optional;
  typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

  const index_optional&
  index () const;

  index_optional&
  index ();

  void
  index (const index_type& x);

  void
  index (const index_optional& x);

  void
  index (::std::auto_ptr< index_type > p);

  // Constructors.
  //
  IndexedTriangleStripSet ();

  IndexedTriangleStripSet (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  IndexedTriangleStripSet (const IndexedTriangleStripSet& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual IndexedTriangleStripSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IndexedTriangleStripSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  index_optional index_;
};

class Inline: public ::X3DChildNode
{
  public:
  // load
  // 
  typedef ::SFBool load_type;
  typedef ::xsd::cxx::tree::traits< load_type, char > load_traits;

  const load_type&
  load () const;

  load_type&
  load ();

  void
  load (const load_type& x);

  void
  load (::std::auto_ptr< load_type > p);

  static const load_type&
  load_default_value ();

  // bboxCenter
  // 
  typedef ::SFVec3f bboxCenter_type;
  typedef ::xsd::cxx::tree::traits< bboxCenter_type, char > bboxCenter_traits;

  const bboxCenter_type&
  bboxCenter () const;

  bboxCenter_type&
  bboxCenter ();

  void
  bboxCenter (const bboxCenter_type& x);

  void
  bboxCenter (::std::auto_ptr< bboxCenter_type > p);

  static const bboxCenter_type&
  bboxCenter_default_value ();

  // bboxSize
  // 
  typedef ::BoundingBoxSize bboxSize_type;
  typedef ::xsd::cxx::tree::traits< bboxSize_type, char > bboxSize_traits;

  const bboxSize_type&
  bboxSize () const;

  bboxSize_type&
  bboxSize ();

  void
  bboxSize (const bboxSize_type& x);

  void
  bboxSize (::std::auto_ptr< bboxSize_type > p);

  static const bboxSize_type&
  bboxSize_default_value ();

  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // Constructors.
  //
  Inline ();

  Inline (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Inline (const Inline& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Inline*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Inline ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< load_type > load_;
  static const load_type load_default_value_;
  ::xsd::cxx::tree::one< bboxCenter_type > bboxCenter_;
  static const bboxCenter_type bboxCenter_default_value_;
  ::xsd::cxx::tree::one< bboxSize_type > bboxSize_;
  static const bboxSize_type bboxSize_default_value_;
  url_optional url_;
};

class IntegerSequencer: public ::X3DSequencerNode
{
  public:
  // keyValue
  // 
  typedef ::MFInt32 keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  IntegerSequencer ();

  IntegerSequencer (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  IntegerSequencer (const IntegerSequencer& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual IntegerSequencer*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IntegerSequencer ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  keyValue_optional keyValue_;
};

class IntegerTrigger: public ::X3DChildNode
{
  public:
  // integerKey
  // 
  typedef ::SFInt32 integerKey_type;
  typedef ::xsd::cxx::tree::traits< integerKey_type, char > integerKey_traits;

  const integerKey_type&
  integerKey () const;

  integerKey_type&
  integerKey ();

  void
  integerKey (const integerKey_type& x);

  void
  integerKey (::std::auto_ptr< integerKey_type > p);

  static const integerKey_type&
  integerKey_default_value ();

  // Constructors.
  //
  IntegerTrigger ();

  IntegerTrigger (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  IntegerTrigger (const IntegerTrigger& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual IntegerTrigger*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IntegerTrigger ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< integerKey_type > integerKey_;
  static const integerKey_type integerKey_default_value_;
};

class KeySensor: public ::X3DKeyDeviceSensorNode
{
  public:
  // Constructors.
  //
  KeySensor ();

  KeySensor (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  KeySensor (const KeySensor& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual KeySensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~KeySensor ();
};

class LineProperties: public ::X3DAppearanceChildNode
{
  public:
  // applied
  // 
  typedef ::SFBool applied_type;
  typedef ::xsd::cxx::tree::traits< applied_type, char > applied_traits;

  const applied_type&
  applied () const;

  applied_type&
  applied ();

  void
  applied (const applied_type& x);

  void
  applied (::std::auto_ptr< applied_type > p);

  static const applied_type&
  applied_default_value ();

  // linetype
  // 
  typedef ::SFInt32 linetype_type;
  typedef ::xsd::cxx::tree::traits< linetype_type, char > linetype_traits;

  const linetype_type&
  linetype () const;

  linetype_type&
  linetype ();

  void
  linetype (const linetype_type& x);

  void
  linetype (::std::auto_ptr< linetype_type > p);

  static const linetype_type&
  linetype_default_value ();

  // linewidthScaleFactor
  // 
  typedef ::SFFloat linewidthScaleFactor_type;
  typedef ::xsd::cxx::tree::traits< linewidthScaleFactor_type, char > linewidthScaleFactor_traits;

  const linewidthScaleFactor_type&
  linewidthScaleFactor () const;

  linewidthScaleFactor_type&
  linewidthScaleFactor ();

  void
  linewidthScaleFactor (const linewidthScaleFactor_type& x);

  void
  linewidthScaleFactor (::std::auto_ptr< linewidthScaleFactor_type > p);

  static const linewidthScaleFactor_type&
  linewidthScaleFactor_default_value ();

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  LineProperties ();

  LineProperties (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  LineProperties (const LineProperties& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual LineProperties*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~LineProperties ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< applied_type > applied_;
  static const applied_type applied_default_value_;
  ::xsd::cxx::tree::one< linetype_type > linetype_;
  static const linetype_type linetype_default_value_;
  ::xsd::cxx::tree::one< linewidthScaleFactor_type > linewidthScaleFactor_;
  static const linewidthScaleFactor_type linewidthScaleFactor_default_value_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class LineSet: public ::X3DGeometryNode
{
  public:
  // Color
  // 
  typedef ::Color Color_type;
  typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
  typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

  const Color_optional&
  Color () const;

  Color_optional&
  Color ();

  void
  Color (const Color_type& x);

  void
  Color (const Color_optional& x);

  void
  Color (::std::auto_ptr< Color_type > p);

  // ColorRGBA
  // 
  typedef ::ColorRGBA ColorRGBA_type;
  typedef ::xsd::cxx::tree::optional< ColorRGBA_type > ColorRGBA_optional;
  typedef ::xsd::cxx::tree::traits< ColorRGBA_type, char > ColorRGBA_traits;

  const ColorRGBA_optional&
  ColorRGBA () const;

  ColorRGBA_optional&
  ColorRGBA ();

  void
  ColorRGBA (const ColorRGBA_type& x);

  void
  ColorRGBA (const ColorRGBA_optional& x);

  void
  ColorRGBA (::std::auto_ptr< ColorRGBA_type > p);

  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::optional< Coordinate_type > Coordinate_optional;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_optional&
  Coordinate () const;

  Coordinate_optional&
  Coordinate ();

  void
  Coordinate (const Coordinate_type& x);

  void
  Coordinate (const Coordinate_optional& x);

  void
  Coordinate (::std::auto_ptr< Coordinate_type > p);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::optional< CoordinateDouble_type > CoordinateDouble_optional;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_optional&
  CoordinateDouble () const;

  CoordinateDouble_optional&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_type& x);

  void
  CoordinateDouble (const CoordinateDouble_optional& x);

  void
  CoordinateDouble (::std::auto_ptr< CoordinateDouble_type > p);

  // GeoCoordinate
  // 
  typedef ::GeoCoordinate GeoCoordinate_type;
  typedef ::xsd::cxx::tree::optional< GeoCoordinate_type > GeoCoordinate_optional;
  typedef ::xsd::cxx::tree::traits< GeoCoordinate_type, char > GeoCoordinate_traits;

  const GeoCoordinate_optional&
  GeoCoordinate () const;

  GeoCoordinate_optional&
  GeoCoordinate ();

  void
  GeoCoordinate (const GeoCoordinate_type& x);

  void
  GeoCoordinate (const GeoCoordinate_optional& x);

  void
  GeoCoordinate (::std::auto_ptr< GeoCoordinate_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // vertexCount
  // 
  typedef ::MFInt32 vertexCount_type;
  typedef ::xsd::cxx::tree::optional< vertexCount_type > vertexCount_optional;
  typedef ::xsd::cxx::tree::traits< vertexCount_type, char > vertexCount_traits;

  const vertexCount_optional&
  vertexCount () const;

  vertexCount_optional&
  vertexCount ();

  void
  vertexCount (const vertexCount_type& x);

  void
  vertexCount (const vertexCount_optional& x);

  void
  vertexCount (::std::auto_ptr< vertexCount_type > p);

  // Constructors.
  //
  LineSet ();

  LineSet (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  LineSet (const LineSet& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual LineSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~LineSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Color_optional Color_;
  ColorRGBA_optional ColorRGBA_;
  Coordinate_optional Coordinate_;
  CoordinateDouble_optional CoordinateDouble_;
  GeoCoordinate_optional GeoCoordinate_;
  ProtoInstance_sequence ProtoInstance_;
  vertexCount_optional vertexCount_;
};

class LoadSensor: public ::X3DNetworkSensorNode
{
  public:
  // timeOut
  // 
  typedef ::SFTime timeOut_type;
  typedef ::xsd::cxx::tree::traits< timeOut_type, char > timeOut_traits;

  const timeOut_type&
  timeOut () const;

  timeOut_type&
  timeOut ();

  void
  timeOut (const timeOut_type& x);

  void
  timeOut (::std::auto_ptr< timeOut_type > p);

  static const timeOut_type&
  timeOut_default_value ();

  // Constructors.
  //
  LoadSensor ();

  LoadSensor (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  LoadSensor (const LoadSensor& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual LoadSensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~LoadSensor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< timeOut_type > timeOut_;
  static const timeOut_type timeOut_default_value_;
};

class LocalFog: public ::X3DBindableNode
{
  public:
  // enabled
  // 
  typedef ::SFBool enabled_type;
  typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

  const enabled_type&
  enabled () const;

  enabled_type&
  enabled ();

  void
  enabled (const enabled_type& x);

  void
  enabled (::std::auto_ptr< enabled_type > p);

  static const enabled_type&
  enabled_default_value ();

  // color
  // 
  typedef ::SFColor color_type;
  typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

  const color_type&
  color () const;

  color_type&
  color ();

  void
  color (const color_type& x);

  void
  color (::std::auto_ptr< color_type > p);

  static const color_type&
  color_default_value ();

  // fogType
  // 
  typedef ::fogTypeValues fogType_type;
  typedef ::xsd::cxx::tree::traits< fogType_type, char > fogType_traits;

  const fogType_type&
  fogType () const;

  fogType_type&
  fogType ();

  void
  fogType (const fogType_type& x);

  void
  fogType (::std::auto_ptr< fogType_type > p);

  static const fogType_type&
  fogType_default_value ();

  // visibilityRange
  // 
  typedef ::SFFloat visibilityRange_type;
  typedef ::xsd::cxx::tree::traits< visibilityRange_type, char > visibilityRange_traits;

  const visibilityRange_type&
  visibilityRange () const;

  visibilityRange_type&
  visibilityRange ();

  void
  visibilityRange (const visibilityRange_type& x);

  void
  visibilityRange (::std::auto_ptr< visibilityRange_type > p);

  static const visibilityRange_type&
  visibilityRange_default_value ();

  // Constructors.
  //
  LocalFog ();

  LocalFog (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  LocalFog (const LocalFog& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual LocalFog*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~LocalFog ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< enabled_type > enabled_;
  static const enabled_type enabled_default_value_;
  ::xsd::cxx::tree::one< color_type > color_;
  static const color_type color_default_value_;
  ::xsd::cxx::tree::one< fogType_type > fogType_;
  static const fogType_type fogType_default_value_;
  ::xsd::cxx::tree::one< visibilityRange_type > visibilityRange_;
  static const visibilityRange_type visibilityRange_default_value_;
};

class LOD: public ::X3DGroupingNode
{
  public:
  // forceTransitions
  // 
  typedef ::SFBool forceTransitions_type;
  typedef ::xsd::cxx::tree::traits< forceTransitions_type, char > forceTransitions_traits;

  const forceTransitions_type&
  forceTransitions () const;

  forceTransitions_type&
  forceTransitions ();

  void
  forceTransitions (const forceTransitions_type& x);

  void
  forceTransitions (::std::auto_ptr< forceTransitions_type > p);

  static const forceTransitions_type&
  forceTransitions_default_value ();

  // center
  // 
  typedef ::SFVec3f center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::auto_ptr< center_type > p);

  static const center_type&
  center_default_value ();

  // range
  // 
  typedef ::MFFloat range_type;
  typedef ::xsd::cxx::tree::optional< range_type > range_optional;
  typedef ::xsd::cxx::tree::traits< range_type, char > range_traits;

  const range_optional&
  range () const;

  range_optional&
  range ();

  void
  range (const range_type& x);

  void
  range (const range_optional& x);

  void
  range (::std::auto_ptr< range_type > p);

  // Constructors.
  //
  LOD ();

  LOD (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  LOD (const LOD& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual LOD*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~LOD ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< forceTransitions_type > forceTransitions_;
  static const forceTransitions_type forceTransitions_default_value_;
  ::xsd::cxx::tree::one< center_type > center_;
  static const center_type center_default_value_;
  range_optional range_;
};

class Material: public ::X3DMaterialNode
{
  public:
  // ambientIntensity
  // 
  typedef ::ambientIntensity1 ambientIntensity_type;
  typedef ::xsd::cxx::tree::traits< ambientIntensity_type, char > ambientIntensity_traits;

  const ambientIntensity_type&
  ambientIntensity () const;

  ambientIntensity_type&
  ambientIntensity ();

  void
  ambientIntensity (const ambientIntensity_type& x);

  void
  ambientIntensity (::std::auto_ptr< ambientIntensity_type > p);

  static const ambientIntensity_type&
  ambientIntensity_default_value ();

  // diffuseColor
  // 
  typedef ::SFColor diffuseColor_type;
  typedef ::xsd::cxx::tree::traits< diffuseColor_type, char > diffuseColor_traits;

  const diffuseColor_type&
  diffuseColor () const;

  diffuseColor_type&
  diffuseColor ();

  void
  diffuseColor (const diffuseColor_type& x);

  void
  diffuseColor (::std::auto_ptr< diffuseColor_type > p);

  static const diffuseColor_type&
  diffuseColor_default_value ();

  // emissiveColor
  // 
  typedef ::SFColor emissiveColor_type;
  typedef ::xsd::cxx::tree::traits< emissiveColor_type, char > emissiveColor_traits;

  const emissiveColor_type&
  emissiveColor () const;

  emissiveColor_type&
  emissiveColor ();

  void
  emissiveColor (const emissiveColor_type& x);

  void
  emissiveColor (::std::auto_ptr< emissiveColor_type > p);

  static const emissiveColor_type&
  emissiveColor_default_value ();

  // shininess
  // 
  typedef ::shininess shininess_type;
  typedef ::xsd::cxx::tree::traits< shininess_type, char > shininess_traits;

  const shininess_type&
  shininess () const;

  shininess_type&
  shininess ();

  void
  shininess (const shininess_type& x);

  void
  shininess (::std::auto_ptr< shininess_type > p);

  static const shininess_type&
  shininess_default_value ();

  // specularColor
  // 
  typedef ::SFColor specularColor_type;
  typedef ::xsd::cxx::tree::traits< specularColor_type, char > specularColor_traits;

  const specularColor_type&
  specularColor () const;

  specularColor_type&
  specularColor ();

  void
  specularColor (const specularColor_type& x);

  void
  specularColor (::std::auto_ptr< specularColor_type > p);

  static const specularColor_type&
  specularColor_default_value ();

  // transparency
  // 
  typedef ::transparency transparency_type;
  typedef ::xsd::cxx::tree::traits< transparency_type, char > transparency_traits;

  const transparency_type&
  transparency () const;

  transparency_type&
  transparency ();

  void
  transparency (const transparency_type& x);

  void
  transparency (::std::auto_ptr< transparency_type > p);

  static const transparency_type&
  transparency_default_value ();

  // Constructors.
  //
  Material ();

  Material (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  Material (const Material& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual Material*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Material ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ambientIntensity_type > ambientIntensity_;
  static const ambientIntensity_type ambientIntensity_default_value_;
  ::xsd::cxx::tree::one< diffuseColor_type > diffuseColor_;
  static const diffuseColor_type diffuseColor_default_value_;
  ::xsd::cxx::tree::one< emissiveColor_type > emissiveColor_;
  static const emissiveColor_type emissiveColor_default_value_;
  ::xsd::cxx::tree::one< shininess_type > shininess_;
  static const shininess_type shininess_default_value_;
  ::xsd::cxx::tree::one< specularColor_type > specularColor_;
  static const specularColor_type specularColor_default_value_;
  ::xsd::cxx::tree::one< transparency_type > transparency_;
  static const transparency_type transparency_default_value_;
};

class MetadataDouble: public ::X3DMetadataObject
{
  public:
  // value
  // 
  typedef ::MFDouble value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  MetadataDouble ();

  MetadataDouble (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  MetadataDouble (const MetadataDouble& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual MetadataDouble*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MetadataDouble ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  value_optional value_;
};

class MetadataFloat: public ::X3DMetadataObject
{
  public:
  // value
  // 
  typedef ::MFFloat value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  MetadataFloat ();

  MetadataFloat (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  MetadataFloat (const MetadataFloat& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual MetadataFloat*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MetadataFloat ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  value_optional value_;
};

class MetadataInteger: public ::X3DMetadataObject
{
  public:
  // value
  // 
  typedef ::MFInt32 value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  MetadataInteger ();

  MetadataInteger (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  MetadataInteger (const MetadataInteger& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual MetadataInteger*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MetadataInteger ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  value_optional value_;
};

class MetadataSet: public ::SceneGraphStructureNodeType
{
  public:
  // IS
  // 
  typedef ::IS IS_type;
  typedef ::xsd::cxx::tree::optional< IS_type > IS_optional;
  typedef ::xsd::cxx::tree::traits< IS_type, char > IS_traits;

  const IS_optional&
  IS () const;

  IS_optional&
  IS ();

  void
  IS (const IS_type& x);

  void
  IS (const IS_optional& x);

  void
  IS (::std::auto_ptr< IS_type > p);

  // MetadataDouble
  // 
  typedef ::MetadataDouble MetadataDouble_type;
  typedef ::xsd::cxx::tree::sequence< MetadataDouble_type > MetadataDouble_sequence;
  typedef MetadataDouble_sequence::iterator MetadataDouble_iterator;
  typedef MetadataDouble_sequence::const_iterator MetadataDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataDouble_type, char > MetadataDouble_traits;

  const MetadataDouble_sequence&
  MetadataDouble () const;

  MetadataDouble_sequence&
  MetadataDouble ();

  void
  MetadataDouble (const MetadataDouble_sequence& s);

  // MetadataFloat
  // 
  typedef ::MetadataFloat MetadataFloat_type;
  typedef ::xsd::cxx::tree::sequence< MetadataFloat_type > MetadataFloat_sequence;
  typedef MetadataFloat_sequence::iterator MetadataFloat_iterator;
  typedef MetadataFloat_sequence::const_iterator MetadataFloat_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataFloat_type, char > MetadataFloat_traits;

  const MetadataFloat_sequence&
  MetadataFloat () const;

  MetadataFloat_sequence&
  MetadataFloat ();

  void
  MetadataFloat (const MetadataFloat_sequence& s);

  // MetadataInteger
  // 
  typedef ::MetadataInteger MetadataInteger_type;
  typedef ::xsd::cxx::tree::sequence< MetadataInteger_type > MetadataInteger_sequence;
  typedef MetadataInteger_sequence::iterator MetadataInteger_iterator;
  typedef MetadataInteger_sequence::const_iterator MetadataInteger_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataInteger_type, char > MetadataInteger_traits;

  const MetadataInteger_sequence&
  MetadataInteger () const;

  MetadataInteger_sequence&
  MetadataInteger ();

  void
  MetadataInteger (const MetadataInteger_sequence& s);

  // MetadataSet
  // 
  typedef ::MetadataSet MetadataSet1_type;
  typedef ::xsd::cxx::tree::sequence< MetadataSet1_type > MetadataSet1_sequence;
  typedef MetadataSet1_sequence::iterator MetadataSet1_iterator;
  typedef MetadataSet1_sequence::const_iterator MetadataSet1_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataSet1_type, char > MetadataSet1_traits;

  const MetadataSet1_sequence&
  MetadataSet1 () const;

  MetadataSet1_sequence&
  MetadataSet1 ();

  void
  MetadataSet1 (const MetadataSet1_sequence& s);

  // MetadataString
  // 
  typedef ::MetadataString MetadataString_type;
  typedef ::xsd::cxx::tree::sequence< MetadataString_type > MetadataString_sequence;
  typedef MetadataString_sequence::iterator MetadataString_iterator;
  typedef MetadataString_sequence::const_iterator MetadataString_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataString_type, char > MetadataString_traits;

  const MetadataString_sequence&
  MetadataString () const;

  MetadataString_sequence&
  MetadataString ();

  void
  MetadataString (const MetadataString_sequence& s);

  // DEF
  // 
  typedef ::xml_schema::id DEF_type;
  typedef ::xsd::cxx::tree::optional< DEF_type > DEF_optional;
  typedef ::xsd::cxx::tree::traits< DEF_type, char > DEF_traits;

  const DEF_optional&
  DEF () const;

  DEF_optional&
  DEF ();

  void
  DEF (const DEF_type& x);

  void
  DEF (const DEF_optional& x);

  void
  DEF (::std::auto_ptr< DEF_type > p);

  // USE
  // 
  typedef ::xml_schema::idref USE_type;
  typedef ::xsd::cxx::tree::optional< USE_type > USE_optional;
  typedef ::xsd::cxx::tree::traits< USE_type, char > USE_traits;

  const USE_optional&
  USE () const;

  USE_optional&
  USE ();

  void
  USE (const USE_type& x);

  void
  USE (const USE_optional& x);

  void
  USE (::std::auto_ptr< USE_type > p);

  // class
  // 
  typedef ::xml_schema::nmtoken class_type;
  typedef ::xsd::cxx::tree::optional< class_type > class_optional;
  typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

  const class_optional&
  class_ () const;

  class_optional&
  class_ ();

  void
  class_ (const class_type& x);

  void
  class_ (const class_optional& x);

  void
  class_ (::std::auto_ptr< class_type > p);

  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // reference
  // 
  typedef ::SFString reference_type;
  typedef ::xsd::cxx::tree::optional< reference_type > reference_optional;
  typedef ::xsd::cxx::tree::traits< reference_type, char > reference_traits;

  const reference_optional&
  reference () const;

  reference_optional&
  reference ();

  void
  reference (const reference_type& x);

  void
  reference (const reference_optional& x);

  void
  reference (::std::auto_ptr< reference_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  MetadataSet ();

  MetadataSet (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  MetadataSet (const MetadataSet& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual MetadataSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MetadataSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  IS_optional IS_;
  MetadataDouble_sequence MetadataDouble_;
  MetadataFloat_sequence MetadataFloat_;
  MetadataInteger_sequence MetadataInteger_;
  MetadataSet1_sequence MetadataSet1_;
  MetadataString_sequence MetadataString_;
  DEF_optional DEF_;
  USE_optional USE_;
  class_optional class__;
  name_optional name_;
  reference_optional reference_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class MetadataString: public ::X3DMetadataObject
{
  public:
  // value
  // 
  typedef ::MFString value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  MetadataString ();

  MetadataString (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  MetadataString (const MetadataString& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual MetadataString*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MetadataString ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  value_optional value_;
};

class MovieTexture: public ::X3DSoundSourceNode
{
  public:
  // description
  // 
  typedef ::SFString description_type;
  typedef ::xsd::cxx::tree::optional< description_type > description_optional;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_optional&
  description () const;

  description_optional&
  description ();

  void
  description (const description_type& x);

  void
  description (const description_optional& x);

  void
  description (::std::auto_ptr< description_type > p);

  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // repeatS
  // 
  typedef ::SFBool repeatS_type;
  typedef ::xsd::cxx::tree::traits< repeatS_type, char > repeatS_traits;

  const repeatS_type&
  repeatS () const;

  repeatS_type&
  repeatS ();

  void
  repeatS (const repeatS_type& x);

  void
  repeatS (::std::auto_ptr< repeatS_type > p);

  static const repeatS_type&
  repeatS_default_value ();

  // repeatT
  // 
  typedef ::SFBool repeatT_type;
  typedef ::xsd::cxx::tree::traits< repeatT_type, char > repeatT_traits;

  const repeatT_type&
  repeatT () const;

  repeatT_type&
  repeatT ();

  void
  repeatT (const repeatT_type& x);

  void
  repeatT (::std::auto_ptr< repeatT_type > p);

  static const repeatT_type&
  repeatT_default_value ();

  // speed
  // 
  typedef ::SFFloat speed_type;
  typedef ::xsd::cxx::tree::traits< speed_type, char > speed_traits;

  const speed_type&
  speed () const;

  speed_type&
  speed ();

  void
  speed (const speed_type& x);

  void
  speed (::std::auto_ptr< speed_type > p);

  static const speed_type&
  speed_default_value ();

  // Constructors.
  //
  MovieTexture ();

  MovieTexture (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  MovieTexture (const MovieTexture& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual MovieTexture*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MovieTexture ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  description_optional description_;
  url_optional url_;
  ::xsd::cxx::tree::one< repeatS_type > repeatS_;
  static const repeatS_type repeatS_default_value_;
  ::xsd::cxx::tree::one< repeatT_type > repeatT_;
  static const repeatT_type repeatT_default_value_;
  ::xsd::cxx::tree::one< speed_type > speed_;
  static const speed_type speed_default_value_;
};

class MultiTexture: public ::X3DTextureNode
{
  public:
  // ImageTexture
  // 
  typedef ::ImageTexture ImageTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageTexture_type > ImageTexture_sequence;
  typedef ImageTexture_sequence::iterator ImageTexture_iterator;
  typedef ImageTexture_sequence::const_iterator ImageTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageTexture_type, char > ImageTexture_traits;

  const ImageTexture_sequence&
  ImageTexture () const;

  ImageTexture_sequence&
  ImageTexture ();

  void
  ImageTexture (const ImageTexture_sequence& s);

  // MovieTexture
  // 
  typedef ::MovieTexture MovieTexture_type;
  typedef ::xsd::cxx::tree::sequence< MovieTexture_type > MovieTexture_sequence;
  typedef MovieTexture_sequence::iterator MovieTexture_iterator;
  typedef MovieTexture_sequence::const_iterator MovieTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MovieTexture_type, char > MovieTexture_traits;

  const MovieTexture_sequence&
  MovieTexture () const;

  MovieTexture_sequence&
  MovieTexture ();

  void
  MovieTexture (const MovieTexture_sequence& s);

  // PixelTexture
  // 
  typedef ::PixelTexture PixelTexture_type;
  typedef ::xsd::cxx::tree::sequence< PixelTexture_type > PixelTexture_sequence;
  typedef PixelTexture_sequence::iterator PixelTexture_iterator;
  typedef PixelTexture_sequence::const_iterator PixelTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< PixelTexture_type, char > PixelTexture_traits;

  const PixelTexture_sequence&
  PixelTexture () const;

  PixelTexture_sequence&
  PixelTexture ();

  void
  PixelTexture (const PixelTexture_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // alpha
  // 
  typedef ::SFFloat alpha_type;
  typedef ::xsd::cxx::tree::traits< alpha_type, char > alpha_traits;

  const alpha_type&
  alpha () const;

  alpha_type&
  alpha ();

  void
  alpha (const alpha_type& x);

  void
  alpha (::std::auto_ptr< alpha_type > p);

  static const alpha_type&
  alpha_default_value ();

  // color
  // 
  typedef ::SFColor color_type;
  typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

  const color_type&
  color () const;

  color_type&
  color ();

  void
  color (const color_type& x);

  void
  color (::std::auto_ptr< color_type > p);

  static const color_type&
  color_default_value ();

  // function
  // 
  typedef ::MFString function_type;
  typedef ::xsd::cxx::tree::optional< function_type > function_optional;
  typedef ::xsd::cxx::tree::traits< function_type, char > function_traits;

  const function_optional&
  function () const;

  function_optional&
  function ();

  void
  function (const function_type& x);

  void
  function (const function_optional& x);

  void
  function (::std::auto_ptr< function_type > p);

  // mode
  // 
  typedef ::MFString mode_type;
  typedef ::xsd::cxx::tree::optional< mode_type > mode_optional;
  typedef ::xsd::cxx::tree::traits< mode_type, char > mode_traits;

  const mode_optional&
  mode () const;

  mode_optional&
  mode ();

  void
  mode (const mode_type& x);

  void
  mode (const mode_optional& x);

  void
  mode (::std::auto_ptr< mode_type > p);

  // source
  // 
  typedef ::MFString source_type;
  typedef ::xsd::cxx::tree::optional< source_type > source_optional;
  typedef ::xsd::cxx::tree::traits< source_type, char > source_traits;

  const source_optional&
  source () const;

  source_optional&
  source ();

  void
  source (const source_type& x);

  void
  source (const source_optional& x);

  void
  source (::std::auto_ptr< source_type > p);

  // transparent
  // 
  typedef ::SFBool transparent_type;
  typedef ::xsd::cxx::tree::traits< transparent_type, char > transparent_traits;

  const transparent_type&
  transparent () const;

  transparent_type&
  transparent ();

  void
  transparent (const transparent_type& x);

  void
  transparent (::std::auto_ptr< transparent_type > p);

  static const transparent_type&
  transparent_default_value ();

  // Constructors.
  //
  MultiTexture ();

  MultiTexture (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  MultiTexture (const MultiTexture& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual MultiTexture*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MultiTexture ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ImageTexture_sequence ImageTexture_;
  MovieTexture_sequence MovieTexture_;
  PixelTexture_sequence PixelTexture_;
  ProtoInstance_sequence ProtoInstance_;
  ::xsd::cxx::tree::one< alpha_type > alpha_;
  static const alpha_type alpha_default_value_;
  ::xsd::cxx::tree::one< color_type > color_;
  static const color_type color_default_value_;
  function_optional function_;
  mode_optional mode_;
  source_optional source_;
  ::xsd::cxx::tree::one< transparent_type > transparent_;
  static const transparent_type transparent_default_value_;
};

class MultiTextureCoordinate: public ::X3DTextureCoordinateNode
{
  public:
  // Constructors.
  //
  MultiTextureCoordinate ();

  MultiTextureCoordinate (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  MultiTextureCoordinate (const MultiTextureCoordinate& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual MultiTextureCoordinate*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MultiTextureCoordinate ();
};

class MultiTextureTransform: public ::X3DTextureTransformNode
{
  public:
  // TextureTransform
  // 
  typedef ::TextureTransform TextureTransform_type;
  typedef ::xsd::cxx::tree::sequence< TextureTransform_type > TextureTransform_sequence;
  typedef TextureTransform_sequence::iterator TextureTransform_iterator;
  typedef TextureTransform_sequence::const_iterator TextureTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureTransform_type, char > TextureTransform_traits;

  const TextureTransform_sequence&
  TextureTransform () const;

  TextureTransform_sequence&
  TextureTransform ();

  void
  TextureTransform (const TextureTransform_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Constructors.
  //
  MultiTextureTransform ();

  MultiTextureTransform (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  MultiTextureTransform (const MultiTextureTransform& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual MultiTextureTransform*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MultiTextureTransform ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  TextureTransform_sequence TextureTransform_;
  ProtoInstance_sequence ProtoInstance_;
};

class NavigationInfo: public ::X3DBindableNode
{
  public:
  // avatarSize
  // 
  typedef ::MFFloat avatarSize_type;
  typedef ::xsd::cxx::tree::traits< avatarSize_type, char > avatarSize_traits;

  const avatarSize_type&
  avatarSize () const;

  avatarSize_type&
  avatarSize ();

  void
  avatarSize (const avatarSize_type& x);

  void
  avatarSize (::std::auto_ptr< avatarSize_type > p);

  static const avatarSize_type&
  avatarSize_default_value ();

  // headlight
  // 
  typedef ::SFBool headlight_type;
  typedef ::xsd::cxx::tree::traits< headlight_type, char > headlight_traits;

  const headlight_type&
  headlight () const;

  headlight_type&
  headlight ();

  void
  headlight (const headlight_type& x);

  void
  headlight (::std::auto_ptr< headlight_type > p);

  static const headlight_type&
  headlight_default_value ();

  // speed
  // 
  typedef ::SFFloat speed_type;
  typedef ::xsd::cxx::tree::traits< speed_type, char > speed_traits;

  const speed_type&
  speed () const;

  speed_type&
  speed ();

  void
  speed (const speed_type& x);

  void
  speed (::std::auto_ptr< speed_type > p);

  static const speed_type&
  speed_default_value ();

  // type
  // 
  typedef ::MFString type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  static const type_type&
  type_default_value ();

  // transitionType
  // 
  typedef ::MFString transitionType_type;
  typedef ::xsd::cxx::tree::traits< transitionType_type, char > transitionType_traits;

  const transitionType_type&
  transitionType () const;

  transitionType_type&
  transitionType ();

  void
  transitionType (const transitionType_type& x);

  void
  transitionType (::std::auto_ptr< transitionType_type > p);

  static const transitionType_type&
  transitionType_default_value ();

  // transitionTime
  // 
  typedef ::MFFloat transitionTime_type;
  typedef ::xsd::cxx::tree::traits< transitionTime_type, char > transitionTime_traits;

  const transitionTime_type&
  transitionTime () const;

  transitionTime_type&
  transitionTime ();

  void
  transitionTime (const transitionTime_type& x);

  void
  transitionTime (::std::auto_ptr< transitionTime_type > p);

  static const transitionTime_type&
  transitionTime_default_value ();

  // visibilityLimit
  // 
  typedef ::SFFloat visibilityLimit_type;
  typedef ::xsd::cxx::tree::traits< visibilityLimit_type, char > visibilityLimit_traits;

  const visibilityLimit_type&
  visibilityLimit () const;

  visibilityLimit_type&
  visibilityLimit ();

  void
  visibilityLimit (const visibilityLimit_type& x);

  void
  visibilityLimit (::std::auto_ptr< visibilityLimit_type > p);

  static const visibilityLimit_type&
  visibilityLimit_default_value ();

  // Constructors.
  //
  NavigationInfo ();

  NavigationInfo (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  NavigationInfo (const NavigationInfo& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual NavigationInfo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NavigationInfo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< avatarSize_type > avatarSize_;
  static const avatarSize_type avatarSize_default_value_;
  ::xsd::cxx::tree::one< headlight_type > headlight_;
  static const headlight_type headlight_default_value_;
  ::xsd::cxx::tree::one< speed_type > speed_;
  static const speed_type speed_default_value_;
  ::xsd::cxx::tree::one< type_type > type_;
  static const type_type type_default_value_;
  ::xsd::cxx::tree::one< transitionType_type > transitionType_;
  static const transitionType_type transitionType_default_value_;
  ::xsd::cxx::tree::one< transitionTime_type > transitionTime_;
  static const transitionTime_type transitionTime_default_value_;
  ::xsd::cxx::tree::one< visibilityLimit_type > visibilityLimit_;
  static const visibilityLimit_type visibilityLimit_default_value_;
};

class Normal: public ::X3DNormalNode
{
  public:
  // vector
  // 
  typedef ::MFVec3f vector_type;
  typedef ::xsd::cxx::tree::optional< vector_type > vector_optional;
  typedef ::xsd::cxx::tree::traits< vector_type, char > vector_traits;

  const vector_optional&
  vector () const;

  vector_optional&
  vector ();

  void
  vector (const vector_type& x);

  void
  vector (const vector_optional& x);

  void
  vector (::std::auto_ptr< vector_type > p);

  // Constructors.
  //
  Normal ();

  Normal (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Normal (const Normal& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Normal*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Normal ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  vector_optional vector_;
};

class NormalInterpolator: public ::X3DInterpolatorNode
{
  public:
  // keyValue
  // 
  typedef ::MFVec3f keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  NormalInterpolator ();

  NormalInterpolator (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  NormalInterpolator (const NormalInterpolator& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual NormalInterpolator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NormalInterpolator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  keyValue_optional keyValue_;
};

class OrientationInterpolator: public ::X3DInterpolatorNode
{
  public:
  // keyValue
  // 
  typedef ::MFRotation keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  OrientationInterpolator ();

  OrientationInterpolator (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  OrientationInterpolator (const OrientationInterpolator& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual OrientationInterpolator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OrientationInterpolator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  keyValue_optional keyValue_;
};

class PixelTexture: public ::X3DTexture2DNode
{
  public:
  // image
  // 
  typedef ::SFImage image_type;
  typedef ::xsd::cxx::tree::traits< image_type, char > image_traits;

  const image_type&
  image () const;

  image_type&
  image ();

  void
  image (const image_type& x);

  void
  image (::std::auto_ptr< image_type > p);

  static const image_type&
  image_default_value ();

  // Constructors.
  //
  PixelTexture ();

  PixelTexture (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  PixelTexture (const PixelTexture& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual PixelTexture*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PixelTexture ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< image_type > image_;
  static const image_type image_default_value_;
};

class PlaneSensor: public ::X3DDragSensorNode
{
  public:
  // maxPosition
  // 
  typedef ::SFVec2f maxPosition_type;
  typedef ::xsd::cxx::tree::traits< maxPosition_type, char > maxPosition_traits;

  const maxPosition_type&
  maxPosition () const;

  maxPosition_type&
  maxPosition ();

  void
  maxPosition (const maxPosition_type& x);

  void
  maxPosition (::std::auto_ptr< maxPosition_type > p);

  static const maxPosition_type&
  maxPosition_default_value ();

  // minPosition
  // 
  typedef ::SFVec2f minPosition_type;
  typedef ::xsd::cxx::tree::traits< minPosition_type, char > minPosition_traits;

  const minPosition_type&
  minPosition () const;

  minPosition_type&
  minPosition ();

  void
  minPosition (const minPosition_type& x);

  void
  minPosition (::std::auto_ptr< minPosition_type > p);

  static const minPosition_type&
  minPosition_default_value ();

  // offset
  // 
  typedef ::SFVec3f offset_type;
  typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

  const offset_type&
  offset () const;

  offset_type&
  offset ();

  void
  offset (const offset_type& x);

  void
  offset (::std::auto_ptr< offset_type > p);

  static const offset_type&
  offset_default_value ();

  // Constructors.
  //
  PlaneSensor ();

  PlaneSensor (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  PlaneSensor (const PlaneSensor& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual PlaneSensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PlaneSensor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< maxPosition_type > maxPosition_;
  static const maxPosition_type maxPosition_default_value_;
  ::xsd::cxx::tree::one< minPosition_type > minPosition_;
  static const minPosition_type minPosition_default_value_;
  ::xsd::cxx::tree::one< offset_type > offset_;
  static const offset_type offset_default_value_;
};

class PointLight: public ::X3DLightNode
{
  public:
  // attenuation
  // 
  typedef ::SFVec3f attenuation_type;
  typedef ::xsd::cxx::tree::traits< attenuation_type, char > attenuation_traits;

  const attenuation_type&
  attenuation () const;

  attenuation_type&
  attenuation ();

  void
  attenuation (const attenuation_type& x);

  void
  attenuation (::std::auto_ptr< attenuation_type > p);

  static const attenuation_type&
  attenuation_default_value ();

  // location
  // 
  typedef ::SFVec3f location_type;
  typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

  const location_type&
  location () const;

  location_type&
  location ();

  void
  location (const location_type& x);

  void
  location (::std::auto_ptr< location_type > p);

  static const location_type&
  location_default_value ();

  // radius
  // 
  typedef ::radius4 radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  void
  radius (::std::auto_ptr< radius_type > p);

  static const radius_type&
  radius_default_value ();

  // global
  // 
  typedef ::SFBool global_type;
  typedef ::xsd::cxx::tree::traits< global_type, char > global_traits;

  const global_type&
  global () const;

  global_type&
  global ();

  void
  global (const global_type& x);

  void
  global (::std::auto_ptr< global_type > p);

  static const global_type&
  global_default_value ();

  // Constructors.
  //
  PointLight ();

  PointLight (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  PointLight (const PointLight& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual PointLight*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PointLight ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< attenuation_type > attenuation_;
  static const attenuation_type attenuation_default_value_;
  ::xsd::cxx::tree::one< location_type > location_;
  static const location_type location_default_value_;
  ::xsd::cxx::tree::one< radius_type > radius_;
  static const radius_type radius_default_value_;
  ::xsd::cxx::tree::one< global_type > global_;
  static const global_type global_default_value_;
};

class PointSet: public ::X3DGeometryNode
{
  public:
  // Color
  // 
  typedef ::Color Color_type;
  typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
  typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

  const Color_optional&
  Color () const;

  Color_optional&
  Color ();

  void
  Color (const Color_type& x);

  void
  Color (const Color_optional& x);

  void
  Color (::std::auto_ptr< Color_type > p);

  // ColorRGBA
  // 
  typedef ::ColorRGBA ColorRGBA_type;
  typedef ::xsd::cxx::tree::optional< ColorRGBA_type > ColorRGBA_optional;
  typedef ::xsd::cxx::tree::traits< ColorRGBA_type, char > ColorRGBA_traits;

  const ColorRGBA_optional&
  ColorRGBA () const;

  ColorRGBA_optional&
  ColorRGBA ();

  void
  ColorRGBA (const ColorRGBA_type& x);

  void
  ColorRGBA (const ColorRGBA_optional& x);

  void
  ColorRGBA (::std::auto_ptr< ColorRGBA_type > p);

  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::optional< Coordinate_type > Coordinate_optional;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_optional&
  Coordinate () const;

  Coordinate_optional&
  Coordinate ();

  void
  Coordinate (const Coordinate_type& x);

  void
  Coordinate (const Coordinate_optional& x);

  void
  Coordinate (::std::auto_ptr< Coordinate_type > p);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::optional< CoordinateDouble_type > CoordinateDouble_optional;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_optional&
  CoordinateDouble () const;

  CoordinateDouble_optional&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_type& x);

  void
  CoordinateDouble (const CoordinateDouble_optional& x);

  void
  CoordinateDouble (::std::auto_ptr< CoordinateDouble_type > p);

  // GeoCoordinate
  // 
  typedef ::GeoCoordinate GeoCoordinate_type;
  typedef ::xsd::cxx::tree::optional< GeoCoordinate_type > GeoCoordinate_optional;
  typedef ::xsd::cxx::tree::traits< GeoCoordinate_type, char > GeoCoordinate_traits;

  const GeoCoordinate_optional&
  GeoCoordinate () const;

  GeoCoordinate_optional&
  GeoCoordinate ();

  void
  GeoCoordinate (const GeoCoordinate_type& x);

  void
  GeoCoordinate (const GeoCoordinate_optional& x);

  void
  GeoCoordinate (::std::auto_ptr< GeoCoordinate_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Constructors.
  //
  PointSet ();

  PointSet (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  PointSet (const PointSet& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual PointSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PointSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Color_optional Color_;
  ColorRGBA_optional ColorRGBA_;
  Coordinate_optional Coordinate_;
  CoordinateDouble_optional CoordinateDouble_;
  GeoCoordinate_optional GeoCoordinate_;
  ProtoInstance_sequence ProtoInstance_;
};

class Polyline2D: public ::X3DGeometryNode
{
  public:
  // lineSegments
  // 
  typedef ::MFVec2f lineSegments_type;
  typedef ::xsd::cxx::tree::optional< lineSegments_type > lineSegments_optional;
  typedef ::xsd::cxx::tree::traits< lineSegments_type, char > lineSegments_traits;

  const lineSegments_optional&
  lineSegments () const;

  lineSegments_optional&
  lineSegments ();

  void
  lineSegments (const lineSegments_type& x);

  void
  lineSegments (const lineSegments_optional& x);

  void
  lineSegments (::std::auto_ptr< lineSegments_type > p);

  // Constructors.
  //
  Polyline2D ();

  Polyline2D (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  Polyline2D (const Polyline2D& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual Polyline2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Polyline2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  lineSegments_optional lineSegments_;
};

class Polypoint2D: public ::X3DGeometryNode
{
  public:
  // point
  // 
  typedef ::MFVec2f point_type;
  typedef ::xsd::cxx::tree::optional< point_type > point_optional;
  typedef ::xsd::cxx::tree::traits< point_type, char > point_traits;

  const point_optional&
  point () const;

  point_optional&
  point ();

  void
  point (const point_type& x);

  void
  point (const point_optional& x);

  void
  point (::std::auto_ptr< point_type > p);

  // Constructors.
  //
  Polypoint2D ();

  Polypoint2D (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  Polypoint2D (const Polypoint2D& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual Polypoint2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Polypoint2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  point_optional point_;
};

class PositionInterpolator: public ::X3DInterpolatorNode
{
  public:
  // keyValue
  // 
  typedef ::MFVec3f keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  PositionInterpolator ();

  PositionInterpolator (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  PositionInterpolator (const PositionInterpolator& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual PositionInterpolator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PositionInterpolator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  keyValue_optional keyValue_;
};

class PositionInterpolator2D: public ::X3DInterpolatorNode
{
  public:
  // keyValue
  // 
  typedef ::MFVec2f keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  PositionInterpolator2D ();

  PositionInterpolator2D (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  PositionInterpolator2D (const PositionInterpolator2D& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual PositionInterpolator2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PositionInterpolator2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  keyValue_optional keyValue_;
};

class ProximitySensor: public ::X3DEnvironmentalSensorNode
{
  public:
  // Constructors.
  //
  ProximitySensor ();

  ProximitySensor (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  ProximitySensor (const ProximitySensor& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual ProximitySensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ProximitySensor ();
};

class Rectangle2D: public ::X3DGeometryNode
{
  public:
  // size
  // 
  typedef ::SFVec2f size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  static const size_type&
  size_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  Rectangle2D ();

  Rectangle2D (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  Rectangle2D (const Rectangle2D& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual Rectangle2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Rectangle2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< size_type > size_;
  static const size_type size_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class ScalarInterpolator: public ::X3DInterpolatorNode
{
  public:
  // keyValue
  // 
  typedef ::MFFloat keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  ScalarInterpolator ();

  ScalarInterpolator (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  ScalarInterpolator (const ScalarInterpolator& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual ScalarInterpolator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ScalarInterpolator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  keyValue_optional keyValue_;
};

class Script: public ::X3DScriptNode
{
  public:
  // directOutput
  // 
  typedef ::SFBool directOutput_type;
  typedef ::xsd::cxx::tree::traits< directOutput_type, char > directOutput_traits;

  const directOutput_type&
  directOutput () const;

  directOutput_type&
  directOutput ();

  void
  directOutput (const directOutput_type& x);

  void
  directOutput (::std::auto_ptr< directOutput_type > p);

  static const directOutput_type&
  directOutput_default_value ();

  // mustEvaluate
  // 
  typedef ::SFBool mustEvaluate_type;
  typedef ::xsd::cxx::tree::traits< mustEvaluate_type, char > mustEvaluate_traits;

  const mustEvaluate_type&
  mustEvaluate () const;

  mustEvaluate_type&
  mustEvaluate ();

  void
  mustEvaluate (const mustEvaluate_type& x);

  void
  mustEvaluate (::std::auto_ptr< mustEvaluate_type > p);

  static const mustEvaluate_type&
  mustEvaluate_default_value ();

  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // Constructors.
  //
  Script ();

  Script (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Script (const Script& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Script*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Script ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< directOutput_type > directOutput_;
  static const directOutput_type directOutput_default_value_;
  ::xsd::cxx::tree::one< mustEvaluate_type > mustEvaluate_;
  static const mustEvaluate_type mustEvaluate_default_value_;
  url_optional url_;
};

class Shape: public ::X3DShapeNode
{
  public:
  // Constructors.
  //
  Shape ();

  Shape (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Shape (const Shape& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Shape*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Shape ();
};

class Sound: public ::X3DSoundNode
{
  public:
  // direction
  // 
  typedef ::SFVec3f direction_type;
  typedef ::xsd::cxx::tree::traits< direction_type, char > direction_traits;

  const direction_type&
  direction () const;

  direction_type&
  direction ();

  void
  direction (const direction_type& x);

  void
  direction (::std::auto_ptr< direction_type > p);

  static const direction_type&
  direction_default_value ();

  // intensity
  // 
  typedef ::SFFloat intensity_type;
  typedef ::xsd::cxx::tree::traits< intensity_type, char > intensity_traits;

  const intensity_type&
  intensity () const;

  intensity_type&
  intensity ();

  void
  intensity (const intensity_type& x);

  void
  intensity (::std::auto_ptr< intensity_type > p);

  static const intensity_type&
  intensity_default_value ();

  // location
  // 
  typedef ::SFVec3f location_type;
  typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

  const location_type&
  location () const;

  location_type&
  location ();

  void
  location (const location_type& x);

  void
  location (::std::auto_ptr< location_type > p);

  static const location_type&
  location_default_value ();

  // maxBack
  // 
  typedef ::SFFloat maxBack_type;
  typedef ::xsd::cxx::tree::traits< maxBack_type, char > maxBack_traits;

  const maxBack_type&
  maxBack () const;

  maxBack_type&
  maxBack ();

  void
  maxBack (const maxBack_type& x);

  void
  maxBack (::std::auto_ptr< maxBack_type > p);

  static const maxBack_type&
  maxBack_default_value ();

  // maxFront
  // 
  typedef ::SFFloat maxFront_type;
  typedef ::xsd::cxx::tree::traits< maxFront_type, char > maxFront_traits;

  const maxFront_type&
  maxFront () const;

  maxFront_type&
  maxFront ();

  void
  maxFront (const maxFront_type& x);

  void
  maxFront (::std::auto_ptr< maxFront_type > p);

  static const maxFront_type&
  maxFront_default_value ();

  // minBack
  // 
  typedef ::SFFloat minBack_type;
  typedef ::xsd::cxx::tree::traits< minBack_type, char > minBack_traits;

  const minBack_type&
  minBack () const;

  minBack_type&
  minBack ();

  void
  minBack (const minBack_type& x);

  void
  minBack (::std::auto_ptr< minBack_type > p);

  static const minBack_type&
  minBack_default_value ();

  // minFront
  // 
  typedef ::SFFloat minFront_type;
  typedef ::xsd::cxx::tree::traits< minFront_type, char > minFront_traits;

  const minFront_type&
  minFront () const;

  minFront_type&
  minFront ();

  void
  minFront (const minFront_type& x);

  void
  minFront (::std::auto_ptr< minFront_type > p);

  static const minFront_type&
  minFront_default_value ();

  // priority
  // 
  typedef ::SFFloat priority_type;
  typedef ::xsd::cxx::tree::traits< priority_type, char > priority_traits;

  const priority_type&
  priority () const;

  priority_type&
  priority ();

  void
  priority (const priority_type& x);

  void
  priority (::std::auto_ptr< priority_type > p);

  static const priority_type&
  priority_default_value ();

  // spatialize
  // 
  typedef ::SFBool spatialize_type;
  typedef ::xsd::cxx::tree::traits< spatialize_type, char > spatialize_traits;

  const spatialize_type&
  spatialize () const;

  spatialize_type&
  spatialize ();

  void
  spatialize (const spatialize_type& x);

  void
  spatialize (::std::auto_ptr< spatialize_type > p);

  static const spatialize_type&
  spatialize_default_value ();

  // Constructors.
  //
  Sound ();

  Sound (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Sound (const Sound& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Sound*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Sound ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< direction_type > direction_;
  static const direction_type direction_default_value_;
  ::xsd::cxx::tree::one< intensity_type > intensity_;
  static const intensity_type intensity_default_value_;
  ::xsd::cxx::tree::one< location_type > location_;
  static const location_type location_default_value_;
  ::xsd::cxx::tree::one< maxBack_type > maxBack_;
  static const maxBack_type maxBack_default_value_;
  ::xsd::cxx::tree::one< maxFront_type > maxFront_;
  static const maxFront_type maxFront_default_value_;
  ::xsd::cxx::tree::one< minBack_type > minBack_;
  static const minBack_type minBack_default_value_;
  ::xsd::cxx::tree::one< minFront_type > minFront_;
  static const minFront_type minFront_default_value_;
  ::xsd::cxx::tree::one< priority_type > priority_;
  static const priority_type priority_default_value_;
  ::xsd::cxx::tree::one< spatialize_type > spatialize_;
  static const spatialize_type spatialize_default_value_;
};

class Sphere: public ::X3DGeometryNode
{
  public:
  // radius
  // 
  typedef ::radius5 radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  void
  radius (::std::auto_ptr< radius_type > p);

  static const radius_type&
  radius_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  Sphere ();

  Sphere (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Sphere (const Sphere& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Sphere*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Sphere ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< radius_type > radius_;
  static const radius_type radius_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class SphereSensor: public ::X3DDragSensorNode
{
  public:
  // offset
  // 
  typedef ::SFRotation offset_type;
  typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

  const offset_type&
  offset () const;

  offset_type&
  offset ();

  void
  offset (const offset_type& x);

  void
  offset (::std::auto_ptr< offset_type > p);

  static const offset_type&
  offset_default_value ();

  // Constructors.
  //
  SphereSensor ();

  SphereSensor (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  SphereSensor (const SphereSensor& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual SphereSensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SphereSensor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< offset_type > offset_;
  static const offset_type offset_default_value_;
};

class SpotLight: public ::X3DLightNode
{
  public:
  // attenuation
  // 
  typedef ::SFVec3f attenuation_type;
  typedef ::xsd::cxx::tree::traits< attenuation_type, char > attenuation_traits;

  const attenuation_type&
  attenuation () const;

  attenuation_type&
  attenuation ();

  void
  attenuation (const attenuation_type& x);

  void
  attenuation (::std::auto_ptr< attenuation_type > p);

  static const attenuation_type&
  attenuation_default_value ();

  // beamWidth
  // 
  typedef ::beamWidth beamWidth_type;
  typedef ::xsd::cxx::tree::traits< beamWidth_type, char > beamWidth_traits;

  const beamWidth_type&
  beamWidth () const;

  beamWidth_type&
  beamWidth ();

  void
  beamWidth (const beamWidth_type& x);

  void
  beamWidth (::std::auto_ptr< beamWidth_type > p);

  static const beamWidth_type&
  beamWidth_default_value ();

  // cutOffAngle
  // 
  typedef ::SFFloat cutOffAngle_type;
  typedef ::xsd::cxx::tree::traits< cutOffAngle_type, char > cutOffAngle_traits;

  const cutOffAngle_type&
  cutOffAngle () const;

  cutOffAngle_type&
  cutOffAngle ();

  void
  cutOffAngle (const cutOffAngle_type& x);

  void
  cutOffAngle (::std::auto_ptr< cutOffAngle_type > p);

  static const cutOffAngle_type&
  cutOffAngle_default_value ();

  // direction
  // 
  typedef ::SFVec3f direction_type;
  typedef ::xsd::cxx::tree::traits< direction_type, char > direction_traits;

  const direction_type&
  direction () const;

  direction_type&
  direction ();

  void
  direction (const direction_type& x);

  void
  direction (::std::auto_ptr< direction_type > p);

  static const direction_type&
  direction_default_value ();

  // location
  // 
  typedef ::SFVec3f location_type;
  typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

  const location_type&
  location () const;

  location_type&
  location ();

  void
  location (const location_type& x);

  void
  location (::std::auto_ptr< location_type > p);

  static const location_type&
  location_default_value ();

  // radius
  // 
  typedef ::radius6 radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  void
  radius (::std::auto_ptr< radius_type > p);

  static const radius_type&
  radius_default_value ();

  // global
  // 
  typedef ::SFBool global_type;
  typedef ::xsd::cxx::tree::traits< global_type, char > global_traits;

  const global_type&
  global () const;

  global_type&
  global ();

  void
  global (const global_type& x);

  void
  global (::std::auto_ptr< global_type > p);

  static const global_type&
  global_default_value ();

  // Constructors.
  //
  SpotLight ();

  SpotLight (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  SpotLight (const SpotLight& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual SpotLight*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SpotLight ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< attenuation_type > attenuation_;
  static const attenuation_type attenuation_default_value_;
  ::xsd::cxx::tree::one< beamWidth_type > beamWidth_;
  static const beamWidth_type beamWidth_default_value_;
  ::xsd::cxx::tree::one< cutOffAngle_type > cutOffAngle_;
  static const cutOffAngle_type cutOffAngle_default_value_;
  ::xsd::cxx::tree::one< direction_type > direction_;
  static const direction_type direction_default_value_;
  ::xsd::cxx::tree::one< location_type > location_;
  static const location_type location_default_value_;
  ::xsd::cxx::tree::one< radius_type > radius_;
  static const radius_type radius_default_value_;
  ::xsd::cxx::tree::one< global_type > global_;
  static const global_type global_default_value_;
};

class StaticGroup: public ::X3DGroupingNode
{
  public:
  // Constructors.
  //
  StaticGroup ();

  StaticGroup (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  StaticGroup (const StaticGroup& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual StaticGroup*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~StaticGroup ();
};

class StringSensor: public ::X3DKeyDeviceSensorNode
{
  public:
  // deletionAllowed
  // 
  typedef ::SFBool deletionAllowed_type;
  typedef ::xsd::cxx::tree::traits< deletionAllowed_type, char > deletionAllowed_traits;

  const deletionAllowed_type&
  deletionAllowed () const;

  deletionAllowed_type&
  deletionAllowed ();

  void
  deletionAllowed (const deletionAllowed_type& x);

  void
  deletionAllowed (::std::auto_ptr< deletionAllowed_type > p);

  static const deletionAllowed_type&
  deletionAllowed_default_value ();

  // Constructors.
  //
  StringSensor ();

  StringSensor (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  StringSensor (const StringSensor& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual StringSensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~StringSensor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< deletionAllowed_type > deletionAllowed_;
  static const deletionAllowed_type deletionAllowed_default_value_;
};

class Switch: public ::X3DGroupingNode
{
  public:
  // whichChoice
  // 
  typedef ::SFInt32 whichChoice_type;
  typedef ::xsd::cxx::tree::traits< whichChoice_type, char > whichChoice_traits;

  const whichChoice_type&
  whichChoice () const;

  whichChoice_type&
  whichChoice ();

  void
  whichChoice (const whichChoice_type& x);

  void
  whichChoice (::std::auto_ptr< whichChoice_type > p);

  static const whichChoice_type&
  whichChoice_default_value ();

  // Constructors.
  //
  Switch ();

  Switch (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Switch (const Switch& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Switch*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Switch ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< whichChoice_type > whichChoice_;
  static const whichChoice_type whichChoice_default_value_;
};

class Text: public ::X3DGeometryNode
{
  public:
  // FontStyle
  // 
  typedef ::FontStyle FontStyle_type;
  typedef ::xsd::cxx::tree::optional< FontStyle_type > FontStyle_optional;
  typedef ::xsd::cxx::tree::traits< FontStyle_type, char > FontStyle_traits;

  const FontStyle_optional&
  FontStyle () const;

  FontStyle_optional&
  FontStyle ();

  void
  FontStyle (const FontStyle_type& x);

  void
  FontStyle (const FontStyle_optional& x);

  void
  FontStyle (::std::auto_ptr< FontStyle_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::optional< ProtoInstance_type > ProtoInstance_optional;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_optional&
  ProtoInstance () const;

  ProtoInstance_optional&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_type& x);

  void
  ProtoInstance (const ProtoInstance_optional& x);

  void
  ProtoInstance (::std::auto_ptr< ProtoInstance_type > p);

  // string
  // 
  typedef ::MFString string_type;
  typedef ::xsd::cxx::tree::optional< string_type > string_optional;
  typedef ::xsd::cxx::tree::traits< string_type, char > string_traits;

  const string_optional&
  string () const;

  string_optional&
  string ();

  void
  string (const string_type& x);

  void
  string (const string_optional& x);

  void
  string (::std::auto_ptr< string_type > p);

  // length
  // 
  typedef ::MFFloat length_type;
  typedef ::xsd::cxx::tree::optional< length_type > length_optional;
  typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

  const length_optional&
  length () const;

  length_optional&
  length ();

  void
  length (const length_type& x);

  void
  length (const length_optional& x);

  void
  length (::std::auto_ptr< length_type > p);

  // maxExtent
  // 
  typedef ::maxExtent maxExtent_type;
  typedef ::xsd::cxx::tree::traits< maxExtent_type, char > maxExtent_traits;

  const maxExtent_type&
  maxExtent () const;

  maxExtent_type&
  maxExtent ();

  void
  maxExtent (const maxExtent_type& x);

  void
  maxExtent (::std::auto_ptr< maxExtent_type > p);

  static const maxExtent_type&
  maxExtent_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  Text ();

  Text (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  Text (const Text& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual Text*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Text ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  FontStyle_optional FontStyle_;
  ProtoInstance_optional ProtoInstance_;
  string_optional string_;
  length_optional length_;
  ::xsd::cxx::tree::one< maxExtent_type > maxExtent_;
  static const maxExtent_type maxExtent_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class TextureBackground: public ::X3DBackgroundNode
{
  public:
  // ImageTexture
  // 
  typedef ::ImageTexture ImageTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageTexture_type > ImageTexture_sequence;
  typedef ImageTexture_sequence::iterator ImageTexture_iterator;
  typedef ImageTexture_sequence::const_iterator ImageTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageTexture_type, char > ImageTexture_traits;

  const ImageTexture_sequence&
  ImageTexture () const;

  ImageTexture_sequence&
  ImageTexture ();

  void
  ImageTexture (const ImageTexture_sequence& s);

  // MovieTexture
  // 
  typedef ::MovieTexture MovieTexture_type;
  typedef ::xsd::cxx::tree::sequence< MovieTexture_type > MovieTexture_sequence;
  typedef MovieTexture_sequence::iterator MovieTexture_iterator;
  typedef MovieTexture_sequence::const_iterator MovieTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MovieTexture_type, char > MovieTexture_traits;

  const MovieTexture_sequence&
  MovieTexture () const;

  MovieTexture_sequence&
  MovieTexture ();

  void
  MovieTexture (const MovieTexture_sequence& s);

  // MultiTexture
  // 
  typedef ::MultiTexture MultiTexture_type;
  typedef ::xsd::cxx::tree::sequence< MultiTexture_type > MultiTexture_sequence;
  typedef MultiTexture_sequence::iterator MultiTexture_iterator;
  typedef MultiTexture_sequence::const_iterator MultiTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTexture_type, char > MultiTexture_traits;

  const MultiTexture_sequence&
  MultiTexture () const;

  MultiTexture_sequence&
  MultiTexture ();

  void
  MultiTexture (const MultiTexture_sequence& s);

  // PixelTexture
  // 
  typedef ::PixelTexture PixelTexture_type;
  typedef ::xsd::cxx::tree::sequence< PixelTexture_type > PixelTexture_sequence;
  typedef PixelTexture_sequence::iterator PixelTexture_iterator;
  typedef PixelTexture_sequence::const_iterator PixelTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< PixelTexture_type, char > PixelTexture_traits;

  const PixelTexture_sequence&
  PixelTexture () const;

  PixelTexture_sequence&
  PixelTexture ();

  void
  PixelTexture (const PixelTexture_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // transparency
  // 
  typedef ::MFFloat transparency_type;
  typedef ::xsd::cxx::tree::traits< transparency_type, char > transparency_traits;

  const transparency_type&
  transparency () const;

  transparency_type&
  transparency ();

  void
  transparency (const transparency_type& x);

  void
  transparency (::std::auto_ptr< transparency_type > p);

  static const transparency_type&
  transparency_default_value ();

  // Constructors.
  //
  TextureBackground ();

  TextureBackground (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  TextureBackground (const TextureBackground& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual TextureBackground*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TextureBackground ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ImageTexture_sequence ImageTexture_;
  MovieTexture_sequence MovieTexture_;
  MultiTexture_sequence MultiTexture_;
  PixelTexture_sequence PixelTexture_;
  ProtoInstance_sequence ProtoInstance_;
  ::xsd::cxx::tree::one< transparency_type > transparency_;
  static const transparency_type transparency_default_value_;
};

class TextureCoordinate: public ::X3DTextureCoordinateNode
{
  public:
  // point
  // 
  typedef ::MFVec2f point_type;
  typedef ::xsd::cxx::tree::optional< point_type > point_optional;
  typedef ::xsd::cxx::tree::traits< point_type, char > point_traits;

  const point_optional&
  point () const;

  point_optional&
  point ();

  void
  point (const point_type& x);

  void
  point (const point_optional& x);

  void
  point (::std::auto_ptr< point_type > p);

  // Constructors.
  //
  TextureCoordinate ();

  TextureCoordinate (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  TextureCoordinate (const TextureCoordinate& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual TextureCoordinate*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TextureCoordinate ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  point_optional point_;
};

class TextureCoordinateGenerator: public ::X3DTextureCoordinateNode
{
  public:
  // mode
  // 
  typedef ::SFString mode_type;
  typedef ::xsd::cxx::tree::traits< mode_type, char > mode_traits;

  const mode_type&
  mode () const;

  mode_type&
  mode ();

  void
  mode (const mode_type& x);

  void
  mode (::std::auto_ptr< mode_type > p);

  static const mode_type&
  mode_default_value ();

  // parameter
  // 
  typedef ::MFFloat parameter_type;
  typedef ::xsd::cxx::tree::optional< parameter_type > parameter_optional;
  typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

  const parameter_optional&
  parameter () const;

  parameter_optional&
  parameter ();

  void
  parameter (const parameter_type& x);

  void
  parameter (const parameter_optional& x);

  void
  parameter (::std::auto_ptr< parameter_type > p);

  // Constructors.
  //
  TextureCoordinateGenerator ();

  TextureCoordinateGenerator (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  TextureCoordinateGenerator (const TextureCoordinateGenerator& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  virtual TextureCoordinateGenerator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TextureCoordinateGenerator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< mode_type > mode_;
  static const mode_type mode_default_value_;
  parameter_optional parameter_;
};

class TextureTransform: public ::X3DTextureTransform2DNode
{
  public:
  // Constructors.
  //
  TextureTransform ();

  TextureTransform (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  TextureTransform (const TextureTransform& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual TextureTransform*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TextureTransform ();
};

class TimeSensor: public ::X3DTimeDependentNode
{
  public:
  // cycleInterval
  // 
  typedef ::SFTime cycleInterval_type;
  typedef ::xsd::cxx::tree::traits< cycleInterval_type, char > cycleInterval_traits;

  const cycleInterval_type&
  cycleInterval () const;

  cycleInterval_type&
  cycleInterval ();

  void
  cycleInterval (const cycleInterval_type& x);

  void
  cycleInterval (::std::auto_ptr< cycleInterval_type > p);

  static const cycleInterval_type&
  cycleInterval_default_value ();

  // enabled
  // 
  typedef ::SFBool enabled_type;
  typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

  const enabled_type&
  enabled () const;

  enabled_type&
  enabled ();

  void
  enabled (const enabled_type& x);

  void
  enabled (::std::auto_ptr< enabled_type > p);

  static const enabled_type&
  enabled_default_value ();

  // Constructors.
  //
  TimeSensor ();

  TimeSensor (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  TimeSensor (const TimeSensor& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual TimeSensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TimeSensor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< cycleInterval_type > cycleInterval_;
  static const cycleInterval_type cycleInterval_default_value_;
  ::xsd::cxx::tree::one< enabled_type > enabled_;
  static const enabled_type enabled_default_value_;
};

class TimeTrigger: public ::X3DChildNode
{
  public:
  // Constructors.
  //
  TimeTrigger ();

  TimeTrigger (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  TimeTrigger (const TimeTrigger& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual TimeTrigger*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TimeTrigger ();
};

class TouchSensor: public ::X3DTouchSensorNode
{
  public:
  // Constructors.
  //
  TouchSensor ();

  TouchSensor (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  TouchSensor (const TouchSensor& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual TouchSensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TouchSensor ();
};

class Transform: public ::X3DGroupingNode
{
  public:
  // center
  // 
  typedef ::SFVec3f center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::auto_ptr< center_type > p);

  static const center_type&
  center_default_value ();

  // rotation
  // 
  typedef ::SFRotation rotation_type;
  typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

  const rotation_type&
  rotation () const;

  rotation_type&
  rotation ();

  void
  rotation (const rotation_type& x);

  void
  rotation (::std::auto_ptr< rotation_type > p);

  static const rotation_type&
  rotation_default_value ();

  // scale
  // 
  typedef ::SFVec3f scale_type;
  typedef ::xsd::cxx::tree::traits< scale_type, char > scale_traits;

  const scale_type&
  scale () const;

  scale_type&
  scale ();

  void
  scale (const scale_type& x);

  void
  scale (::std::auto_ptr< scale_type > p);

  static const scale_type&
  scale_default_value ();

  // scaleOrientation
  // 
  typedef ::SFRotation scaleOrientation_type;
  typedef ::xsd::cxx::tree::traits< scaleOrientation_type, char > scaleOrientation_traits;

  const scaleOrientation_type&
  scaleOrientation () const;

  scaleOrientation_type&
  scaleOrientation ();

  void
  scaleOrientation (const scaleOrientation_type& x);

  void
  scaleOrientation (::std::auto_ptr< scaleOrientation_type > p);

  static const scaleOrientation_type&
  scaleOrientation_default_value ();

  // translation
  // 
  typedef ::SFVec3f translation_type;
  typedef ::xsd::cxx::tree::traits< translation_type, char > translation_traits;

  const translation_type&
  translation () const;

  translation_type&
  translation ();

  void
  translation (const translation_type& x);

  void
  translation (::std::auto_ptr< translation_type > p);

  static const translation_type&
  translation_default_value ();

  // Constructors.
  //
  Transform ();

  Transform (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  Transform (const Transform& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual Transform*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Transform ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< center_type > center_;
  static const center_type center_default_value_;
  ::xsd::cxx::tree::one< rotation_type > rotation_;
  static const rotation_type rotation_default_value_;
  ::xsd::cxx::tree::one< scale_type > scale_;
  static const scale_type scale_default_value_;
  ::xsd::cxx::tree::one< scaleOrientation_type > scaleOrientation_;
  static const scaleOrientation_type scaleOrientation_default_value_;
  ::xsd::cxx::tree::one< translation_type > translation_;
  static const translation_type translation_default_value_;
};

class TriangleFanSet: public ::X3DComposedGeometryNode
{
  public:
  // fanCount
  // 
  typedef ::MFInt32 fanCount_type;
  typedef ::xsd::cxx::tree::optional< fanCount_type > fanCount_optional;
  typedef ::xsd::cxx::tree::traits< fanCount_type, char > fanCount_traits;

  const fanCount_optional&
  fanCount () const;

  fanCount_optional&
  fanCount ();

  void
  fanCount (const fanCount_type& x);

  void
  fanCount (const fanCount_optional& x);

  void
  fanCount (::std::auto_ptr< fanCount_type > p);

  // Constructors.
  //
  TriangleFanSet ();

  TriangleFanSet (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  TriangleFanSet (const TriangleFanSet& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual TriangleFanSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TriangleFanSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  fanCount_optional fanCount_;
};

class TriangleSet: public ::X3DComposedGeometryNode
{
  public:
  // Constructors.
  //
  TriangleSet ();

  TriangleSet (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  TriangleSet (const TriangleSet& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual TriangleSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TriangleSet ();
};

class TriangleSet2D: public ::X3DGeometryNode
{
  public:
  // vertices
  // 
  typedef ::MFVec2f vertices_type;
  typedef ::xsd::cxx::tree::optional< vertices_type > vertices_optional;
  typedef ::xsd::cxx::tree::traits< vertices_type, char > vertices_traits;

  const vertices_optional&
  vertices () const;

  vertices_optional&
  vertices ();

  void
  vertices (const vertices_type& x);

  void
  vertices (const vertices_optional& x);

  void
  vertices (::std::auto_ptr< vertices_type > p);

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  TriangleSet2D ();

  TriangleSet2D (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  TriangleSet2D (const TriangleSet2D& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual TriangleSet2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TriangleSet2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  vertices_optional vertices_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class TriangleStripSet: public ::X3DComposedGeometryNode
{
  public:
  // stripCount
  // 
  typedef ::MFInt32 stripCount_type;
  typedef ::xsd::cxx::tree::optional< stripCount_type > stripCount_optional;
  typedef ::xsd::cxx::tree::traits< stripCount_type, char > stripCount_traits;

  const stripCount_optional&
  stripCount () const;

  stripCount_optional&
  stripCount ();

  void
  stripCount (const stripCount_type& x);

  void
  stripCount (const stripCount_optional& x);

  void
  stripCount (::std::auto_ptr< stripCount_type > p);

  // Constructors.
  //
  TriangleStripSet ();

  TriangleStripSet (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  TriangleStripSet (const TriangleStripSet& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual TriangleStripSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TriangleStripSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  stripCount_optional stripCount_;
};

class Viewpoint: public ::X3DBindableNode
{
  public:
  // fieldOfView
  // 
  typedef ::SFFloat fieldOfView_type;
  typedef ::xsd::cxx::tree::traits< fieldOfView_type, char > fieldOfView_traits;

  const fieldOfView_type&
  fieldOfView () const;

  fieldOfView_type&
  fieldOfView ();

  void
  fieldOfView (const fieldOfView_type& x);

  void
  fieldOfView (::std::auto_ptr< fieldOfView_type > p);

  static const fieldOfView_type&
  fieldOfView_default_value ();

  // jump
  // 
  typedef ::SFBool jump_type;
  typedef ::xsd::cxx::tree::traits< jump_type, char > jump_traits;

  const jump_type&
  jump () const;

  jump_type&
  jump ();

  void
  jump (const jump_type& x);

  void
  jump (::std::auto_ptr< jump_type > p);

  static const jump_type&
  jump_default_value ();

  // orientation
  // 
  typedef ::SFRotation orientation_type;
  typedef ::xsd::cxx::tree::traits< orientation_type, char > orientation_traits;

  const orientation_type&
  orientation () const;

  orientation_type&
  orientation ();

  void
  orientation (const orientation_type& x);

  void
  orientation (::std::auto_ptr< orientation_type > p);

  static const orientation_type&
  orientation_default_value ();

  // position
  // 
  typedef ::SFVec3f position_type;
  typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

  const position_type&
  position () const;

  position_type&
  position ();

  void
  position (const position_type& x);

  void
  position (::std::auto_ptr< position_type > p);

  static const position_type&
  position_default_value ();

  // description
  // 
  typedef ::SFString description_type;
  typedef ::xsd::cxx::tree::optional< description_type > description_optional;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_optional&
  description () const;

  description_optional&
  description ();

  void
  description (const description_type& x);

  void
  description (const description_optional& x);

  void
  description (::std::auto_ptr< description_type > p);

  // centerOfRotation
  // 
  typedef ::SFVec3f centerOfRotation_type;
  typedef ::xsd::cxx::tree::traits< centerOfRotation_type, char > centerOfRotation_traits;

  const centerOfRotation_type&
  centerOfRotation () const;

  centerOfRotation_type&
  centerOfRotation ();

  void
  centerOfRotation (const centerOfRotation_type& x);

  void
  centerOfRotation (::std::auto_ptr< centerOfRotation_type > p);

  static const centerOfRotation_type&
  centerOfRotation_default_value ();

  // Constructors.
  //
  Viewpoint ();

  Viewpoint (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  Viewpoint (const Viewpoint& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual Viewpoint*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Viewpoint ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< fieldOfView_type > fieldOfView_;
  static const fieldOfView_type fieldOfView_default_value_;
  ::xsd::cxx::tree::one< jump_type > jump_;
  static const jump_type jump_default_value_;
  ::xsd::cxx::tree::one< orientation_type > orientation_;
  static const orientation_type orientation_default_value_;
  ::xsd::cxx::tree::one< position_type > position_;
  static const position_type position_default_value_;
  description_optional description_;
  ::xsd::cxx::tree::one< centerOfRotation_type > centerOfRotation_;
  static const centerOfRotation_type centerOfRotation_default_value_;
};

class VisibilitySensor: public ::X3DEnvironmentalSensorNode
{
  public:
  // Constructors.
  //
  VisibilitySensor ();

  VisibilitySensor (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  VisibilitySensor (const VisibilitySensor& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual VisibilitySensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~VisibilitySensor ();
};

class WorldInfo: public ::X3DInfoNode
{
  public:
  // info
  // 
  typedef ::MFString info_type;
  typedef ::xsd::cxx::tree::optional< info_type > info_optional;
  typedef ::xsd::cxx::tree::traits< info_type, char > info_traits;

  const info_optional&
  info () const;

  info_optional&
  info ();

  void
  info (const info_type& x);

  void
  info (const info_optional& x);

  void
  info (::std::auto_ptr< info_type > p);

  // title
  // 
  typedef ::SFString title_type;
  typedef ::xsd::cxx::tree::optional< title_type > title_optional;
  typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

  const title_optional&
  title () const;

  title_optional&
  title ();

  void
  title (const title_type& x);

  void
  title (const title_optional& x);

  void
  title (::std::auto_ptr< title_type > p);

  // Constructors.
  //
  WorldInfo ();

  WorldInfo (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  WorldInfo (const WorldInfo& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual WorldInfo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~WorldInfo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  info_optional info_;
  title_optional title_;
};

class component: public ::SceneGraphStructureNodeType
{
  public:
  // name
  // 
  typedef ::componentNames name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // level
  // 
  typedef ::SFInt32 level_type;
  typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

  const level_type&
  level () const;

  level_type&
  level ();

  void
  level (const level_type& x);

  void
  level (::std::auto_ptr< level_type > p);

  // Constructors.
  //
  component (const name_type&,
             const level_type&);

  component (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  component (const component& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual component*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~component ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< level_type > level_;
};

class EXPORT: public ::SceneGraphStructureNodeType
{
  public:
  // localDEF
  // 
  typedef ::xml_schema::idref localDEF_type;
  typedef ::xsd::cxx::tree::traits< localDEF_type, char > localDEF_traits;

  const localDEF_type&
  localDEF () const;

  localDEF_type&
  localDEF ();

  void
  localDEF (const localDEF_type& x);

  void
  localDEF (::std::auto_ptr< localDEF_type > p);

  // AS
  // 
  typedef ::xml_schema::nmtoken AS_type;
  typedef ::xsd::cxx::tree::optional< AS_type > AS_optional;
  typedef ::xsd::cxx::tree::traits< AS_type, char > AS_traits;

  const AS_optional&
  AS () const;

  AS_optional&
  AS ();

  void
  AS (const AS_type& x);

  void
  AS (const AS_optional& x);

  void
  AS (::std::auto_ptr< AS_type > p);

  // Constructors.
  //
  EXPORT (const localDEF_type&);

  EXPORT (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  EXPORT (const EXPORT& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual EXPORT*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~EXPORT ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< localDEF_type > localDEF_;
  AS_optional AS_;
};

class IMPORT: public ::SceneGraphStructureNodeType
{
  public:
  // inlineDEF
  // 
  typedef ::xml_schema::idref inlineDEF_type;
  typedef ::xsd::cxx::tree::traits< inlineDEF_type, char > inlineDEF_traits;

  const inlineDEF_type&
  inlineDEF () const;

  inlineDEF_type&
  inlineDEF ();

  void
  inlineDEF (const inlineDEF_type& x);

  void
  inlineDEF (::std::auto_ptr< inlineDEF_type > p);

  // importedDEF
  // 
  typedef ::xml_schema::nmtoken importedDEF_type;
  typedef ::xsd::cxx::tree::traits< importedDEF_type, char > importedDEF_traits;

  const importedDEF_type&
  importedDEF () const;

  importedDEF_type&
  importedDEF ();

  void
  importedDEF (const importedDEF_type& x);

  void
  importedDEF (::std::auto_ptr< importedDEF_type > p);

  // AS
  // 
  typedef ::xml_schema::id AS_type;
  typedef ::xsd::cxx::tree::optional< AS_type > AS_optional;
  typedef ::xsd::cxx::tree::traits< AS_type, char > AS_traits;

  const AS_optional&
  AS () const;

  AS_optional&
  AS ();

  void
  AS (const AS_type& x);

  void
  AS (const AS_optional& x);

  void
  AS (::std::auto_ptr< AS_type > p);

  // Constructors.
  //
  IMPORT (const inlineDEF_type&,
          const importedDEF_type&);

  IMPORT (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  IMPORT (const IMPORT& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual IMPORT*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IMPORT ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< inlineDEF_type > inlineDEF_;
  ::xsd::cxx::tree::one< importedDEF_type > importedDEF_;
  AS_optional AS_;
};

class IS: public ::SceneGraphStructureNodeType
{
  public:
  // connect
  // 
  typedef ::connect connect_type;
  typedef ::xsd::cxx::tree::sequence< connect_type > connect_sequence;
  typedef connect_sequence::iterator connect_iterator;
  typedef connect_sequence::const_iterator connect_const_iterator;
  typedef ::xsd::cxx::tree::traits< connect_type, char > connect_traits;

  const connect_sequence&
  connect () const;

  connect_sequence&
  connect ();

  void
  connect (const connect_sequence& s);

  // Constructors.
  //
  IS ();

  IS (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f = 0,
      ::xml_schema::container* c = 0);

  IS (const IS& x,
      ::xml_schema::flags f = 0,
      ::xml_schema::container* c = 0);

  virtual IS*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IS ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  connect_sequence connect_;
};

class connect: public ::SceneGraphStructureNodeType
{
  public:
  // nodeField
  // 
  typedef ::xml_schema::nmtoken nodeField_type;
  typedef ::xsd::cxx::tree::traits< nodeField_type, char > nodeField_traits;

  const nodeField_type&
  nodeField () const;

  nodeField_type&
  nodeField ();

  void
  nodeField (const nodeField_type& x);

  void
  nodeField (::std::auto_ptr< nodeField_type > p);

  // protoField
  // 
  typedef ::xml_schema::nmtoken protoField_type;
  typedef ::xsd::cxx::tree::traits< protoField_type, char > protoField_traits;

  const protoField_type&
  protoField () const;

  protoField_type&
  protoField ();

  void
  protoField (const protoField_type& x);

  void
  protoField (::std::auto_ptr< protoField_type > p);

  // Constructors.
  //
  connect (const nodeField_type&,
           const protoField_type&);

  connect (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  connect (const connect& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual connect*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~connect ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< nodeField_type > nodeField_;
  ::xsd::cxx::tree::one< protoField_type > protoField_;
};

class field: public ::SceneGraphStructureNodeType
{
  public:
  // FillProperties
  // 
  typedef ::FillProperties FillProperties_type;
  typedef ::xsd::cxx::tree::sequence< FillProperties_type > FillProperties_sequence;
  typedef FillProperties_sequence::iterator FillProperties_iterator;
  typedef FillProperties_sequence::const_iterator FillProperties_const_iterator;
  typedef ::xsd::cxx::tree::traits< FillProperties_type, char > FillProperties_traits;

  const FillProperties_sequence&
  FillProperties () const;

  FillProperties_sequence&
  FillProperties ();

  void
  FillProperties (const FillProperties_sequence& s);

  // LineProperties
  // 
  typedef ::LineProperties LineProperties_type;
  typedef ::xsd::cxx::tree::sequence< LineProperties_type > LineProperties_sequence;
  typedef LineProperties_sequence::iterator LineProperties_iterator;
  typedef LineProperties_sequence::const_iterator LineProperties_const_iterator;
  typedef ::xsd::cxx::tree::traits< LineProperties_type, char > LineProperties_traits;

  const LineProperties_sequence&
  LineProperties () const;

  LineProperties_sequence&
  LineProperties ();

  void
  LineProperties (const LineProperties_sequence& s);

  // Material
  // 
  typedef ::Material Material_type;
  typedef ::xsd::cxx::tree::sequence< Material_type > Material_sequence;
  typedef Material_sequence::iterator Material_iterator;
  typedef Material_sequence::const_iterator Material_const_iterator;
  typedef ::xsd::cxx::tree::traits< Material_type, char > Material_traits;

  const Material_sequence&
  Material () const;

  Material_sequence&
  Material ();

  void
  Material (const Material_sequence& s);

  // ComposedShader
  // 
  typedef ::ComposedShader ComposedShader_type;
  typedef ::xsd::cxx::tree::sequence< ComposedShader_type > ComposedShader_sequence;
  typedef ComposedShader_sequence::iterator ComposedShader_iterator;
  typedef ComposedShader_sequence::const_iterator ComposedShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< ComposedShader_type, char > ComposedShader_traits;

  const ComposedShader_sequence&
  ComposedShader () const;

  ComposedShader_sequence&
  ComposedShader ();

  void
  ComposedShader (const ComposedShader_sequence& s);

  // PackagedShader
  // 
  typedef ::PackagedShader PackagedShader_type;
  typedef ::xsd::cxx::tree::sequence< PackagedShader_type > PackagedShader_sequence;
  typedef PackagedShader_sequence::iterator PackagedShader_iterator;
  typedef PackagedShader_sequence::const_iterator PackagedShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< PackagedShader_type, char > PackagedShader_traits;

  const PackagedShader_sequence&
  PackagedShader () const;

  PackagedShader_sequence&
  PackagedShader ();

  void
  PackagedShader (const PackagedShader_sequence& s);

  // ProgramShader
  // 
  typedef ::ProgramShader ProgramShader_type;
  typedef ::xsd::cxx::tree::sequence< ProgramShader_type > ProgramShader_sequence;
  typedef ProgramShader_sequence::iterator ProgramShader_iterator;
  typedef ProgramShader_sequence::const_iterator ProgramShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProgramShader_type, char > ProgramShader_traits;

  const ProgramShader_sequence&
  ProgramShader () const;

  ProgramShader_sequence&
  ProgramShader ();

  void
  ProgramShader (const ProgramShader_sequence& s);

  // ComposedCubeMapTexture
  // 
  typedef ::ComposedCubeMapTexture ComposedCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< ComposedCubeMapTexture_type > ComposedCubeMapTexture_sequence;
  typedef ComposedCubeMapTexture_sequence::iterator ComposedCubeMapTexture_iterator;
  typedef ComposedCubeMapTexture_sequence::const_iterator ComposedCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ComposedCubeMapTexture_type, char > ComposedCubeMapTexture_traits;

  const ComposedCubeMapTexture_sequence&
  ComposedCubeMapTexture () const;

  ComposedCubeMapTexture_sequence&
  ComposedCubeMapTexture ();

  void
  ComposedCubeMapTexture (const ComposedCubeMapTexture_sequence& s);

  // ImageTexture
  // 
  typedef ::ImageTexture ImageTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageTexture_type > ImageTexture_sequence;
  typedef ImageTexture_sequence::iterator ImageTexture_iterator;
  typedef ImageTexture_sequence::const_iterator ImageTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageTexture_type, char > ImageTexture_traits;

  const ImageTexture_sequence&
  ImageTexture () const;

  ImageTexture_sequence&
  ImageTexture ();

  void
  ImageTexture (const ImageTexture_sequence& s);

  // MovieTexture
  // 
  typedef ::MovieTexture MovieTexture_type;
  typedef ::xsd::cxx::tree::sequence< MovieTexture_type > MovieTexture_sequence;
  typedef MovieTexture_sequence::iterator MovieTexture_iterator;
  typedef MovieTexture_sequence::const_iterator MovieTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MovieTexture_type, char > MovieTexture_traits;

  const MovieTexture_sequence&
  MovieTexture () const;

  MovieTexture_sequence&
  MovieTexture ();

  void
  MovieTexture (const MovieTexture_sequence& s);

  // MultiTexture
  // 
  typedef ::MultiTexture MultiTexture_type;
  typedef ::xsd::cxx::tree::sequence< MultiTexture_type > MultiTexture_sequence;
  typedef MultiTexture_sequence::iterator MultiTexture_iterator;
  typedef MultiTexture_sequence::const_iterator MultiTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTexture_type, char > MultiTexture_traits;

  const MultiTexture_sequence&
  MultiTexture () const;

  MultiTexture_sequence&
  MultiTexture ();

  void
  MultiTexture (const MultiTexture_sequence& s);

  // PixelTexture
  // 
  typedef ::PixelTexture PixelTexture_type;
  typedef ::xsd::cxx::tree::sequence< PixelTexture_type > PixelTexture_sequence;
  typedef PixelTexture_sequence::iterator PixelTexture_iterator;
  typedef PixelTexture_sequence::const_iterator PixelTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< PixelTexture_type, char > PixelTexture_traits;

  const PixelTexture_sequence&
  PixelTexture () const;

  PixelTexture_sequence&
  PixelTexture ();

  void
  PixelTexture (const PixelTexture_sequence& s);

  // GeneratedCubeMapTexture
  // 
  typedef ::GeneratedCubeMapTexture GeneratedCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< GeneratedCubeMapTexture_type > GeneratedCubeMapTexture_sequence;
  typedef GeneratedCubeMapTexture_sequence::iterator GeneratedCubeMapTexture_iterator;
  typedef GeneratedCubeMapTexture_sequence::const_iterator GeneratedCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeneratedCubeMapTexture_type, char > GeneratedCubeMapTexture_traits;

  const GeneratedCubeMapTexture_sequence&
  GeneratedCubeMapTexture () const;

  GeneratedCubeMapTexture_sequence&
  GeneratedCubeMapTexture ();

  void
  GeneratedCubeMapTexture (const GeneratedCubeMapTexture_sequence& s);

  // ImageCubeMapTexture
  // 
  typedef ::ImageCubeMapTexture ImageCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageCubeMapTexture_type > ImageCubeMapTexture_sequence;
  typedef ImageCubeMapTexture_sequence::iterator ImageCubeMapTexture_iterator;
  typedef ImageCubeMapTexture_sequence::const_iterator ImageCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageCubeMapTexture_type, char > ImageCubeMapTexture_traits;

  const ImageCubeMapTexture_sequence&
  ImageCubeMapTexture () const;

  ImageCubeMapTexture_sequence&
  ImageCubeMapTexture ();

  void
  ImageCubeMapTexture (const ImageCubeMapTexture_sequence& s);

  // MultiTextureTransform
  // 
  typedef ::MultiTextureTransform MultiTextureTransform_type;
  typedef ::xsd::cxx::tree::sequence< MultiTextureTransform_type > MultiTextureTransform_sequence;
  typedef MultiTextureTransform_sequence::iterator MultiTextureTransform_iterator;
  typedef MultiTextureTransform_sequence::const_iterator MultiTextureTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTextureTransform_type, char > MultiTextureTransform_traits;

  const MultiTextureTransform_sequence&
  MultiTextureTransform () const;

  MultiTextureTransform_sequence&
  MultiTextureTransform ();

  void
  MultiTextureTransform (const MultiTextureTransform_sequence& s);

  // TextureTransform
  // 
  typedef ::TextureTransform TextureTransform_type;
  typedef ::xsd::cxx::tree::sequence< TextureTransform_type > TextureTransform_sequence;
  typedef TextureTransform_sequence::iterator TextureTransform_iterator;
  typedef TextureTransform_sequence::const_iterator TextureTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureTransform_type, char > TextureTransform_traits;

  const TextureTransform_sequence&
  TextureTransform () const;

  TextureTransform_sequence&
  TextureTransform ();

  void
  TextureTransform (const TextureTransform_sequence& s);

  // MetadataDouble
  // 
  typedef ::MetadataDouble MetadataDouble_type;
  typedef ::xsd::cxx::tree::sequence< MetadataDouble_type > MetadataDouble_sequence;
  typedef MetadataDouble_sequence::iterator MetadataDouble_iterator;
  typedef MetadataDouble_sequence::const_iterator MetadataDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataDouble_type, char > MetadataDouble_traits;

  const MetadataDouble_sequence&
  MetadataDouble () const;

  MetadataDouble_sequence&
  MetadataDouble ();

  void
  MetadataDouble (const MetadataDouble_sequence& s);

  // MetadataFloat
  // 
  typedef ::MetadataFloat MetadataFloat_type;
  typedef ::xsd::cxx::tree::sequence< MetadataFloat_type > MetadataFloat_sequence;
  typedef MetadataFloat_sequence::iterator MetadataFloat_iterator;
  typedef MetadataFloat_sequence::const_iterator MetadataFloat_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataFloat_type, char > MetadataFloat_traits;

  const MetadataFloat_sequence&
  MetadataFloat () const;

  MetadataFloat_sequence&
  MetadataFloat ();

  void
  MetadataFloat (const MetadataFloat_sequence& s);

  // MetadataInteger
  // 
  typedef ::MetadataInteger MetadataInteger_type;
  typedef ::xsd::cxx::tree::sequence< MetadataInteger_type > MetadataInteger_sequence;
  typedef MetadataInteger_sequence::iterator MetadataInteger_iterator;
  typedef MetadataInteger_sequence::const_iterator MetadataInteger_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataInteger_type, char > MetadataInteger_traits;

  const MetadataInteger_sequence&
  MetadataInteger () const;

  MetadataInteger_sequence&
  MetadataInteger ();

  void
  MetadataInteger (const MetadataInteger_sequence& s);

  // MetadataSet
  // 
  typedef ::MetadataSet MetadataSet_type;
  typedef ::xsd::cxx::tree::sequence< MetadataSet_type > MetadataSet_sequence;
  typedef MetadataSet_sequence::iterator MetadataSet_iterator;
  typedef MetadataSet_sequence::const_iterator MetadataSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataSet_type, char > MetadataSet_traits;

  const MetadataSet_sequence&
  MetadataSet () const;

  MetadataSet_sequence&
  MetadataSet ();

  void
  MetadataSet (const MetadataSet_sequence& s);

  // MetadataString
  // 
  typedef ::MetadataString MetadataString_type;
  typedef ::xsd::cxx::tree::sequence< MetadataString_type > MetadataString_sequence;
  typedef MetadataString_sequence::iterator MetadataString_iterator;
  typedef MetadataString_sequence::const_iterator MetadataString_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataString_type, char > MetadataString_traits;

  const MetadataString_sequence&
  MetadataString () const;

  MetadataString_sequence&
  MetadataString ();

  void
  MetadataString (const MetadataString_sequence& s);

  // Appearance
  // 
  typedef ::Appearance Appearance_type;
  typedef ::xsd::cxx::tree::sequence< Appearance_type > Appearance_sequence;
  typedef Appearance_sequence::iterator Appearance_iterator;
  typedef Appearance_sequence::const_iterator Appearance_const_iterator;
  typedef ::xsd::cxx::tree::traits< Appearance_type, char > Appearance_traits;

  const Appearance_sequence&
  Appearance () const;

  Appearance_sequence&
  Appearance ();

  void
  Appearance (const Appearance_sequence& s);

  // Background
  // 
  typedef ::Background Background_type;
  typedef ::xsd::cxx::tree::sequence< Background_type > Background_sequence;
  typedef Background_sequence::iterator Background_iterator;
  typedef Background_sequence::const_iterator Background_const_iterator;
  typedef ::xsd::cxx::tree::traits< Background_type, char > Background_traits;

  const Background_sequence&
  Background () const;

  Background_sequence&
  Background ();

  void
  Background (const Background_sequence& s);

  // ColorInterpolator
  // 
  typedef ::ColorInterpolator ColorInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ColorInterpolator_type > ColorInterpolator_sequence;
  typedef ColorInterpolator_sequence::iterator ColorInterpolator_iterator;
  typedef ColorInterpolator_sequence::const_iterator ColorInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorInterpolator_type, char > ColorInterpolator_traits;

  const ColorInterpolator_sequence&
  ColorInterpolator () const;

  ColorInterpolator_sequence&
  ColorInterpolator ();

  void
  ColorInterpolator (const ColorInterpolator_sequence& s);

  // CoordinateInterpolator
  // 
  typedef ::CoordinateInterpolator CoordinateInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator_type > CoordinateInterpolator_sequence;
  typedef CoordinateInterpolator_sequence::iterator CoordinateInterpolator_iterator;
  typedef CoordinateInterpolator_sequence::const_iterator CoordinateInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator_type, char > CoordinateInterpolator_traits;

  const CoordinateInterpolator_sequence&
  CoordinateInterpolator () const;

  CoordinateInterpolator_sequence&
  CoordinateInterpolator ();

  void
  CoordinateInterpolator (const CoordinateInterpolator_sequence& s);

  // DirectionalLight
  // 
  typedef ::DirectionalLight DirectionalLight_type;
  typedef ::xsd::cxx::tree::sequence< DirectionalLight_type > DirectionalLight_sequence;
  typedef DirectionalLight_sequence::iterator DirectionalLight_iterator;
  typedef DirectionalLight_sequence::const_iterator DirectionalLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< DirectionalLight_type, char > DirectionalLight_traits;

  const DirectionalLight_sequence&
  DirectionalLight () const;

  DirectionalLight_sequence&
  DirectionalLight ();

  void
  DirectionalLight (const DirectionalLight_sequence& s);

  // Group
  // 
  typedef ::Group Group_type;
  typedef ::xsd::cxx::tree::sequence< Group_type > Group_sequence;
  typedef Group_sequence::iterator Group_iterator;
  typedef Group_sequence::const_iterator Group_const_iterator;
  typedef ::xsd::cxx::tree::traits< Group_type, char > Group_traits;

  const Group_sequence&
  Group () const;

  Group_sequence&
  Group ();

  void
  Group (const Group_sequence& s);

  // NavigationInfo
  // 
  typedef ::NavigationInfo NavigationInfo_type;
  typedef ::xsd::cxx::tree::sequence< NavigationInfo_type > NavigationInfo_sequence;
  typedef NavigationInfo_sequence::iterator NavigationInfo_iterator;
  typedef NavigationInfo_sequence::const_iterator NavigationInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< NavigationInfo_type, char > NavigationInfo_traits;

  const NavigationInfo_sequence&
  NavigationInfo () const;

  NavigationInfo_sequence&
  NavigationInfo ();

  void
  NavigationInfo (const NavigationInfo_sequence& s);

  // NormalInterpolator
  // 
  typedef ::NormalInterpolator NormalInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NormalInterpolator_type > NormalInterpolator_sequence;
  typedef NormalInterpolator_sequence::iterator NormalInterpolator_iterator;
  typedef NormalInterpolator_sequence::const_iterator NormalInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NormalInterpolator_type, char > NormalInterpolator_traits;

  const NormalInterpolator_sequence&
  NormalInterpolator () const;

  NormalInterpolator_sequence&
  NormalInterpolator ();

  void
  NormalInterpolator (const NormalInterpolator_sequence& s);

  // OrientationInterpolator
  // 
  typedef ::OrientationInterpolator OrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< OrientationInterpolator_type > OrientationInterpolator_sequence;
  typedef OrientationInterpolator_sequence::iterator OrientationInterpolator_iterator;
  typedef OrientationInterpolator_sequence::const_iterator OrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< OrientationInterpolator_type, char > OrientationInterpolator_traits;

  const OrientationInterpolator_sequence&
  OrientationInterpolator () const;

  OrientationInterpolator_sequence&
  OrientationInterpolator ();

  void
  OrientationInterpolator (const OrientationInterpolator_sequence& s);

  // PositionInterpolator
  // 
  typedef ::PositionInterpolator PositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator_type > PositionInterpolator_sequence;
  typedef PositionInterpolator_sequence::iterator PositionInterpolator_iterator;
  typedef PositionInterpolator_sequence::const_iterator PositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator_type, char > PositionInterpolator_traits;

  const PositionInterpolator_sequence&
  PositionInterpolator () const;

  PositionInterpolator_sequence&
  PositionInterpolator ();

  void
  PositionInterpolator (const PositionInterpolator_sequence& s);

  // ScalarInterpolator
  // 
  typedef ::ScalarInterpolator ScalarInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ScalarInterpolator_type > ScalarInterpolator_sequence;
  typedef ScalarInterpolator_sequence::iterator ScalarInterpolator_iterator;
  typedef ScalarInterpolator_sequence::const_iterator ScalarInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ScalarInterpolator_type, char > ScalarInterpolator_traits;

  const ScalarInterpolator_sequence&
  ScalarInterpolator () const;

  ScalarInterpolator_sequence&
  ScalarInterpolator ();

  void
  ScalarInterpolator (const ScalarInterpolator_sequence& s);

  // Shape
  // 
  typedef ::Shape Shape_type;
  typedef ::xsd::cxx::tree::sequence< Shape_type > Shape_sequence;
  typedef Shape_sequence::iterator Shape_iterator;
  typedef Shape_sequence::const_iterator Shape_const_iterator;
  typedef ::xsd::cxx::tree::traits< Shape_type, char > Shape_traits;

  const Shape_sequence&
  Shape () const;

  Shape_sequence&
  Shape ();

  void
  Shape (const Shape_sequence& s);

  // TimeSensor
  // 
  typedef ::TimeSensor TimeSensor_type;
  typedef ::xsd::cxx::tree::sequence< TimeSensor_type > TimeSensor_sequence;
  typedef TimeSensor_sequence::iterator TimeSensor_iterator;
  typedef TimeSensor_sequence::const_iterator TimeSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeSensor_type, char > TimeSensor_traits;

  const TimeSensor_sequence&
  TimeSensor () const;

  TimeSensor_sequence&
  TimeSensor ();

  void
  TimeSensor (const TimeSensor_sequence& s);

  // Transform
  // 
  typedef ::Transform Transform_type;
  typedef ::xsd::cxx::tree::sequence< Transform_type > Transform_sequence;
  typedef Transform_sequence::iterator Transform_iterator;
  typedef Transform_sequence::const_iterator Transform_const_iterator;
  typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

  const Transform_sequence&
  Transform () const;

  Transform_sequence&
  Transform ();

  void
  Transform (const Transform_sequence& s);

  // Viewpoint
  // 
  typedef ::Viewpoint Viewpoint_type;
  typedef ::xsd::cxx::tree::sequence< Viewpoint_type > Viewpoint_sequence;
  typedef Viewpoint_sequence::iterator Viewpoint_iterator;
  typedef Viewpoint_sequence::const_iterator Viewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< Viewpoint_type, char > Viewpoint_traits;

  const Viewpoint_sequence&
  Viewpoint () const;

  Viewpoint_sequence&
  Viewpoint ();

  void
  Viewpoint (const Viewpoint_sequence& s);

  // WorldInfo
  // 
  typedef ::WorldInfo WorldInfo_type;
  typedef ::xsd::cxx::tree::sequence< WorldInfo_type > WorldInfo_sequence;
  typedef WorldInfo_sequence::iterator WorldInfo_iterator;
  typedef WorldInfo_sequence::const_iterator WorldInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< WorldInfo_type, char > WorldInfo_traits;

  const WorldInfo_sequence&
  WorldInfo () const;

  WorldInfo_sequence&
  WorldInfo ();

  void
  WorldInfo (const WorldInfo_sequence& s);

  // Anchor
  // 
  typedef ::Anchor Anchor_type;
  typedef ::xsd::cxx::tree::sequence< Anchor_type > Anchor_sequence;
  typedef Anchor_sequence::iterator Anchor_iterator;
  typedef Anchor_sequence::const_iterator Anchor_const_iterator;
  typedef ::xsd::cxx::tree::traits< Anchor_type, char > Anchor_traits;

  const Anchor_sequence&
  Anchor () const;

  Anchor_sequence&
  Anchor ();

  void
  Anchor (const Anchor_sequence& s);

  // BooleanFilter
  // 
  typedef ::BooleanFilter BooleanFilter_type;
  typedef ::xsd::cxx::tree::sequence< BooleanFilter_type > BooleanFilter_sequence;
  typedef BooleanFilter_sequence::iterator BooleanFilter_iterator;
  typedef BooleanFilter_sequence::const_iterator BooleanFilter_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanFilter_type, char > BooleanFilter_traits;

  const BooleanFilter_sequence&
  BooleanFilter () const;

  BooleanFilter_sequence&
  BooleanFilter ();

  void
  BooleanFilter (const BooleanFilter_sequence& s);

  // BooleanSequencer
  // 
  typedef ::BooleanSequencer BooleanSequencer_type;
  typedef ::xsd::cxx::tree::sequence< BooleanSequencer_type > BooleanSequencer_sequence;
  typedef BooleanSequencer_sequence::iterator BooleanSequencer_iterator;
  typedef BooleanSequencer_sequence::const_iterator BooleanSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanSequencer_type, char > BooleanSequencer_traits;

  const BooleanSequencer_sequence&
  BooleanSequencer () const;

  BooleanSequencer_sequence&
  BooleanSequencer ();

  void
  BooleanSequencer (const BooleanSequencer_sequence& s);

  // BooleanToggle
  // 
  typedef ::BooleanToggle BooleanToggle_type;
  typedef ::xsd::cxx::tree::sequence< BooleanToggle_type > BooleanToggle_sequence;
  typedef BooleanToggle_sequence::iterator BooleanToggle_iterator;
  typedef BooleanToggle_sequence::const_iterator BooleanToggle_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanToggle_type, char > BooleanToggle_traits;

  const BooleanToggle_sequence&
  BooleanToggle () const;

  BooleanToggle_sequence&
  BooleanToggle ();

  void
  BooleanToggle (const BooleanToggle_sequence& s);

  // BooleanTrigger
  // 
  typedef ::BooleanTrigger BooleanTrigger_type;
  typedef ::xsd::cxx::tree::sequence< BooleanTrigger_type > BooleanTrigger_sequence;
  typedef BooleanTrigger_sequence::iterator BooleanTrigger_iterator;
  typedef BooleanTrigger_sequence::const_iterator BooleanTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanTrigger_type, char > BooleanTrigger_traits;

  const BooleanTrigger_sequence&
  BooleanTrigger () const;

  BooleanTrigger_sequence&
  BooleanTrigger ();

  void
  BooleanTrigger (const BooleanTrigger_sequence& s);

  // CylinderSensor
  // 
  typedef ::CylinderSensor CylinderSensor_type;
  typedef ::xsd::cxx::tree::sequence< CylinderSensor_type > CylinderSensor_sequence;
  typedef CylinderSensor_sequence::iterator CylinderSensor_iterator;
  typedef CylinderSensor_sequence::const_iterator CylinderSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< CylinderSensor_type, char > CylinderSensor_traits;

  const CylinderSensor_sequence&
  CylinderSensor () const;

  CylinderSensor_sequence&
  CylinderSensor ();

  void
  CylinderSensor (const CylinderSensor_sequence& s);

  // Inline
  // 
  typedef ::Inline Inline_type;
  typedef ::xsd::cxx::tree::sequence< Inline_type > Inline_sequence;
  typedef Inline_sequence::iterator Inline_iterator;
  typedef Inline_sequence::const_iterator Inline_const_iterator;
  typedef ::xsd::cxx::tree::traits< Inline_type, char > Inline_traits;

  const Inline_sequence&
  Inline () const;

  Inline_sequence&
  Inline ();

  void
  Inline (const Inline_sequence& s);

  // IntegerSequencer
  // 
  typedef ::IntegerSequencer IntegerSequencer_type;
  typedef ::xsd::cxx::tree::sequence< IntegerSequencer_type > IntegerSequencer_sequence;
  typedef IntegerSequencer_sequence::iterator IntegerSequencer_iterator;
  typedef IntegerSequencer_sequence::const_iterator IntegerSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerSequencer_type, char > IntegerSequencer_traits;

  const IntegerSequencer_sequence&
  IntegerSequencer () const;

  IntegerSequencer_sequence&
  IntegerSequencer ();

  void
  IntegerSequencer (const IntegerSequencer_sequence& s);

  // IntegerTrigger
  // 
  typedef ::IntegerTrigger IntegerTrigger_type;
  typedef ::xsd::cxx::tree::sequence< IntegerTrigger_type > IntegerTrigger_sequence;
  typedef IntegerTrigger_sequence::iterator IntegerTrigger_iterator;
  typedef IntegerTrigger_sequence::const_iterator IntegerTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerTrigger_type, char > IntegerTrigger_traits;

  const IntegerTrigger_sequence&
  IntegerTrigger () const;

  IntegerTrigger_sequence&
  IntegerTrigger ();

  void
  IntegerTrigger (const IntegerTrigger_sequence& s);

  // KeySensor
  // 
  typedef ::KeySensor KeySensor_type;
  typedef ::xsd::cxx::tree::sequence< KeySensor_type > KeySensor_sequence;
  typedef KeySensor_sequence::iterator KeySensor_iterator;
  typedef KeySensor_sequence::const_iterator KeySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< KeySensor_type, char > KeySensor_traits;

  const KeySensor_sequence&
  KeySensor () const;

  KeySensor_sequence&
  KeySensor ();

  void
  KeySensor (const KeySensor_sequence& s);

  // PlaneSensor
  // 
  typedef ::PlaneSensor PlaneSensor_type;
  typedef ::xsd::cxx::tree::sequence< PlaneSensor_type > PlaneSensor_sequence;
  typedef PlaneSensor_sequence::iterator PlaneSensor_iterator;
  typedef PlaneSensor_sequence::const_iterator PlaneSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< PlaneSensor_type, char > PlaneSensor_traits;

  const PlaneSensor_sequence&
  PlaneSensor () const;

  PlaneSensor_sequence&
  PlaneSensor ();

  void
  PlaneSensor (const PlaneSensor_sequence& s);

  // PointLight
  // 
  typedef ::PointLight PointLight_type;
  typedef ::xsd::cxx::tree::sequence< PointLight_type > PointLight_sequence;
  typedef PointLight_sequence::iterator PointLight_iterator;
  typedef PointLight_sequence::const_iterator PointLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< PointLight_type, char > PointLight_traits;

  const PointLight_sequence&
  PointLight () const;

  PointLight_sequence&
  PointLight ();

  void
  PointLight (const PointLight_sequence& s);

  // ProximitySensor
  // 
  typedef ::ProximitySensor ProximitySensor_type;
  typedef ::xsd::cxx::tree::sequence< ProximitySensor_type > ProximitySensor_sequence;
  typedef ProximitySensor_sequence::iterator ProximitySensor_iterator;
  typedef ProximitySensor_sequence::const_iterator ProximitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProximitySensor_type, char > ProximitySensor_traits;

  const ProximitySensor_sequence&
  ProximitySensor () const;

  ProximitySensor_sequence&
  ProximitySensor ();

  void
  ProximitySensor (const ProximitySensor_sequence& s);

  // SphereSensor
  // 
  typedef ::SphereSensor SphereSensor_type;
  typedef ::xsd::cxx::tree::sequence< SphereSensor_type > SphereSensor_sequence;
  typedef SphereSensor_sequence::iterator SphereSensor_iterator;
  typedef SphereSensor_sequence::const_iterator SphereSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< SphereSensor_type, char > SphereSensor_traits;

  const SphereSensor_sequence&
  SphereSensor () const;

  SphereSensor_sequence&
  SphereSensor ();

  void
  SphereSensor (const SphereSensor_sequence& s);

  // SpotLight
  // 
  typedef ::SpotLight SpotLight_type;
  typedef ::xsd::cxx::tree::sequence< SpotLight_type > SpotLight_sequence;
  typedef SpotLight_sequence::iterator SpotLight_iterator;
  typedef SpotLight_sequence::const_iterator SpotLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< SpotLight_type, char > SpotLight_traits;

  const SpotLight_sequence&
  SpotLight () const;

  SpotLight_sequence&
  SpotLight ();

  void
  SpotLight (const SpotLight_sequence& s);

  // StringSensor
  // 
  typedef ::StringSensor StringSensor_type;
  typedef ::xsd::cxx::tree::sequence< StringSensor_type > StringSensor_sequence;
  typedef StringSensor_sequence::iterator StringSensor_iterator;
  typedef StringSensor_sequence::const_iterator StringSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< StringSensor_type, char > StringSensor_traits;

  const StringSensor_sequence&
  StringSensor () const;

  StringSensor_sequence&
  StringSensor ();

  void
  StringSensor (const StringSensor_sequence& s);

  // Switch
  // 
  typedef ::Switch Switch_type;
  typedef ::xsd::cxx::tree::sequence< Switch_type > Switch_sequence;
  typedef Switch_sequence::iterator Switch_iterator;
  typedef Switch_sequence::const_iterator Switch_const_iterator;
  typedef ::xsd::cxx::tree::traits< Switch_type, char > Switch_traits;

  const Switch_sequence&
  Switch () const;

  Switch_sequence&
  Switch ();

  void
  Switch (const Switch_sequence& s);

  // TimeTrigger
  // 
  typedef ::TimeTrigger TimeTrigger_type;
  typedef ::xsd::cxx::tree::sequence< TimeTrigger_type > TimeTrigger_sequence;
  typedef TimeTrigger_sequence::iterator TimeTrigger_iterator;
  typedef TimeTrigger_sequence::const_iterator TimeTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeTrigger_type, char > TimeTrigger_traits;

  const TimeTrigger_sequence&
  TimeTrigger () const;

  TimeTrigger_sequence&
  TimeTrigger ();

  void
  TimeTrigger (const TimeTrigger_sequence& s);

  // TouchSensor
  // 
  typedef ::TouchSensor TouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< TouchSensor_type > TouchSensor_sequence;
  typedef TouchSensor_sequence::iterator TouchSensor_iterator;
  typedef TouchSensor_sequence::const_iterator TouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TouchSensor_type, char > TouchSensor_traits;

  const TouchSensor_sequence&
  TouchSensor () const;

  TouchSensor_sequence&
  TouchSensor ();

  void
  TouchSensor (const TouchSensor_sequence& s);

  // AudioClip
  // 
  typedef ::AudioClip AudioClip_type;
  typedef ::xsd::cxx::tree::sequence< AudioClip_type > AudioClip_sequence;
  typedef AudioClip_sequence::iterator AudioClip_iterator;
  typedef AudioClip_sequence::const_iterator AudioClip_const_iterator;
  typedef ::xsd::cxx::tree::traits< AudioClip_type, char > AudioClip_traits;

  const AudioClip_sequence&
  AudioClip () const;

  AudioClip_sequence&
  AudioClip ();

  void
  AudioClip (const AudioClip_sequence& s);

  // Billboard
  // 
  typedef ::Billboard Billboard_type;
  typedef ::xsd::cxx::tree::sequence< Billboard_type > Billboard_sequence;
  typedef Billboard_sequence::iterator Billboard_iterator;
  typedef Billboard_sequence::const_iterator Billboard_const_iterator;
  typedef ::xsd::cxx::tree::traits< Billboard_type, char > Billboard_traits;

  const Billboard_sequence&
  Billboard () const;

  Billboard_sequence&
  Billboard ();

  void
  Billboard (const Billboard_sequence& s);

  // Collision
  // 
  typedef ::Collision Collision_type;
  typedef ::xsd::cxx::tree::sequence< Collision_type > Collision_sequence;
  typedef Collision_sequence::iterator Collision_iterator;
  typedef Collision_sequence::const_iterator Collision_const_iterator;
  typedef ::xsd::cxx::tree::traits< Collision_type, char > Collision_traits;

  const Collision_sequence&
  Collision () const;

  Collision_sequence&
  Collision ();

  void
  Collision (const Collision_sequence& s);

  // Fog
  // 
  typedef ::Fog Fog_type;
  typedef ::xsd::cxx::tree::sequence< Fog_type > Fog_sequence;
  typedef Fog_sequence::iterator Fog_iterator;
  typedef Fog_sequence::const_iterator Fog_const_iterator;
  typedef ::xsd::cxx::tree::traits< Fog_type, char > Fog_traits;

  const Fog_sequence&
  Fog () const;

  Fog_sequence&
  Fog ();

  void
  Fog (const Fog_sequence& s);

  // LoadSensor
  // 
  typedef ::LoadSensor LoadSensor_type;
  typedef ::xsd::cxx::tree::sequence< LoadSensor_type > LoadSensor_sequence;
  typedef LoadSensor_sequence::iterator LoadSensor_iterator;
  typedef LoadSensor_sequence::const_iterator LoadSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< LoadSensor_type, char > LoadSensor_traits;

  const LoadSensor_sequence&
  LoadSensor () const;

  LoadSensor_sequence&
  LoadSensor ();

  void
  LoadSensor (const LoadSensor_sequence& s);

  // LocalFog
  // 
  typedef ::LocalFog LocalFog_type;
  typedef ::xsd::cxx::tree::sequence< LocalFog_type > LocalFog_sequence;
  typedef LocalFog_sequence::iterator LocalFog_iterator;
  typedef LocalFog_sequence::const_iterator LocalFog_const_iterator;
  typedef ::xsd::cxx::tree::traits< LocalFog_type, char > LocalFog_traits;

  const LocalFog_sequence&
  LocalFog () const;

  LocalFog_sequence&
  LocalFog ();

  void
  LocalFog (const LocalFog_sequence& s);

  // LOD
  // 
  typedef ::LOD LOD_type;
  typedef ::xsd::cxx::tree::sequence< LOD_type > LOD_sequence;
  typedef LOD_sequence::iterator LOD_iterator;
  typedef LOD_sequence::const_iterator LOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOD_type, char > LOD_traits;

  const LOD_sequence&
  LOD () const;

  LOD_sequence&
  LOD ();

  void
  LOD (const LOD_sequence& s);

  // Script
  // 
  typedef ::Script Script_type;
  typedef ::xsd::cxx::tree::sequence< Script_type > Script_sequence;
  typedef Script_sequence::iterator Script_iterator;
  typedef Script_sequence::const_iterator Script_const_iterator;
  typedef ::xsd::cxx::tree::traits< Script_type, char > Script_traits;

  const Script_sequence&
  Script () const;

  Script_sequence&
  Script ();

  void
  Script (const Script_sequence& s);

  // Sound
  // 
  typedef ::Sound Sound_type;
  typedef ::xsd::cxx::tree::sequence< Sound_type > Sound_sequence;
  typedef Sound_sequence::iterator Sound_iterator;
  typedef Sound_sequence::const_iterator Sound_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sound_type, char > Sound_traits;

  const Sound_sequence&
  Sound () const;

  Sound_sequence&
  Sound ();

  void
  Sound (const Sound_sequence& s);

  // VisibilitySensor
  // 
  typedef ::VisibilitySensor VisibilitySensor_type;
  typedef ::xsd::cxx::tree::sequence< VisibilitySensor_type > VisibilitySensor_sequence;
  typedef VisibilitySensor_sequence::iterator VisibilitySensor_iterator;
  typedef VisibilitySensor_sequence::const_iterator VisibilitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< VisibilitySensor_type, char > VisibilitySensor_traits;

  const VisibilitySensor_sequence&
  VisibilitySensor () const;

  VisibilitySensor_sequence&
  VisibilitySensor ();

  void
  VisibilitySensor (const VisibilitySensor_sequence& s);

  // CoordinateInterpolator2D
  // 
  typedef ::CoordinateInterpolator2D CoordinateInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator2D_type > CoordinateInterpolator2D_sequence;
  typedef CoordinateInterpolator2D_sequence::iterator CoordinateInterpolator2D_iterator;
  typedef CoordinateInterpolator2D_sequence::const_iterator CoordinateInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator2D_type, char > CoordinateInterpolator2D_traits;

  const CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D () const;

  CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D ();

  void
  CoordinateInterpolator2D (const CoordinateInterpolator2D_sequence& s);

  // PositionInterpolator2D
  // 
  typedef ::PositionInterpolator2D PositionInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator2D_type > PositionInterpolator2D_sequence;
  typedef PositionInterpolator2D_sequence::iterator PositionInterpolator2D_iterator;
  typedef PositionInterpolator2D_sequence::const_iterator PositionInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator2D_type, char > PositionInterpolator2D_traits;

  const PositionInterpolator2D_sequence&
  PositionInterpolator2D () const;

  PositionInterpolator2D_sequence&
  PositionInterpolator2D ();

  void
  PositionInterpolator2D (const PositionInterpolator2D_sequence& s);

  // StaticGroup
  // 
  typedef ::StaticGroup StaticGroup_type;
  typedef ::xsd::cxx::tree::sequence< StaticGroup_type > StaticGroup_sequence;
  typedef StaticGroup_sequence::iterator StaticGroup_iterator;
  typedef StaticGroup_sequence::const_iterator StaticGroup_const_iterator;
  typedef ::xsd::cxx::tree::traits< StaticGroup_type, char > StaticGroup_traits;

  const StaticGroup_sequence&
  StaticGroup () const;

  StaticGroup_sequence&
  StaticGroup ();

  void
  StaticGroup (const StaticGroup_sequence& s);

  // CADAssembly
  // 
  typedef ::CADAssembly CADAssembly_type;
  typedef ::xsd::cxx::tree::sequence< CADAssembly_type > CADAssembly_sequence;
  typedef CADAssembly_sequence::iterator CADAssembly_iterator;
  typedef CADAssembly_sequence::const_iterator CADAssembly_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADAssembly_type, char > CADAssembly_traits;

  const CADAssembly_sequence&
  CADAssembly () const;

  CADAssembly_sequence&
  CADAssembly ();

  void
  CADAssembly (const CADAssembly_sequence& s);

  // CADLayer
  // 
  typedef ::CADLayer CADLayer_type;
  typedef ::xsd::cxx::tree::sequence< CADLayer_type > CADLayer_sequence;
  typedef CADLayer_sequence::iterator CADLayer_iterator;
  typedef CADLayer_sequence::const_iterator CADLayer_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADLayer_type, char > CADLayer_traits;

  const CADLayer_sequence&
  CADLayer () const;

  CADLayer_sequence&
  CADLayer ();

  void
  CADLayer (const CADLayer_sequence& s);

  // EspduTransform
  // 
  typedef ::EspduTransform EspduTransform_type;
  typedef ::xsd::cxx::tree::sequence< EspduTransform_type > EspduTransform_sequence;
  typedef EspduTransform_sequence::iterator EspduTransform_iterator;
  typedef EspduTransform_sequence::const_iterator EspduTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< EspduTransform_type, char > EspduTransform_traits;

  const EspduTransform_sequence&
  EspduTransform () const;

  EspduTransform_sequence&
  EspduTransform ();

  void
  EspduTransform (const EspduTransform_sequence& s);

  // ReceiverPdu
  // 
  typedef ::ReceiverPdu ReceiverPdu_type;
  typedef ::xsd::cxx::tree::sequence< ReceiverPdu_type > ReceiverPdu_sequence;
  typedef ReceiverPdu_sequence::iterator ReceiverPdu_iterator;
  typedef ReceiverPdu_sequence::const_iterator ReceiverPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< ReceiverPdu_type, char > ReceiverPdu_traits;

  const ReceiverPdu_sequence&
  ReceiverPdu () const;

  ReceiverPdu_sequence&
  ReceiverPdu ();

  void
  ReceiverPdu (const ReceiverPdu_sequence& s);

  // SignalPdu
  // 
  typedef ::SignalPdu SignalPdu_type;
  typedef ::xsd::cxx::tree::sequence< SignalPdu_type > SignalPdu_sequence;
  typedef SignalPdu_sequence::iterator SignalPdu_iterator;
  typedef SignalPdu_sequence::const_iterator SignalPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< SignalPdu_type, char > SignalPdu_traits;

  const SignalPdu_sequence&
  SignalPdu () const;

  SignalPdu_sequence&
  SignalPdu ();

  void
  SignalPdu (const SignalPdu_sequence& s);

  // TransmitterPdu
  // 
  typedef ::TransmitterPdu TransmitterPdu_type;
  typedef ::xsd::cxx::tree::sequence< TransmitterPdu_type > TransmitterPdu_sequence;
  typedef TransmitterPdu_sequence::iterator TransmitterPdu_iterator;
  typedef TransmitterPdu_sequence::const_iterator TransmitterPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< TransmitterPdu_type, char > TransmitterPdu_traits;

  const TransmitterPdu_sequence&
  TransmitterPdu () const;

  TransmitterPdu_sequence&
  TransmitterPdu ();

  void
  TransmitterPdu (const TransmitterPdu_sequence& s);

  // GeoLocation
  // 
  typedef ::GeoLocation GeoLocation_type;
  typedef ::xsd::cxx::tree::sequence< GeoLocation_type > GeoLocation_sequence;
  typedef GeoLocation_sequence::iterator GeoLocation_iterator;
  typedef GeoLocation_sequence::const_iterator GeoLocation_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLocation_type, char > GeoLocation_traits;

  const GeoLocation_sequence&
  GeoLocation () const;

  GeoLocation_sequence&
  GeoLocation ();

  void
  GeoLocation (const GeoLocation_sequence& s);

  // GeoLOD
  // 
  typedef ::GeoLOD GeoLOD_type;
  typedef ::xsd::cxx::tree::sequence< GeoLOD_type > GeoLOD_sequence;
  typedef GeoLOD_sequence::iterator GeoLOD_iterator;
  typedef GeoLOD_sequence::const_iterator GeoLOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLOD_type, char > GeoLOD_traits;

  const GeoLOD_sequence&
  GeoLOD () const;

  GeoLOD_sequence&
  GeoLOD ();

  void
  GeoLOD (const GeoLOD_sequence& s);

  // GeoMetadata
  // 
  typedef ::GeoMetadata GeoMetadata_type;
  typedef ::xsd::cxx::tree::sequence< GeoMetadata_type > GeoMetadata_sequence;
  typedef GeoMetadata_sequence::iterator GeoMetadata_iterator;
  typedef GeoMetadata_sequence::const_iterator GeoMetadata_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoMetadata_type, char > GeoMetadata_traits;

  const GeoMetadata_sequence&
  GeoMetadata () const;

  GeoMetadata_sequence&
  GeoMetadata ();

  void
  GeoMetadata (const GeoMetadata_sequence& s);

  // GeoOrigin
  // 
  typedef ::GeoOrigin GeoOrigin_type;
  typedef ::xsd::cxx::tree::sequence< GeoOrigin_type > GeoOrigin_sequence;
  typedef GeoOrigin_sequence::iterator GeoOrigin_iterator;
  typedef GeoOrigin_sequence::const_iterator GeoOrigin_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_sequence&
  GeoOrigin () const;

  GeoOrigin_sequence&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_sequence& s);

  // GeoPositionInterpolator
  // 
  typedef ::GeoPositionInterpolator GeoPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< GeoPositionInterpolator_type > GeoPositionInterpolator_sequence;
  typedef GeoPositionInterpolator_sequence::iterator GeoPositionInterpolator_iterator;
  typedef GeoPositionInterpolator_sequence::const_iterator GeoPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoPositionInterpolator_type, char > GeoPositionInterpolator_traits;

  const GeoPositionInterpolator_sequence&
  GeoPositionInterpolator () const;

  GeoPositionInterpolator_sequence&
  GeoPositionInterpolator ();

  void
  GeoPositionInterpolator (const GeoPositionInterpolator_sequence& s);

  // GeoTouchSensor
  // 
  typedef ::GeoTouchSensor GeoTouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< GeoTouchSensor_type > GeoTouchSensor_sequence;
  typedef GeoTouchSensor_sequence::iterator GeoTouchSensor_iterator;
  typedef GeoTouchSensor_sequence::const_iterator GeoTouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoTouchSensor_type, char > GeoTouchSensor_traits;

  const GeoTouchSensor_sequence&
  GeoTouchSensor () const;

  GeoTouchSensor_sequence&
  GeoTouchSensor ();

  void
  GeoTouchSensor (const GeoTouchSensor_sequence& s);

  // GeoViewpoint
  // 
  typedef ::GeoViewpoint GeoViewpoint_type;
  typedef ::xsd::cxx::tree::sequence< GeoViewpoint_type > GeoViewpoint_sequence;
  typedef GeoViewpoint_sequence::iterator GeoViewpoint_iterator;
  typedef GeoViewpoint_sequence::const_iterator GeoViewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoViewpoint_type, char > GeoViewpoint_traits;

  const GeoViewpoint_sequence&
  GeoViewpoint () const;

  GeoViewpoint_sequence&
  GeoViewpoint ();

  void
  GeoViewpoint (const GeoViewpoint_sequence& s);

  // HAnimHumanoid
  // 
  typedef ::HAnimHumanoid HAnimHumanoid_type;
  typedef ::xsd::cxx::tree::sequence< HAnimHumanoid_type > HAnimHumanoid_sequence;
  typedef HAnimHumanoid_sequence::iterator HAnimHumanoid_iterator;
  typedef HAnimHumanoid_sequence::const_iterator HAnimHumanoid_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimHumanoid_type, char > HAnimHumanoid_traits;

  const HAnimHumanoid_sequence&
  HAnimHumanoid () const;

  HAnimHumanoid_sequence&
  HAnimHumanoid ();

  void
  HAnimHumanoid (const HAnimHumanoid_sequence& s);

  // HAnimJoint
  // 
  typedef ::HAnimJoint HAnimJoint_type;
  typedef ::xsd::cxx::tree::sequence< HAnimJoint_type > HAnimJoint_sequence;
  typedef HAnimJoint_sequence::iterator HAnimJoint_iterator;
  typedef HAnimJoint_sequence::const_iterator HAnimJoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimJoint_type, char > HAnimJoint_traits;

  const HAnimJoint_sequence&
  HAnimJoint () const;

  HAnimJoint_sequence&
  HAnimJoint ();

  void
  HAnimJoint (const HAnimJoint_sequence& s);

  // HAnimSegment
  // 
  typedef ::HAnimSegment HAnimSegment_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSegment_type > HAnimSegment_sequence;
  typedef HAnimSegment_sequence::iterator HAnimSegment_iterator;
  typedef HAnimSegment_sequence::const_iterator HAnimSegment_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSegment_type, char > HAnimSegment_traits;

  const HAnimSegment_sequence&
  HAnimSegment () const;

  HAnimSegment_sequence&
  HAnimSegment ();

  void
  HAnimSegment (const HAnimSegment_sequence& s);

  // HAnimSite
  // 
  typedef ::HAnimSite HAnimSite_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSite_type > HAnimSite_sequence;
  typedef HAnimSite_sequence::iterator HAnimSite_iterator;
  typedef HAnimSite_sequence::const_iterator HAnimSite_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSite_type, char > HAnimSite_traits;

  const HAnimSite_sequence&
  HAnimSite () const;

  HAnimSite_sequence&
  HAnimSite ();

  void
  HAnimSite (const HAnimSite_sequence& s);

  // NurbsOrientationInterpolator
  // 
  typedef ::NurbsOrientationInterpolator NurbsOrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsOrientationInterpolator_type > NurbsOrientationInterpolator_sequence;
  typedef NurbsOrientationInterpolator_sequence::iterator NurbsOrientationInterpolator_iterator;
  typedef NurbsOrientationInterpolator_sequence::const_iterator NurbsOrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsOrientationInterpolator_type, char > NurbsOrientationInterpolator_traits;

  const NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator () const;

  NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator ();

  void
  NurbsOrientationInterpolator (const NurbsOrientationInterpolator_sequence& s);

  // NurbsPositionInterpolator
  // 
  typedef ::NurbsPositionInterpolator NurbsPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsPositionInterpolator_type > NurbsPositionInterpolator_sequence;
  typedef NurbsPositionInterpolator_sequence::iterator NurbsPositionInterpolator_iterator;
  typedef NurbsPositionInterpolator_sequence::const_iterator NurbsPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsPositionInterpolator_type, char > NurbsPositionInterpolator_traits;

  const NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator () const;

  NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator ();

  void
  NurbsPositionInterpolator (const NurbsPositionInterpolator_sequence& s);

  // NurbsSurfaceInterpolator
  // 
  typedef ::NurbsSurfaceInterpolator NurbsSurfaceInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSurfaceInterpolator_type > NurbsSurfaceInterpolator_sequence;
  typedef NurbsSurfaceInterpolator_sequence::iterator NurbsSurfaceInterpolator_iterator;
  typedef NurbsSurfaceInterpolator_sequence::const_iterator NurbsSurfaceInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSurfaceInterpolator_type, char > NurbsSurfaceInterpolator_traits;

  const NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator () const;

  NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator ();

  void
  NurbsSurfaceInterpolator (const NurbsSurfaceInterpolator_sequence& s);

  // NurbsSet
  // 
  typedef ::NurbsSet NurbsSet_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSet_type > NurbsSet_sequence;
  typedef NurbsSet_sequence::iterator NurbsSet_iterator;
  typedef NurbsSet_sequence::const_iterator NurbsSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSet_type, char > NurbsSet_traits;

  const NurbsSet_sequence&
  NurbsSet () const;

  NurbsSet_sequence&
  NurbsSet ();

  void
  NurbsSet (const NurbsSet_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Box
  // 
  typedef ::Box Box_type;
  typedef ::xsd::cxx::tree::sequence< Box_type > Box_sequence;
  typedef Box_sequence::iterator Box_iterator;
  typedef Box_sequence::const_iterator Box_const_iterator;
  typedef ::xsd::cxx::tree::traits< Box_type, char > Box_traits;

  const Box_sequence&
  Box () const;

  Box_sequence&
  Box ();

  void
  Box (const Box_sequence& s);

  // Cone
  // 
  typedef ::Cone Cone_type;
  typedef ::xsd::cxx::tree::sequence< Cone_type > Cone_sequence;
  typedef Cone_sequence::iterator Cone_iterator;
  typedef Cone_sequence::const_iterator Cone_const_iterator;
  typedef ::xsd::cxx::tree::traits< Cone_type, char > Cone_traits;

  const Cone_sequence&
  Cone () const;

  Cone_sequence&
  Cone ();

  void
  Cone (const Cone_sequence& s);

  // Cylinder
  // 
  typedef ::Cylinder Cylinder_type;
  typedef ::xsd::cxx::tree::sequence< Cylinder_type > Cylinder_sequence;
  typedef Cylinder_sequence::iterator Cylinder_iterator;
  typedef Cylinder_sequence::const_iterator Cylinder_const_iterator;
  typedef ::xsd::cxx::tree::traits< Cylinder_type, char > Cylinder_traits;

  const Cylinder_sequence&
  Cylinder () const;

  Cylinder_sequence&
  Cylinder ();

  void
  Cylinder (const Cylinder_sequence& s);

  // IndexedFaceSet
  // 
  typedef ::IndexedFaceSet IndexedFaceSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedFaceSet_type > IndexedFaceSet_sequence;
  typedef IndexedFaceSet_sequence::iterator IndexedFaceSet_iterator;
  typedef IndexedFaceSet_sequence::const_iterator IndexedFaceSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedFaceSet_type, char > IndexedFaceSet_traits;

  const IndexedFaceSet_sequence&
  IndexedFaceSet () const;

  IndexedFaceSet_sequence&
  IndexedFaceSet ();

  void
  IndexedFaceSet (const IndexedFaceSet_sequence& s);

  // IndexedLineSet
  // 
  typedef ::IndexedLineSet IndexedLineSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedLineSet_type > IndexedLineSet_sequence;
  typedef IndexedLineSet_sequence::iterator IndexedLineSet_iterator;
  typedef IndexedLineSet_sequence::const_iterator IndexedLineSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedLineSet_type, char > IndexedLineSet_traits;

  const IndexedLineSet_sequence&
  IndexedLineSet () const;

  IndexedLineSet_sequence&
  IndexedLineSet ();

  void
  IndexedLineSet (const IndexedLineSet_sequence& s);

  // IndexedTriangleFanSet
  // 
  typedef ::IndexedTriangleFanSet IndexedTriangleFanSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedTriangleFanSet_type > IndexedTriangleFanSet_sequence;
  typedef IndexedTriangleFanSet_sequence::iterator IndexedTriangleFanSet_iterator;
  typedef IndexedTriangleFanSet_sequence::const_iterator IndexedTriangleFanSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleFanSet_type, char > IndexedTriangleFanSet_traits;

  const IndexedTriangleFanSet_sequence&
  IndexedTriangleFanSet () const;

  IndexedTriangleFanSet_sequence&
  IndexedTriangleFanSet ();

  void
  IndexedTriangleFanSet (const IndexedTriangleFanSet_sequence& s);

  // IndexedTriangleSet
  // 
  typedef ::IndexedTriangleSet IndexedTriangleSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedTriangleSet_type > IndexedTriangleSet_sequence;
  typedef IndexedTriangleSet_sequence::iterator IndexedTriangleSet_iterator;
  typedef IndexedTriangleSet_sequence::const_iterator IndexedTriangleSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleSet_type, char > IndexedTriangleSet_traits;

  const IndexedTriangleSet_sequence&
  IndexedTriangleSet () const;

  IndexedTriangleSet_sequence&
  IndexedTriangleSet ();

  void
  IndexedTriangleSet (const IndexedTriangleSet_sequence& s);

  // IndexedTriangleStripSet
  // 
  typedef ::IndexedTriangleStripSet IndexedTriangleStripSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedTriangleStripSet_type > IndexedTriangleStripSet_sequence;
  typedef IndexedTriangleStripSet_sequence::iterator IndexedTriangleStripSet_iterator;
  typedef IndexedTriangleStripSet_sequence::const_iterator IndexedTriangleStripSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleStripSet_type, char > IndexedTriangleStripSet_traits;

  const IndexedTriangleStripSet_sequence&
  IndexedTriangleStripSet () const;

  IndexedTriangleStripSet_sequence&
  IndexedTriangleStripSet ();

  void
  IndexedTriangleStripSet (const IndexedTriangleStripSet_sequence& s);

  // LineSet
  // 
  typedef ::LineSet LineSet_type;
  typedef ::xsd::cxx::tree::sequence< LineSet_type > LineSet_sequence;
  typedef LineSet_sequence::iterator LineSet_iterator;
  typedef LineSet_sequence::const_iterator LineSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< LineSet_type, char > LineSet_traits;

  const LineSet_sequence&
  LineSet () const;

  LineSet_sequence&
  LineSet ();

  void
  LineSet (const LineSet_sequence& s);

  // PointSet
  // 
  typedef ::PointSet PointSet_type;
  typedef ::xsd::cxx::tree::sequence< PointSet_type > PointSet_sequence;
  typedef PointSet_sequence::iterator PointSet_iterator;
  typedef PointSet_sequence::const_iterator PointSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< PointSet_type, char > PointSet_traits;

  const PointSet_sequence&
  PointSet () const;

  PointSet_sequence&
  PointSet ();

  void
  PointSet (const PointSet_sequence& s);

  // Sphere
  // 
  typedef ::Sphere Sphere_type;
  typedef ::xsd::cxx::tree::sequence< Sphere_type > Sphere_sequence;
  typedef Sphere_sequence::iterator Sphere_iterator;
  typedef Sphere_sequence::const_iterator Sphere_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sphere_type, char > Sphere_traits;

  const Sphere_sequence&
  Sphere () const;

  Sphere_sequence&
  Sphere ();

  void
  Sphere (const Sphere_sequence& s);

  // TriangleFanSet
  // 
  typedef ::TriangleFanSet TriangleFanSet_type;
  typedef ::xsd::cxx::tree::sequence< TriangleFanSet_type > TriangleFanSet_sequence;
  typedef TriangleFanSet_sequence::iterator TriangleFanSet_iterator;
  typedef TriangleFanSet_sequence::const_iterator TriangleFanSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleFanSet_type, char > TriangleFanSet_traits;

  const TriangleFanSet_sequence&
  TriangleFanSet () const;

  TriangleFanSet_sequence&
  TriangleFanSet ();

  void
  TriangleFanSet (const TriangleFanSet_sequence& s);

  // TriangleSet
  // 
  typedef ::TriangleSet TriangleSet_type;
  typedef ::xsd::cxx::tree::sequence< TriangleSet_type > TriangleSet_sequence;
  typedef TriangleSet_sequence::iterator TriangleSet_iterator;
  typedef TriangleSet_sequence::const_iterator TriangleSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleSet_type, char > TriangleSet_traits;

  const TriangleSet_sequence&
  TriangleSet () const;

  TriangleSet_sequence&
  TriangleSet ();

  void
  TriangleSet (const TriangleSet_sequence& s);

  // TriangleStripSet
  // 
  typedef ::TriangleStripSet TriangleStripSet_type;
  typedef ::xsd::cxx::tree::sequence< TriangleStripSet_type > TriangleStripSet_sequence;
  typedef TriangleStripSet_sequence::iterator TriangleStripSet_iterator;
  typedef TriangleStripSet_sequence::const_iterator TriangleStripSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleStripSet_type, char > TriangleStripSet_traits;

  const TriangleStripSet_sequence&
  TriangleStripSet () const;

  TriangleStripSet_sequence&
  TriangleStripSet ();

  void
  TriangleStripSet (const TriangleStripSet_sequence& s);

  // ElevationGrid
  // 
  typedef ::ElevationGrid ElevationGrid_type;
  typedef ::xsd::cxx::tree::sequence< ElevationGrid_type > ElevationGrid_sequence;
  typedef ElevationGrid_sequence::iterator ElevationGrid_iterator;
  typedef ElevationGrid_sequence::const_iterator ElevationGrid_const_iterator;
  typedef ::xsd::cxx::tree::traits< ElevationGrid_type, char > ElevationGrid_traits;

  const ElevationGrid_sequence&
  ElevationGrid () const;

  ElevationGrid_sequence&
  ElevationGrid ();

  void
  ElevationGrid (const ElevationGrid_sequence& s);

  // Polyline2D
  // 
  typedef ::Polyline2D Polyline2D_type;
  typedef ::xsd::cxx::tree::sequence< Polyline2D_type > Polyline2D_sequence;
  typedef Polyline2D_sequence::iterator Polyline2D_iterator;
  typedef Polyline2D_sequence::const_iterator Polyline2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Polyline2D_type, char > Polyline2D_traits;

  const Polyline2D_sequence&
  Polyline2D () const;

  Polyline2D_sequence&
  Polyline2D ();

  void
  Polyline2D (const Polyline2D_sequence& s);

  // Polypoint2D
  // 
  typedef ::Polypoint2D Polypoint2D_type;
  typedef ::xsd::cxx::tree::sequence< Polypoint2D_type > Polypoint2D_sequence;
  typedef Polypoint2D_sequence::iterator Polypoint2D_iterator;
  typedef Polypoint2D_sequence::const_iterator Polypoint2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Polypoint2D_type, char > Polypoint2D_traits;

  const Polypoint2D_sequence&
  Polypoint2D () const;

  Polypoint2D_sequence&
  Polypoint2D ();

  void
  Polypoint2D (const Polypoint2D_sequence& s);

  // Rectangle2D
  // 
  typedef ::Rectangle2D Rectangle2D_type;
  typedef ::xsd::cxx::tree::sequence< Rectangle2D_type > Rectangle2D_sequence;
  typedef Rectangle2D_sequence::iterator Rectangle2D_iterator;
  typedef Rectangle2D_sequence::const_iterator Rectangle2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Rectangle2D_type, char > Rectangle2D_traits;

  const Rectangle2D_sequence&
  Rectangle2D () const;

  Rectangle2D_sequence&
  Rectangle2D ();

  void
  Rectangle2D (const Rectangle2D_sequence& s);

  // TriangleSet2D
  // 
  typedef ::TriangleSet2D TriangleSet2D_type;
  typedef ::xsd::cxx::tree::sequence< TriangleSet2D_type > TriangleSet2D_sequence;
  typedef TriangleSet2D_sequence::iterator TriangleSet2D_iterator;
  typedef TriangleSet2D_sequence::const_iterator TriangleSet2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleSet2D_type, char > TriangleSet2D_traits;

  const TriangleSet2D_sequence&
  TriangleSet2D () const;

  TriangleSet2D_sequence&
  TriangleSet2D ();

  void
  TriangleSet2D (const TriangleSet2D_sequence& s);

  // Extrusion
  // 
  typedef ::Extrusion Extrusion_type;
  typedef ::xsd::cxx::tree::sequence< Extrusion_type > Extrusion_sequence;
  typedef Extrusion_sequence::iterator Extrusion_iterator;
  typedef Extrusion_sequence::const_iterator Extrusion_const_iterator;
  typedef ::xsd::cxx::tree::traits< Extrusion_type, char > Extrusion_traits;

  const Extrusion_sequence&
  Extrusion () const;

  Extrusion_sequence&
  Extrusion ();

  void
  Extrusion (const Extrusion_sequence& s);

  // Text
  // 
  typedef ::Text Text_type;
  typedef ::xsd::cxx::tree::sequence< Text_type > Text_sequence;
  typedef Text_sequence::iterator Text_iterator;
  typedef Text_sequence::const_iterator Text_const_iterator;
  typedef ::xsd::cxx::tree::traits< Text_type, char > Text_traits;

  const Text_sequence&
  Text () const;

  Text_sequence&
  Text ();

  void
  Text (const Text_sequence& s);

  // Arc2D
  // 
  typedef ::Arc2D Arc2D_type;
  typedef ::xsd::cxx::tree::sequence< Arc2D_type > Arc2D_sequence;
  typedef Arc2D_sequence::iterator Arc2D_iterator;
  typedef Arc2D_sequence::const_iterator Arc2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Arc2D_type, char > Arc2D_traits;

  const Arc2D_sequence&
  Arc2D () const;

  Arc2D_sequence&
  Arc2D ();

  void
  Arc2D (const Arc2D_sequence& s);

  // ArcClose2D
  // 
  typedef ::ArcClose2D ArcClose2D_type;
  typedef ::xsd::cxx::tree::sequence< ArcClose2D_type > ArcClose2D_sequence;
  typedef ArcClose2D_sequence::iterator ArcClose2D_iterator;
  typedef ArcClose2D_sequence::const_iterator ArcClose2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< ArcClose2D_type, char > ArcClose2D_traits;

  const ArcClose2D_sequence&
  ArcClose2D () const;

  ArcClose2D_sequence&
  ArcClose2D ();

  void
  ArcClose2D (const ArcClose2D_sequence& s);

  // Circle2D
  // 
  typedef ::Circle2D Circle2D_type;
  typedef ::xsd::cxx::tree::sequence< Circle2D_type > Circle2D_sequence;
  typedef Circle2D_sequence::iterator Circle2D_iterator;
  typedef Circle2D_sequence::const_iterator Circle2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Circle2D_type, char > Circle2D_traits;

  const Circle2D_sequence&
  Circle2D () const;

  Circle2D_sequence&
  Circle2D ();

  void
  Circle2D (const Circle2D_sequence& s);

  // Disk2D
  // 
  typedef ::Disk2D Disk2D_type;
  typedef ::xsd::cxx::tree::sequence< Disk2D_type > Disk2D_sequence;
  typedef Disk2D_sequence::iterator Disk2D_iterator;
  typedef Disk2D_sequence::const_iterator Disk2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Disk2D_type, char > Disk2D_traits;

  const Disk2D_sequence&
  Disk2D () const;

  Disk2D_sequence&
  Disk2D ();

  void
  Disk2D (const Disk2D_sequence& s);

  // QuadSet
  // 
  typedef ::QuadSet QuadSet_type;
  typedef ::xsd::cxx::tree::sequence< QuadSet_type > QuadSet_sequence;
  typedef QuadSet_sequence::iterator QuadSet_iterator;
  typedef QuadSet_sequence::const_iterator QuadSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< QuadSet_type, char > QuadSet_traits;

  const QuadSet_sequence&
  QuadSet () const;

  QuadSet_sequence&
  QuadSet ();

  void
  QuadSet (const QuadSet_sequence& s);

  // IndexedQuadSet
  // 
  typedef ::IndexedQuadSet IndexedQuadSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedQuadSet_type > IndexedQuadSet_sequence;
  typedef IndexedQuadSet_sequence::iterator IndexedQuadSet_iterator;
  typedef IndexedQuadSet_sequence::const_iterator IndexedQuadSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedQuadSet_type, char > IndexedQuadSet_traits;

  const IndexedQuadSet_sequence&
  IndexedQuadSet () const;

  IndexedQuadSet_sequence&
  IndexedQuadSet ();

  void
  IndexedQuadSet (const IndexedQuadSet_sequence& s);

  // GeoElevationGrid
  // 
  typedef ::GeoElevationGrid GeoElevationGrid_type;
  typedef ::xsd::cxx::tree::sequence< GeoElevationGrid_type > GeoElevationGrid_sequence;
  typedef GeoElevationGrid_sequence::iterator GeoElevationGrid_iterator;
  typedef GeoElevationGrid_sequence::const_iterator GeoElevationGrid_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoElevationGrid_type, char > GeoElevationGrid_traits;

  const GeoElevationGrid_sequence&
  GeoElevationGrid () const;

  GeoElevationGrid_sequence&
  GeoElevationGrid ();

  void
  GeoElevationGrid (const GeoElevationGrid_sequence& s);

  // NurbsCurve
  // 
  typedef ::NurbsCurve NurbsCurve_type;
  typedef ::xsd::cxx::tree::sequence< NurbsCurve_type > NurbsCurve_sequence;
  typedef NurbsCurve_sequence::iterator NurbsCurve_iterator;
  typedef NurbsCurve_sequence::const_iterator NurbsCurve_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsCurve_type, char > NurbsCurve_traits;

  const NurbsCurve_sequence&
  NurbsCurve () const;

  NurbsCurve_sequence&
  NurbsCurve ();

  void
  NurbsCurve (const NurbsCurve_sequence& s);

  // NurbsCurve2D
  // 
  typedef ::NurbsCurve2D NurbsCurve2D_type;
  typedef ::xsd::cxx::tree::sequence< NurbsCurve2D_type > NurbsCurve2D_sequence;
  typedef NurbsCurve2D_sequence::iterator NurbsCurve2D_iterator;
  typedef NurbsCurve2D_sequence::const_iterator NurbsCurve2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsCurve2D_type, char > NurbsCurve2D_traits;

  const NurbsCurve2D_sequence&
  NurbsCurve2D () const;

  NurbsCurve2D_sequence&
  NurbsCurve2D ();

  void
  NurbsCurve2D (const NurbsCurve2D_sequence& s);

  // NurbsPatchSurface
  // 
  typedef ::NurbsPatchSurface NurbsPatchSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsPatchSurface_type > NurbsPatchSurface_sequence;
  typedef NurbsPatchSurface_sequence::iterator NurbsPatchSurface_iterator;
  typedef NurbsPatchSurface_sequence::const_iterator NurbsPatchSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsPatchSurface_type, char > NurbsPatchSurface_traits;

  const NurbsPatchSurface_sequence&
  NurbsPatchSurface () const;

  NurbsPatchSurface_sequence&
  NurbsPatchSurface ();

  void
  NurbsPatchSurface (const NurbsPatchSurface_sequence& s);

  // NurbsSweptSurface
  // 
  typedef ::NurbsSweptSurface NurbsSweptSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSweptSurface_type > NurbsSweptSurface_sequence;
  typedef NurbsSweptSurface_sequence::iterator NurbsSweptSurface_iterator;
  typedef NurbsSweptSurface_sequence::const_iterator NurbsSweptSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSweptSurface_type, char > NurbsSweptSurface_traits;

  const NurbsSweptSurface_sequence&
  NurbsSweptSurface () const;

  NurbsSweptSurface_sequence&
  NurbsSweptSurface ();

  void
  NurbsSweptSurface (const NurbsSweptSurface_sequence& s);

  // NurbsSwungSurface
  // 
  typedef ::NurbsSwungSurface NurbsSwungSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSwungSurface_type > NurbsSwungSurface_sequence;
  typedef NurbsSwungSurface_sequence::iterator NurbsSwungSurface_iterator;
  typedef NurbsSwungSurface_sequence::const_iterator NurbsSwungSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSwungSurface_type, char > NurbsSwungSurface_traits;

  const NurbsSwungSurface_sequence&
  NurbsSwungSurface () const;

  NurbsSwungSurface_sequence&
  NurbsSwungSurface ();

  void
  NurbsSwungSurface (const NurbsSwungSurface_sequence& s);

  // NurbsTrimmedSurface
  // 
  typedef ::NurbsTrimmedSurface NurbsTrimmedSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTrimmedSurface_type > NurbsTrimmedSurface_sequence;
  typedef NurbsTrimmedSurface_sequence::iterator NurbsTrimmedSurface_iterator;
  typedef NurbsTrimmedSurface_sequence::const_iterator NurbsTrimmedSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTrimmedSurface_type, char > NurbsTrimmedSurface_traits;

  const NurbsTrimmedSurface_sequence&
  NurbsTrimmedSurface () const;

  NurbsTrimmedSurface_sequence&
  NurbsTrimmedSurface ();

  void
  NurbsTrimmedSurface (const NurbsTrimmedSurface_sequence& s);

  // Color
  // 
  typedef ::Color Color_type;
  typedef ::xsd::cxx::tree::sequence< Color_type > Color_sequence;
  typedef Color_sequence::iterator Color_iterator;
  typedef Color_sequence::const_iterator Color_const_iterator;
  typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

  const Color_sequence&
  Color () const;

  Color_sequence&
  Color ();

  void
  Color (const Color_sequence& s);

  // ColorRGBA
  // 
  typedef ::ColorRGBA ColorRGBA_type;
  typedef ::xsd::cxx::tree::sequence< ColorRGBA_type > ColorRGBA_sequence;
  typedef ColorRGBA_sequence::iterator ColorRGBA_iterator;
  typedef ColorRGBA_sequence::const_iterator ColorRGBA_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorRGBA_type, char > ColorRGBA_traits;

  const ColorRGBA_sequence&
  ColorRGBA () const;

  ColorRGBA_sequence&
  ColorRGBA ();

  void
  ColorRGBA (const ColorRGBA_sequence& s);

  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::sequence< Coordinate_type > Coordinate_sequence;
  typedef Coordinate_sequence::iterator Coordinate_iterator;
  typedef Coordinate_sequence::const_iterator Coordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_sequence&
  Coordinate () const;

  Coordinate_sequence&
  Coordinate ();

  void
  Coordinate (const Coordinate_sequence& s);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateDouble_type > CoordinateDouble_sequence;
  typedef CoordinateDouble_sequence::iterator CoordinateDouble_iterator;
  typedef CoordinateDouble_sequence::const_iterator CoordinateDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_sequence&
  CoordinateDouble () const;

  CoordinateDouble_sequence&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_sequence& s);

  // FontStyle
  // 
  typedef ::FontStyle FontStyle_type;
  typedef ::xsd::cxx::tree::sequence< FontStyle_type > FontStyle_sequence;
  typedef FontStyle_sequence::iterator FontStyle_iterator;
  typedef FontStyle_sequence::const_iterator FontStyle_const_iterator;
  typedef ::xsd::cxx::tree::traits< FontStyle_type, char > FontStyle_traits;

  const FontStyle_sequence&
  FontStyle () const;

  FontStyle_sequence&
  FontStyle ();

  void
  FontStyle (const FontStyle_sequence& s);

  // GeoCoordinate
  // 
  typedef ::GeoCoordinate GeoCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< GeoCoordinate_type > GeoCoordinate_sequence;
  typedef GeoCoordinate_sequence::iterator GeoCoordinate_iterator;
  typedef GeoCoordinate_sequence::const_iterator GeoCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoCoordinate_type, char > GeoCoordinate_traits;

  const GeoCoordinate_sequence&
  GeoCoordinate () const;

  GeoCoordinate_sequence&
  GeoCoordinate ();

  void
  GeoCoordinate (const GeoCoordinate_sequence& s);

  // Normal
  // 
  typedef ::Normal Normal_type;
  typedef ::xsd::cxx::tree::sequence< Normal_type > Normal_sequence;
  typedef Normal_sequence::iterator Normal_iterator;
  typedef Normal_sequence::const_iterator Normal_const_iterator;
  typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

  const Normal_sequence&
  Normal () const;

  Normal_sequence&
  Normal ();

  void
  Normal (const Normal_sequence& s);

  // TextureCoordinate
  // 
  typedef ::TextureCoordinate TextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate_type > TextureCoordinate_sequence;
  typedef TextureCoordinate_sequence::iterator TextureCoordinate_iterator;
  typedef TextureCoordinate_sequence::const_iterator TextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate_type, char > TextureCoordinate_traits;

  const TextureCoordinate_sequence&
  TextureCoordinate () const;

  TextureCoordinate_sequence&
  TextureCoordinate ();

  void
  TextureCoordinate (const TextureCoordinate_sequence& s);

  // NurbsTextureCoordinate
  // 
  typedef ::NurbsTextureCoordinate NurbsTextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTextureCoordinate_type > NurbsTextureCoordinate_sequence;
  typedef NurbsTextureCoordinate_sequence::iterator NurbsTextureCoordinate_iterator;
  typedef NurbsTextureCoordinate_sequence::const_iterator NurbsTextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTextureCoordinate_type, char > NurbsTextureCoordinate_traits;

  const NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate () const;

  NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate ();

  void
  NurbsTextureCoordinate (const NurbsTextureCoordinate_sequence& s);

  // name
  // 
  typedef ::xml_schema::nmtoken name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // accessType
  // 
  typedef ::accessTypeNames accessType_type;
  typedef ::xsd::cxx::tree::traits< accessType_type, char > accessType_traits;

  const accessType_type&
  accessType () const;

  accessType_type&
  accessType ();

  void
  accessType (const accessType_type& x);

  void
  accessType (::std::auto_ptr< accessType_type > p);

  // type
  // 
  typedef ::fieldTypeName type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // value
  // 
  typedef ::SFString value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  void
  value (::std::auto_ptr< value_type > p);

  // appinfo
  // 
  typedef ::SFString appinfo_type;
  typedef ::xsd::cxx::tree::optional< appinfo_type > appinfo_optional;
  typedef ::xsd::cxx::tree::traits< appinfo_type, char > appinfo_traits;

  const appinfo_optional&
  appinfo () const;

  appinfo_optional&
  appinfo ();

  void
  appinfo (const appinfo_type& x);

  void
  appinfo (const appinfo_optional& x);

  void
  appinfo (::std::auto_ptr< appinfo_type > p);

  // documentation
  // 
  typedef ::SFString documentation_type;
  typedef ::xsd::cxx::tree::optional< documentation_type > documentation_optional;
  typedef ::xsd::cxx::tree::traits< documentation_type, char > documentation_traits;

  const documentation_optional&
  documentation () const;

  documentation_optional&
  documentation ();

  void
  documentation (const documentation_type& x);

  void
  documentation (const documentation_optional& x);

  void
  documentation (::std::auto_ptr< documentation_type > p);

  // Constructors.
  //
  field (const name_type&,
         const accessType_type&,
         const type_type&);

  field (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  field (const field& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual field*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~field ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  FillProperties_sequence FillProperties_;
  LineProperties_sequence LineProperties_;
  Material_sequence Material_;
  ComposedShader_sequence ComposedShader_;
  PackagedShader_sequence PackagedShader_;
  ProgramShader_sequence ProgramShader_;
  ComposedCubeMapTexture_sequence ComposedCubeMapTexture_;
  ImageTexture_sequence ImageTexture_;
  MovieTexture_sequence MovieTexture_;
  MultiTexture_sequence MultiTexture_;
  PixelTexture_sequence PixelTexture_;
  GeneratedCubeMapTexture_sequence GeneratedCubeMapTexture_;
  ImageCubeMapTexture_sequence ImageCubeMapTexture_;
  MultiTextureTransform_sequence MultiTextureTransform_;
  TextureTransform_sequence TextureTransform_;
  MetadataDouble_sequence MetadataDouble_;
  MetadataFloat_sequence MetadataFloat_;
  MetadataInteger_sequence MetadataInteger_;
  MetadataSet_sequence MetadataSet_;
  MetadataString_sequence MetadataString_;
  Appearance_sequence Appearance_;
  Background_sequence Background_;
  ColorInterpolator_sequence ColorInterpolator_;
  CoordinateInterpolator_sequence CoordinateInterpolator_;
  DirectionalLight_sequence DirectionalLight_;
  Group_sequence Group_;
  NavigationInfo_sequence NavigationInfo_;
  NormalInterpolator_sequence NormalInterpolator_;
  OrientationInterpolator_sequence OrientationInterpolator_;
  PositionInterpolator_sequence PositionInterpolator_;
  ScalarInterpolator_sequence ScalarInterpolator_;
  Shape_sequence Shape_;
  TimeSensor_sequence TimeSensor_;
  Transform_sequence Transform_;
  Viewpoint_sequence Viewpoint_;
  WorldInfo_sequence WorldInfo_;
  Anchor_sequence Anchor_;
  BooleanFilter_sequence BooleanFilter_;
  BooleanSequencer_sequence BooleanSequencer_;
  BooleanToggle_sequence BooleanToggle_;
  BooleanTrigger_sequence BooleanTrigger_;
  CylinderSensor_sequence CylinderSensor_;
  Inline_sequence Inline_;
  IntegerSequencer_sequence IntegerSequencer_;
  IntegerTrigger_sequence IntegerTrigger_;
  KeySensor_sequence KeySensor_;
  PlaneSensor_sequence PlaneSensor_;
  PointLight_sequence PointLight_;
  ProximitySensor_sequence ProximitySensor_;
  SphereSensor_sequence SphereSensor_;
  SpotLight_sequence SpotLight_;
  StringSensor_sequence StringSensor_;
  Switch_sequence Switch_;
  TimeTrigger_sequence TimeTrigger_;
  TouchSensor_sequence TouchSensor_;
  AudioClip_sequence AudioClip_;
  Billboard_sequence Billboard_;
  Collision_sequence Collision_;
  Fog_sequence Fog_;
  LoadSensor_sequence LoadSensor_;
  LocalFog_sequence LocalFog_;
  LOD_sequence LOD_;
  Script_sequence Script_;
  Sound_sequence Sound_;
  VisibilitySensor_sequence VisibilitySensor_;
  CoordinateInterpolator2D_sequence CoordinateInterpolator2D_;
  PositionInterpolator2D_sequence PositionInterpolator2D_;
  StaticGroup_sequence StaticGroup_;
  CADAssembly_sequence CADAssembly_;
  CADLayer_sequence CADLayer_;
  EspduTransform_sequence EspduTransform_;
  ReceiverPdu_sequence ReceiverPdu_;
  SignalPdu_sequence SignalPdu_;
  TransmitterPdu_sequence TransmitterPdu_;
  GeoLocation_sequence GeoLocation_;
  GeoLOD_sequence GeoLOD_;
  GeoMetadata_sequence GeoMetadata_;
  GeoOrigin_sequence GeoOrigin_;
  GeoPositionInterpolator_sequence GeoPositionInterpolator_;
  GeoTouchSensor_sequence GeoTouchSensor_;
  GeoViewpoint_sequence GeoViewpoint_;
  HAnimHumanoid_sequence HAnimHumanoid_;
  HAnimJoint_sequence HAnimJoint_;
  HAnimSegment_sequence HAnimSegment_;
  HAnimSite_sequence HAnimSite_;
  NurbsOrientationInterpolator_sequence NurbsOrientationInterpolator_;
  NurbsPositionInterpolator_sequence NurbsPositionInterpolator_;
  NurbsSurfaceInterpolator_sequence NurbsSurfaceInterpolator_;
  NurbsSet_sequence NurbsSet_;
  ProtoInstance_sequence ProtoInstance_;
  Box_sequence Box_;
  Cone_sequence Cone_;
  Cylinder_sequence Cylinder_;
  IndexedFaceSet_sequence IndexedFaceSet_;
  IndexedLineSet_sequence IndexedLineSet_;
  IndexedTriangleFanSet_sequence IndexedTriangleFanSet_;
  IndexedTriangleSet_sequence IndexedTriangleSet_;
  IndexedTriangleStripSet_sequence IndexedTriangleStripSet_;
  LineSet_sequence LineSet_;
  PointSet_sequence PointSet_;
  Sphere_sequence Sphere_;
  TriangleFanSet_sequence TriangleFanSet_;
  TriangleSet_sequence TriangleSet_;
  TriangleStripSet_sequence TriangleStripSet_;
  ElevationGrid_sequence ElevationGrid_;
  Polyline2D_sequence Polyline2D_;
  Polypoint2D_sequence Polypoint2D_;
  Rectangle2D_sequence Rectangle2D_;
  TriangleSet2D_sequence TriangleSet2D_;
  Extrusion_sequence Extrusion_;
  Text_sequence Text_;
  Arc2D_sequence Arc2D_;
  ArcClose2D_sequence ArcClose2D_;
  Circle2D_sequence Circle2D_;
  Disk2D_sequence Disk2D_;
  QuadSet_sequence QuadSet_;
  IndexedQuadSet_sequence IndexedQuadSet_;
  GeoElevationGrid_sequence GeoElevationGrid_;
  NurbsCurve_sequence NurbsCurve_;
  NurbsCurve2D_sequence NurbsCurve2D_;
  NurbsPatchSurface_sequence NurbsPatchSurface_;
  NurbsSweptSurface_sequence NurbsSweptSurface_;
  NurbsSwungSurface_sequence NurbsSwungSurface_;
  NurbsTrimmedSurface_sequence NurbsTrimmedSurface_;
  Color_sequence Color_;
  ColorRGBA_sequence ColorRGBA_;
  Coordinate_sequence Coordinate_;
  CoordinateDouble_sequence CoordinateDouble_;
  FontStyle_sequence FontStyle_;
  GeoCoordinate_sequence GeoCoordinate_;
  Normal_sequence Normal_;
  TextureCoordinate_sequence TextureCoordinate_;
  NurbsTextureCoordinate_sequence NurbsTextureCoordinate_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< accessType_type > accessType_;
  ::xsd::cxx::tree::one< type_type > type_;
  value_optional value_;
  appinfo_optional appinfo_;
  documentation_optional documentation_;
};

class fieldValue: public ::SceneGraphStructureNodeType
{
  public:
  // FillProperties
  // 
  typedef ::FillProperties FillProperties_type;
  typedef ::xsd::cxx::tree::sequence< FillProperties_type > FillProperties_sequence;
  typedef FillProperties_sequence::iterator FillProperties_iterator;
  typedef FillProperties_sequence::const_iterator FillProperties_const_iterator;
  typedef ::xsd::cxx::tree::traits< FillProperties_type, char > FillProperties_traits;

  const FillProperties_sequence&
  FillProperties () const;

  FillProperties_sequence&
  FillProperties ();

  void
  FillProperties (const FillProperties_sequence& s);

  // LineProperties
  // 
  typedef ::LineProperties LineProperties_type;
  typedef ::xsd::cxx::tree::sequence< LineProperties_type > LineProperties_sequence;
  typedef LineProperties_sequence::iterator LineProperties_iterator;
  typedef LineProperties_sequence::const_iterator LineProperties_const_iterator;
  typedef ::xsd::cxx::tree::traits< LineProperties_type, char > LineProperties_traits;

  const LineProperties_sequence&
  LineProperties () const;

  LineProperties_sequence&
  LineProperties ();

  void
  LineProperties (const LineProperties_sequence& s);

  // Material
  // 
  typedef ::Material Material_type;
  typedef ::xsd::cxx::tree::sequence< Material_type > Material_sequence;
  typedef Material_sequence::iterator Material_iterator;
  typedef Material_sequence::const_iterator Material_const_iterator;
  typedef ::xsd::cxx::tree::traits< Material_type, char > Material_traits;

  const Material_sequence&
  Material () const;

  Material_sequence&
  Material ();

  void
  Material (const Material_sequence& s);

  // ComposedShader
  // 
  typedef ::ComposedShader ComposedShader_type;
  typedef ::xsd::cxx::tree::sequence< ComposedShader_type > ComposedShader_sequence;
  typedef ComposedShader_sequence::iterator ComposedShader_iterator;
  typedef ComposedShader_sequence::const_iterator ComposedShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< ComposedShader_type, char > ComposedShader_traits;

  const ComposedShader_sequence&
  ComposedShader () const;

  ComposedShader_sequence&
  ComposedShader ();

  void
  ComposedShader (const ComposedShader_sequence& s);

  // PackagedShader
  // 
  typedef ::PackagedShader PackagedShader_type;
  typedef ::xsd::cxx::tree::sequence< PackagedShader_type > PackagedShader_sequence;
  typedef PackagedShader_sequence::iterator PackagedShader_iterator;
  typedef PackagedShader_sequence::const_iterator PackagedShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< PackagedShader_type, char > PackagedShader_traits;

  const PackagedShader_sequence&
  PackagedShader () const;

  PackagedShader_sequence&
  PackagedShader ();

  void
  PackagedShader (const PackagedShader_sequence& s);

  // ProgramShader
  // 
  typedef ::ProgramShader ProgramShader_type;
  typedef ::xsd::cxx::tree::sequence< ProgramShader_type > ProgramShader_sequence;
  typedef ProgramShader_sequence::iterator ProgramShader_iterator;
  typedef ProgramShader_sequence::const_iterator ProgramShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProgramShader_type, char > ProgramShader_traits;

  const ProgramShader_sequence&
  ProgramShader () const;

  ProgramShader_sequence&
  ProgramShader ();

  void
  ProgramShader (const ProgramShader_sequence& s);

  // ComposedCubeMapTexture
  // 
  typedef ::ComposedCubeMapTexture ComposedCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< ComposedCubeMapTexture_type > ComposedCubeMapTexture_sequence;
  typedef ComposedCubeMapTexture_sequence::iterator ComposedCubeMapTexture_iterator;
  typedef ComposedCubeMapTexture_sequence::const_iterator ComposedCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ComposedCubeMapTexture_type, char > ComposedCubeMapTexture_traits;

  const ComposedCubeMapTexture_sequence&
  ComposedCubeMapTexture () const;

  ComposedCubeMapTexture_sequence&
  ComposedCubeMapTexture ();

  void
  ComposedCubeMapTexture (const ComposedCubeMapTexture_sequence& s);

  // ImageTexture
  // 
  typedef ::ImageTexture ImageTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageTexture_type > ImageTexture_sequence;
  typedef ImageTexture_sequence::iterator ImageTexture_iterator;
  typedef ImageTexture_sequence::const_iterator ImageTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageTexture_type, char > ImageTexture_traits;

  const ImageTexture_sequence&
  ImageTexture () const;

  ImageTexture_sequence&
  ImageTexture ();

  void
  ImageTexture (const ImageTexture_sequence& s);

  // MovieTexture
  // 
  typedef ::MovieTexture MovieTexture_type;
  typedef ::xsd::cxx::tree::sequence< MovieTexture_type > MovieTexture_sequence;
  typedef MovieTexture_sequence::iterator MovieTexture_iterator;
  typedef MovieTexture_sequence::const_iterator MovieTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MovieTexture_type, char > MovieTexture_traits;

  const MovieTexture_sequence&
  MovieTexture () const;

  MovieTexture_sequence&
  MovieTexture ();

  void
  MovieTexture (const MovieTexture_sequence& s);

  // MultiTexture
  // 
  typedef ::MultiTexture MultiTexture_type;
  typedef ::xsd::cxx::tree::sequence< MultiTexture_type > MultiTexture_sequence;
  typedef MultiTexture_sequence::iterator MultiTexture_iterator;
  typedef MultiTexture_sequence::const_iterator MultiTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTexture_type, char > MultiTexture_traits;

  const MultiTexture_sequence&
  MultiTexture () const;

  MultiTexture_sequence&
  MultiTexture ();

  void
  MultiTexture (const MultiTexture_sequence& s);

  // PixelTexture
  // 
  typedef ::PixelTexture PixelTexture_type;
  typedef ::xsd::cxx::tree::sequence< PixelTexture_type > PixelTexture_sequence;
  typedef PixelTexture_sequence::iterator PixelTexture_iterator;
  typedef PixelTexture_sequence::const_iterator PixelTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< PixelTexture_type, char > PixelTexture_traits;

  const PixelTexture_sequence&
  PixelTexture () const;

  PixelTexture_sequence&
  PixelTexture ();

  void
  PixelTexture (const PixelTexture_sequence& s);

  // GeneratedCubeMapTexture
  // 
  typedef ::GeneratedCubeMapTexture GeneratedCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< GeneratedCubeMapTexture_type > GeneratedCubeMapTexture_sequence;
  typedef GeneratedCubeMapTexture_sequence::iterator GeneratedCubeMapTexture_iterator;
  typedef GeneratedCubeMapTexture_sequence::const_iterator GeneratedCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeneratedCubeMapTexture_type, char > GeneratedCubeMapTexture_traits;

  const GeneratedCubeMapTexture_sequence&
  GeneratedCubeMapTexture () const;

  GeneratedCubeMapTexture_sequence&
  GeneratedCubeMapTexture ();

  void
  GeneratedCubeMapTexture (const GeneratedCubeMapTexture_sequence& s);

  // ImageCubeMapTexture
  // 
  typedef ::ImageCubeMapTexture ImageCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageCubeMapTexture_type > ImageCubeMapTexture_sequence;
  typedef ImageCubeMapTexture_sequence::iterator ImageCubeMapTexture_iterator;
  typedef ImageCubeMapTexture_sequence::const_iterator ImageCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageCubeMapTexture_type, char > ImageCubeMapTexture_traits;

  const ImageCubeMapTexture_sequence&
  ImageCubeMapTexture () const;

  ImageCubeMapTexture_sequence&
  ImageCubeMapTexture ();

  void
  ImageCubeMapTexture (const ImageCubeMapTexture_sequence& s);

  // MultiTextureTransform
  // 
  typedef ::MultiTextureTransform MultiTextureTransform_type;
  typedef ::xsd::cxx::tree::sequence< MultiTextureTransform_type > MultiTextureTransform_sequence;
  typedef MultiTextureTransform_sequence::iterator MultiTextureTransform_iterator;
  typedef MultiTextureTransform_sequence::const_iterator MultiTextureTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTextureTransform_type, char > MultiTextureTransform_traits;

  const MultiTextureTransform_sequence&
  MultiTextureTransform () const;

  MultiTextureTransform_sequence&
  MultiTextureTransform ();

  void
  MultiTextureTransform (const MultiTextureTransform_sequence& s);

  // TextureTransform
  // 
  typedef ::TextureTransform TextureTransform_type;
  typedef ::xsd::cxx::tree::sequence< TextureTransform_type > TextureTransform_sequence;
  typedef TextureTransform_sequence::iterator TextureTransform_iterator;
  typedef TextureTransform_sequence::const_iterator TextureTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureTransform_type, char > TextureTransform_traits;

  const TextureTransform_sequence&
  TextureTransform () const;

  TextureTransform_sequence&
  TextureTransform ();

  void
  TextureTransform (const TextureTransform_sequence& s);

  // MetadataDouble
  // 
  typedef ::MetadataDouble MetadataDouble_type;
  typedef ::xsd::cxx::tree::sequence< MetadataDouble_type > MetadataDouble_sequence;
  typedef MetadataDouble_sequence::iterator MetadataDouble_iterator;
  typedef MetadataDouble_sequence::const_iterator MetadataDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataDouble_type, char > MetadataDouble_traits;

  const MetadataDouble_sequence&
  MetadataDouble () const;

  MetadataDouble_sequence&
  MetadataDouble ();

  void
  MetadataDouble (const MetadataDouble_sequence& s);

  // MetadataFloat
  // 
  typedef ::MetadataFloat MetadataFloat_type;
  typedef ::xsd::cxx::tree::sequence< MetadataFloat_type > MetadataFloat_sequence;
  typedef MetadataFloat_sequence::iterator MetadataFloat_iterator;
  typedef MetadataFloat_sequence::const_iterator MetadataFloat_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataFloat_type, char > MetadataFloat_traits;

  const MetadataFloat_sequence&
  MetadataFloat () const;

  MetadataFloat_sequence&
  MetadataFloat ();

  void
  MetadataFloat (const MetadataFloat_sequence& s);

  // MetadataInteger
  // 
  typedef ::MetadataInteger MetadataInteger_type;
  typedef ::xsd::cxx::tree::sequence< MetadataInteger_type > MetadataInteger_sequence;
  typedef MetadataInteger_sequence::iterator MetadataInteger_iterator;
  typedef MetadataInteger_sequence::const_iterator MetadataInteger_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataInteger_type, char > MetadataInteger_traits;

  const MetadataInteger_sequence&
  MetadataInteger () const;

  MetadataInteger_sequence&
  MetadataInteger ();

  void
  MetadataInteger (const MetadataInteger_sequence& s);

  // MetadataSet
  // 
  typedef ::MetadataSet MetadataSet_type;
  typedef ::xsd::cxx::tree::sequence< MetadataSet_type > MetadataSet_sequence;
  typedef MetadataSet_sequence::iterator MetadataSet_iterator;
  typedef MetadataSet_sequence::const_iterator MetadataSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataSet_type, char > MetadataSet_traits;

  const MetadataSet_sequence&
  MetadataSet () const;

  MetadataSet_sequence&
  MetadataSet ();

  void
  MetadataSet (const MetadataSet_sequence& s);

  // MetadataString
  // 
  typedef ::MetadataString MetadataString_type;
  typedef ::xsd::cxx::tree::sequence< MetadataString_type > MetadataString_sequence;
  typedef MetadataString_sequence::iterator MetadataString_iterator;
  typedef MetadataString_sequence::const_iterator MetadataString_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataString_type, char > MetadataString_traits;

  const MetadataString_sequence&
  MetadataString () const;

  MetadataString_sequence&
  MetadataString ();

  void
  MetadataString (const MetadataString_sequence& s);

  // Appearance
  // 
  typedef ::Appearance Appearance_type;
  typedef ::xsd::cxx::tree::sequence< Appearance_type > Appearance_sequence;
  typedef Appearance_sequence::iterator Appearance_iterator;
  typedef Appearance_sequence::const_iterator Appearance_const_iterator;
  typedef ::xsd::cxx::tree::traits< Appearance_type, char > Appearance_traits;

  const Appearance_sequence&
  Appearance () const;

  Appearance_sequence&
  Appearance ();

  void
  Appearance (const Appearance_sequence& s);

  // Background
  // 
  typedef ::Background Background_type;
  typedef ::xsd::cxx::tree::sequence< Background_type > Background_sequence;
  typedef Background_sequence::iterator Background_iterator;
  typedef Background_sequence::const_iterator Background_const_iterator;
  typedef ::xsd::cxx::tree::traits< Background_type, char > Background_traits;

  const Background_sequence&
  Background () const;

  Background_sequence&
  Background ();

  void
  Background (const Background_sequence& s);

  // ColorInterpolator
  // 
  typedef ::ColorInterpolator ColorInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ColorInterpolator_type > ColorInterpolator_sequence;
  typedef ColorInterpolator_sequence::iterator ColorInterpolator_iterator;
  typedef ColorInterpolator_sequence::const_iterator ColorInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorInterpolator_type, char > ColorInterpolator_traits;

  const ColorInterpolator_sequence&
  ColorInterpolator () const;

  ColorInterpolator_sequence&
  ColorInterpolator ();

  void
  ColorInterpolator (const ColorInterpolator_sequence& s);

  // CoordinateInterpolator
  // 
  typedef ::CoordinateInterpolator CoordinateInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator_type > CoordinateInterpolator_sequence;
  typedef CoordinateInterpolator_sequence::iterator CoordinateInterpolator_iterator;
  typedef CoordinateInterpolator_sequence::const_iterator CoordinateInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator_type, char > CoordinateInterpolator_traits;

  const CoordinateInterpolator_sequence&
  CoordinateInterpolator () const;

  CoordinateInterpolator_sequence&
  CoordinateInterpolator ();

  void
  CoordinateInterpolator (const CoordinateInterpolator_sequence& s);

  // DirectionalLight
  // 
  typedef ::DirectionalLight DirectionalLight_type;
  typedef ::xsd::cxx::tree::sequence< DirectionalLight_type > DirectionalLight_sequence;
  typedef DirectionalLight_sequence::iterator DirectionalLight_iterator;
  typedef DirectionalLight_sequence::const_iterator DirectionalLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< DirectionalLight_type, char > DirectionalLight_traits;

  const DirectionalLight_sequence&
  DirectionalLight () const;

  DirectionalLight_sequence&
  DirectionalLight ();

  void
  DirectionalLight (const DirectionalLight_sequence& s);

  // Group
  // 
  typedef ::Group Group_type;
  typedef ::xsd::cxx::tree::sequence< Group_type > Group_sequence;
  typedef Group_sequence::iterator Group_iterator;
  typedef Group_sequence::const_iterator Group_const_iterator;
  typedef ::xsd::cxx::tree::traits< Group_type, char > Group_traits;

  const Group_sequence&
  Group () const;

  Group_sequence&
  Group ();

  void
  Group (const Group_sequence& s);

  // NavigationInfo
  // 
  typedef ::NavigationInfo NavigationInfo_type;
  typedef ::xsd::cxx::tree::sequence< NavigationInfo_type > NavigationInfo_sequence;
  typedef NavigationInfo_sequence::iterator NavigationInfo_iterator;
  typedef NavigationInfo_sequence::const_iterator NavigationInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< NavigationInfo_type, char > NavigationInfo_traits;

  const NavigationInfo_sequence&
  NavigationInfo () const;

  NavigationInfo_sequence&
  NavigationInfo ();

  void
  NavigationInfo (const NavigationInfo_sequence& s);

  // NormalInterpolator
  // 
  typedef ::NormalInterpolator NormalInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NormalInterpolator_type > NormalInterpolator_sequence;
  typedef NormalInterpolator_sequence::iterator NormalInterpolator_iterator;
  typedef NormalInterpolator_sequence::const_iterator NormalInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NormalInterpolator_type, char > NormalInterpolator_traits;

  const NormalInterpolator_sequence&
  NormalInterpolator () const;

  NormalInterpolator_sequence&
  NormalInterpolator ();

  void
  NormalInterpolator (const NormalInterpolator_sequence& s);

  // OrientationInterpolator
  // 
  typedef ::OrientationInterpolator OrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< OrientationInterpolator_type > OrientationInterpolator_sequence;
  typedef OrientationInterpolator_sequence::iterator OrientationInterpolator_iterator;
  typedef OrientationInterpolator_sequence::const_iterator OrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< OrientationInterpolator_type, char > OrientationInterpolator_traits;

  const OrientationInterpolator_sequence&
  OrientationInterpolator () const;

  OrientationInterpolator_sequence&
  OrientationInterpolator ();

  void
  OrientationInterpolator (const OrientationInterpolator_sequence& s);

  // PositionInterpolator
  // 
  typedef ::PositionInterpolator PositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator_type > PositionInterpolator_sequence;
  typedef PositionInterpolator_sequence::iterator PositionInterpolator_iterator;
  typedef PositionInterpolator_sequence::const_iterator PositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator_type, char > PositionInterpolator_traits;

  const PositionInterpolator_sequence&
  PositionInterpolator () const;

  PositionInterpolator_sequence&
  PositionInterpolator ();

  void
  PositionInterpolator (const PositionInterpolator_sequence& s);

  // ScalarInterpolator
  // 
  typedef ::ScalarInterpolator ScalarInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ScalarInterpolator_type > ScalarInterpolator_sequence;
  typedef ScalarInterpolator_sequence::iterator ScalarInterpolator_iterator;
  typedef ScalarInterpolator_sequence::const_iterator ScalarInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ScalarInterpolator_type, char > ScalarInterpolator_traits;

  const ScalarInterpolator_sequence&
  ScalarInterpolator () const;

  ScalarInterpolator_sequence&
  ScalarInterpolator ();

  void
  ScalarInterpolator (const ScalarInterpolator_sequence& s);

  // Shape
  // 
  typedef ::Shape Shape_type;
  typedef ::xsd::cxx::tree::sequence< Shape_type > Shape_sequence;
  typedef Shape_sequence::iterator Shape_iterator;
  typedef Shape_sequence::const_iterator Shape_const_iterator;
  typedef ::xsd::cxx::tree::traits< Shape_type, char > Shape_traits;

  const Shape_sequence&
  Shape () const;

  Shape_sequence&
  Shape ();

  void
  Shape (const Shape_sequence& s);

  // TimeSensor
  // 
  typedef ::TimeSensor TimeSensor_type;
  typedef ::xsd::cxx::tree::sequence< TimeSensor_type > TimeSensor_sequence;
  typedef TimeSensor_sequence::iterator TimeSensor_iterator;
  typedef TimeSensor_sequence::const_iterator TimeSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeSensor_type, char > TimeSensor_traits;

  const TimeSensor_sequence&
  TimeSensor () const;

  TimeSensor_sequence&
  TimeSensor ();

  void
  TimeSensor (const TimeSensor_sequence& s);

  // Transform
  // 
  typedef ::Transform Transform_type;
  typedef ::xsd::cxx::tree::sequence< Transform_type > Transform_sequence;
  typedef Transform_sequence::iterator Transform_iterator;
  typedef Transform_sequence::const_iterator Transform_const_iterator;
  typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

  const Transform_sequence&
  Transform () const;

  Transform_sequence&
  Transform ();

  void
  Transform (const Transform_sequence& s);

  // Viewpoint
  // 
  typedef ::Viewpoint Viewpoint_type;
  typedef ::xsd::cxx::tree::sequence< Viewpoint_type > Viewpoint_sequence;
  typedef Viewpoint_sequence::iterator Viewpoint_iterator;
  typedef Viewpoint_sequence::const_iterator Viewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< Viewpoint_type, char > Viewpoint_traits;

  const Viewpoint_sequence&
  Viewpoint () const;

  Viewpoint_sequence&
  Viewpoint ();

  void
  Viewpoint (const Viewpoint_sequence& s);

  // WorldInfo
  // 
  typedef ::WorldInfo WorldInfo_type;
  typedef ::xsd::cxx::tree::sequence< WorldInfo_type > WorldInfo_sequence;
  typedef WorldInfo_sequence::iterator WorldInfo_iterator;
  typedef WorldInfo_sequence::const_iterator WorldInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< WorldInfo_type, char > WorldInfo_traits;

  const WorldInfo_sequence&
  WorldInfo () const;

  WorldInfo_sequence&
  WorldInfo ();

  void
  WorldInfo (const WorldInfo_sequence& s);

  // Anchor
  // 
  typedef ::Anchor Anchor_type;
  typedef ::xsd::cxx::tree::sequence< Anchor_type > Anchor_sequence;
  typedef Anchor_sequence::iterator Anchor_iterator;
  typedef Anchor_sequence::const_iterator Anchor_const_iterator;
  typedef ::xsd::cxx::tree::traits< Anchor_type, char > Anchor_traits;

  const Anchor_sequence&
  Anchor () const;

  Anchor_sequence&
  Anchor ();

  void
  Anchor (const Anchor_sequence& s);

  // BooleanFilter
  // 
  typedef ::BooleanFilter BooleanFilter_type;
  typedef ::xsd::cxx::tree::sequence< BooleanFilter_type > BooleanFilter_sequence;
  typedef BooleanFilter_sequence::iterator BooleanFilter_iterator;
  typedef BooleanFilter_sequence::const_iterator BooleanFilter_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanFilter_type, char > BooleanFilter_traits;

  const BooleanFilter_sequence&
  BooleanFilter () const;

  BooleanFilter_sequence&
  BooleanFilter ();

  void
  BooleanFilter (const BooleanFilter_sequence& s);

  // BooleanSequencer
  // 
  typedef ::BooleanSequencer BooleanSequencer_type;
  typedef ::xsd::cxx::tree::sequence< BooleanSequencer_type > BooleanSequencer_sequence;
  typedef BooleanSequencer_sequence::iterator BooleanSequencer_iterator;
  typedef BooleanSequencer_sequence::const_iterator BooleanSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanSequencer_type, char > BooleanSequencer_traits;

  const BooleanSequencer_sequence&
  BooleanSequencer () const;

  BooleanSequencer_sequence&
  BooleanSequencer ();

  void
  BooleanSequencer (const BooleanSequencer_sequence& s);

  // BooleanToggle
  // 
  typedef ::BooleanToggle BooleanToggle_type;
  typedef ::xsd::cxx::tree::sequence< BooleanToggle_type > BooleanToggle_sequence;
  typedef BooleanToggle_sequence::iterator BooleanToggle_iterator;
  typedef BooleanToggle_sequence::const_iterator BooleanToggle_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanToggle_type, char > BooleanToggle_traits;

  const BooleanToggle_sequence&
  BooleanToggle () const;

  BooleanToggle_sequence&
  BooleanToggle ();

  void
  BooleanToggle (const BooleanToggle_sequence& s);

  // BooleanTrigger
  // 
  typedef ::BooleanTrigger BooleanTrigger_type;
  typedef ::xsd::cxx::tree::sequence< BooleanTrigger_type > BooleanTrigger_sequence;
  typedef BooleanTrigger_sequence::iterator BooleanTrigger_iterator;
  typedef BooleanTrigger_sequence::const_iterator BooleanTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanTrigger_type, char > BooleanTrigger_traits;

  const BooleanTrigger_sequence&
  BooleanTrigger () const;

  BooleanTrigger_sequence&
  BooleanTrigger ();

  void
  BooleanTrigger (const BooleanTrigger_sequence& s);

  // CylinderSensor
  // 
  typedef ::CylinderSensor CylinderSensor_type;
  typedef ::xsd::cxx::tree::sequence< CylinderSensor_type > CylinderSensor_sequence;
  typedef CylinderSensor_sequence::iterator CylinderSensor_iterator;
  typedef CylinderSensor_sequence::const_iterator CylinderSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< CylinderSensor_type, char > CylinderSensor_traits;

  const CylinderSensor_sequence&
  CylinderSensor () const;

  CylinderSensor_sequence&
  CylinderSensor ();

  void
  CylinderSensor (const CylinderSensor_sequence& s);

  // Inline
  // 
  typedef ::Inline Inline_type;
  typedef ::xsd::cxx::tree::sequence< Inline_type > Inline_sequence;
  typedef Inline_sequence::iterator Inline_iterator;
  typedef Inline_sequence::const_iterator Inline_const_iterator;
  typedef ::xsd::cxx::tree::traits< Inline_type, char > Inline_traits;

  const Inline_sequence&
  Inline () const;

  Inline_sequence&
  Inline ();

  void
  Inline (const Inline_sequence& s);

  // IntegerSequencer
  // 
  typedef ::IntegerSequencer IntegerSequencer_type;
  typedef ::xsd::cxx::tree::sequence< IntegerSequencer_type > IntegerSequencer_sequence;
  typedef IntegerSequencer_sequence::iterator IntegerSequencer_iterator;
  typedef IntegerSequencer_sequence::const_iterator IntegerSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerSequencer_type, char > IntegerSequencer_traits;

  const IntegerSequencer_sequence&
  IntegerSequencer () const;

  IntegerSequencer_sequence&
  IntegerSequencer ();

  void
  IntegerSequencer (const IntegerSequencer_sequence& s);

  // IntegerTrigger
  // 
  typedef ::IntegerTrigger IntegerTrigger_type;
  typedef ::xsd::cxx::tree::sequence< IntegerTrigger_type > IntegerTrigger_sequence;
  typedef IntegerTrigger_sequence::iterator IntegerTrigger_iterator;
  typedef IntegerTrigger_sequence::const_iterator IntegerTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerTrigger_type, char > IntegerTrigger_traits;

  const IntegerTrigger_sequence&
  IntegerTrigger () const;

  IntegerTrigger_sequence&
  IntegerTrigger ();

  void
  IntegerTrigger (const IntegerTrigger_sequence& s);

  // KeySensor
  // 
  typedef ::KeySensor KeySensor_type;
  typedef ::xsd::cxx::tree::sequence< KeySensor_type > KeySensor_sequence;
  typedef KeySensor_sequence::iterator KeySensor_iterator;
  typedef KeySensor_sequence::const_iterator KeySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< KeySensor_type, char > KeySensor_traits;

  const KeySensor_sequence&
  KeySensor () const;

  KeySensor_sequence&
  KeySensor ();

  void
  KeySensor (const KeySensor_sequence& s);

  // PlaneSensor
  // 
  typedef ::PlaneSensor PlaneSensor_type;
  typedef ::xsd::cxx::tree::sequence< PlaneSensor_type > PlaneSensor_sequence;
  typedef PlaneSensor_sequence::iterator PlaneSensor_iterator;
  typedef PlaneSensor_sequence::const_iterator PlaneSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< PlaneSensor_type, char > PlaneSensor_traits;

  const PlaneSensor_sequence&
  PlaneSensor () const;

  PlaneSensor_sequence&
  PlaneSensor ();

  void
  PlaneSensor (const PlaneSensor_sequence& s);

  // PointLight
  // 
  typedef ::PointLight PointLight_type;
  typedef ::xsd::cxx::tree::sequence< PointLight_type > PointLight_sequence;
  typedef PointLight_sequence::iterator PointLight_iterator;
  typedef PointLight_sequence::const_iterator PointLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< PointLight_type, char > PointLight_traits;

  const PointLight_sequence&
  PointLight () const;

  PointLight_sequence&
  PointLight ();

  void
  PointLight (const PointLight_sequence& s);

  // ProximitySensor
  // 
  typedef ::ProximitySensor ProximitySensor_type;
  typedef ::xsd::cxx::tree::sequence< ProximitySensor_type > ProximitySensor_sequence;
  typedef ProximitySensor_sequence::iterator ProximitySensor_iterator;
  typedef ProximitySensor_sequence::const_iterator ProximitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProximitySensor_type, char > ProximitySensor_traits;

  const ProximitySensor_sequence&
  ProximitySensor () const;

  ProximitySensor_sequence&
  ProximitySensor ();

  void
  ProximitySensor (const ProximitySensor_sequence& s);

  // SphereSensor
  // 
  typedef ::SphereSensor SphereSensor_type;
  typedef ::xsd::cxx::tree::sequence< SphereSensor_type > SphereSensor_sequence;
  typedef SphereSensor_sequence::iterator SphereSensor_iterator;
  typedef SphereSensor_sequence::const_iterator SphereSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< SphereSensor_type, char > SphereSensor_traits;

  const SphereSensor_sequence&
  SphereSensor () const;

  SphereSensor_sequence&
  SphereSensor ();

  void
  SphereSensor (const SphereSensor_sequence& s);

  // SpotLight
  // 
  typedef ::SpotLight SpotLight_type;
  typedef ::xsd::cxx::tree::sequence< SpotLight_type > SpotLight_sequence;
  typedef SpotLight_sequence::iterator SpotLight_iterator;
  typedef SpotLight_sequence::const_iterator SpotLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< SpotLight_type, char > SpotLight_traits;

  const SpotLight_sequence&
  SpotLight () const;

  SpotLight_sequence&
  SpotLight ();

  void
  SpotLight (const SpotLight_sequence& s);

  // StringSensor
  // 
  typedef ::StringSensor StringSensor_type;
  typedef ::xsd::cxx::tree::sequence< StringSensor_type > StringSensor_sequence;
  typedef StringSensor_sequence::iterator StringSensor_iterator;
  typedef StringSensor_sequence::const_iterator StringSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< StringSensor_type, char > StringSensor_traits;

  const StringSensor_sequence&
  StringSensor () const;

  StringSensor_sequence&
  StringSensor ();

  void
  StringSensor (const StringSensor_sequence& s);

  // Switch
  // 
  typedef ::Switch Switch_type;
  typedef ::xsd::cxx::tree::sequence< Switch_type > Switch_sequence;
  typedef Switch_sequence::iterator Switch_iterator;
  typedef Switch_sequence::const_iterator Switch_const_iterator;
  typedef ::xsd::cxx::tree::traits< Switch_type, char > Switch_traits;

  const Switch_sequence&
  Switch () const;

  Switch_sequence&
  Switch ();

  void
  Switch (const Switch_sequence& s);

  // TimeTrigger
  // 
  typedef ::TimeTrigger TimeTrigger_type;
  typedef ::xsd::cxx::tree::sequence< TimeTrigger_type > TimeTrigger_sequence;
  typedef TimeTrigger_sequence::iterator TimeTrigger_iterator;
  typedef TimeTrigger_sequence::const_iterator TimeTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeTrigger_type, char > TimeTrigger_traits;

  const TimeTrigger_sequence&
  TimeTrigger () const;

  TimeTrigger_sequence&
  TimeTrigger ();

  void
  TimeTrigger (const TimeTrigger_sequence& s);

  // TouchSensor
  // 
  typedef ::TouchSensor TouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< TouchSensor_type > TouchSensor_sequence;
  typedef TouchSensor_sequence::iterator TouchSensor_iterator;
  typedef TouchSensor_sequence::const_iterator TouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TouchSensor_type, char > TouchSensor_traits;

  const TouchSensor_sequence&
  TouchSensor () const;

  TouchSensor_sequence&
  TouchSensor ();

  void
  TouchSensor (const TouchSensor_sequence& s);

  // AudioClip
  // 
  typedef ::AudioClip AudioClip_type;
  typedef ::xsd::cxx::tree::sequence< AudioClip_type > AudioClip_sequence;
  typedef AudioClip_sequence::iterator AudioClip_iterator;
  typedef AudioClip_sequence::const_iterator AudioClip_const_iterator;
  typedef ::xsd::cxx::tree::traits< AudioClip_type, char > AudioClip_traits;

  const AudioClip_sequence&
  AudioClip () const;

  AudioClip_sequence&
  AudioClip ();

  void
  AudioClip (const AudioClip_sequence& s);

  // Billboard
  // 
  typedef ::Billboard Billboard_type;
  typedef ::xsd::cxx::tree::sequence< Billboard_type > Billboard_sequence;
  typedef Billboard_sequence::iterator Billboard_iterator;
  typedef Billboard_sequence::const_iterator Billboard_const_iterator;
  typedef ::xsd::cxx::tree::traits< Billboard_type, char > Billboard_traits;

  const Billboard_sequence&
  Billboard () const;

  Billboard_sequence&
  Billboard ();

  void
  Billboard (const Billboard_sequence& s);

  // Collision
  // 
  typedef ::Collision Collision_type;
  typedef ::xsd::cxx::tree::sequence< Collision_type > Collision_sequence;
  typedef Collision_sequence::iterator Collision_iterator;
  typedef Collision_sequence::const_iterator Collision_const_iterator;
  typedef ::xsd::cxx::tree::traits< Collision_type, char > Collision_traits;

  const Collision_sequence&
  Collision () const;

  Collision_sequence&
  Collision ();

  void
  Collision (const Collision_sequence& s);

  // Fog
  // 
  typedef ::Fog Fog_type;
  typedef ::xsd::cxx::tree::sequence< Fog_type > Fog_sequence;
  typedef Fog_sequence::iterator Fog_iterator;
  typedef Fog_sequence::const_iterator Fog_const_iterator;
  typedef ::xsd::cxx::tree::traits< Fog_type, char > Fog_traits;

  const Fog_sequence&
  Fog () const;

  Fog_sequence&
  Fog ();

  void
  Fog (const Fog_sequence& s);

  // LoadSensor
  // 
  typedef ::LoadSensor LoadSensor_type;
  typedef ::xsd::cxx::tree::sequence< LoadSensor_type > LoadSensor_sequence;
  typedef LoadSensor_sequence::iterator LoadSensor_iterator;
  typedef LoadSensor_sequence::const_iterator LoadSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< LoadSensor_type, char > LoadSensor_traits;

  const LoadSensor_sequence&
  LoadSensor () const;

  LoadSensor_sequence&
  LoadSensor ();

  void
  LoadSensor (const LoadSensor_sequence& s);

  // LocalFog
  // 
  typedef ::LocalFog LocalFog_type;
  typedef ::xsd::cxx::tree::sequence< LocalFog_type > LocalFog_sequence;
  typedef LocalFog_sequence::iterator LocalFog_iterator;
  typedef LocalFog_sequence::const_iterator LocalFog_const_iterator;
  typedef ::xsd::cxx::tree::traits< LocalFog_type, char > LocalFog_traits;

  const LocalFog_sequence&
  LocalFog () const;

  LocalFog_sequence&
  LocalFog ();

  void
  LocalFog (const LocalFog_sequence& s);

  // LOD
  // 
  typedef ::LOD LOD_type;
  typedef ::xsd::cxx::tree::sequence< LOD_type > LOD_sequence;
  typedef LOD_sequence::iterator LOD_iterator;
  typedef LOD_sequence::const_iterator LOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOD_type, char > LOD_traits;

  const LOD_sequence&
  LOD () const;

  LOD_sequence&
  LOD ();

  void
  LOD (const LOD_sequence& s);

  // Script
  // 
  typedef ::Script Script_type;
  typedef ::xsd::cxx::tree::sequence< Script_type > Script_sequence;
  typedef Script_sequence::iterator Script_iterator;
  typedef Script_sequence::const_iterator Script_const_iterator;
  typedef ::xsd::cxx::tree::traits< Script_type, char > Script_traits;

  const Script_sequence&
  Script () const;

  Script_sequence&
  Script ();

  void
  Script (const Script_sequence& s);

  // Sound
  // 
  typedef ::Sound Sound_type;
  typedef ::xsd::cxx::tree::sequence< Sound_type > Sound_sequence;
  typedef Sound_sequence::iterator Sound_iterator;
  typedef Sound_sequence::const_iterator Sound_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sound_type, char > Sound_traits;

  const Sound_sequence&
  Sound () const;

  Sound_sequence&
  Sound ();

  void
  Sound (const Sound_sequence& s);

  // VisibilitySensor
  // 
  typedef ::VisibilitySensor VisibilitySensor_type;
  typedef ::xsd::cxx::tree::sequence< VisibilitySensor_type > VisibilitySensor_sequence;
  typedef VisibilitySensor_sequence::iterator VisibilitySensor_iterator;
  typedef VisibilitySensor_sequence::const_iterator VisibilitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< VisibilitySensor_type, char > VisibilitySensor_traits;

  const VisibilitySensor_sequence&
  VisibilitySensor () const;

  VisibilitySensor_sequence&
  VisibilitySensor ();

  void
  VisibilitySensor (const VisibilitySensor_sequence& s);

  // CoordinateInterpolator2D
  // 
  typedef ::CoordinateInterpolator2D CoordinateInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator2D_type > CoordinateInterpolator2D_sequence;
  typedef CoordinateInterpolator2D_sequence::iterator CoordinateInterpolator2D_iterator;
  typedef CoordinateInterpolator2D_sequence::const_iterator CoordinateInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator2D_type, char > CoordinateInterpolator2D_traits;

  const CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D () const;

  CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D ();

  void
  CoordinateInterpolator2D (const CoordinateInterpolator2D_sequence& s);

  // PositionInterpolator2D
  // 
  typedef ::PositionInterpolator2D PositionInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator2D_type > PositionInterpolator2D_sequence;
  typedef PositionInterpolator2D_sequence::iterator PositionInterpolator2D_iterator;
  typedef PositionInterpolator2D_sequence::const_iterator PositionInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator2D_type, char > PositionInterpolator2D_traits;

  const PositionInterpolator2D_sequence&
  PositionInterpolator2D () const;

  PositionInterpolator2D_sequence&
  PositionInterpolator2D ();

  void
  PositionInterpolator2D (const PositionInterpolator2D_sequence& s);

  // StaticGroup
  // 
  typedef ::StaticGroup StaticGroup_type;
  typedef ::xsd::cxx::tree::sequence< StaticGroup_type > StaticGroup_sequence;
  typedef StaticGroup_sequence::iterator StaticGroup_iterator;
  typedef StaticGroup_sequence::const_iterator StaticGroup_const_iterator;
  typedef ::xsd::cxx::tree::traits< StaticGroup_type, char > StaticGroup_traits;

  const StaticGroup_sequence&
  StaticGroup () const;

  StaticGroup_sequence&
  StaticGroup ();

  void
  StaticGroup (const StaticGroup_sequence& s);

  // CADAssembly
  // 
  typedef ::CADAssembly CADAssembly_type;
  typedef ::xsd::cxx::tree::sequence< CADAssembly_type > CADAssembly_sequence;
  typedef CADAssembly_sequence::iterator CADAssembly_iterator;
  typedef CADAssembly_sequence::const_iterator CADAssembly_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADAssembly_type, char > CADAssembly_traits;

  const CADAssembly_sequence&
  CADAssembly () const;

  CADAssembly_sequence&
  CADAssembly ();

  void
  CADAssembly (const CADAssembly_sequence& s);

  // CADLayer
  // 
  typedef ::CADLayer CADLayer_type;
  typedef ::xsd::cxx::tree::sequence< CADLayer_type > CADLayer_sequence;
  typedef CADLayer_sequence::iterator CADLayer_iterator;
  typedef CADLayer_sequence::const_iterator CADLayer_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADLayer_type, char > CADLayer_traits;

  const CADLayer_sequence&
  CADLayer () const;

  CADLayer_sequence&
  CADLayer ();

  void
  CADLayer (const CADLayer_sequence& s);

  // EspduTransform
  // 
  typedef ::EspduTransform EspduTransform_type;
  typedef ::xsd::cxx::tree::sequence< EspduTransform_type > EspduTransform_sequence;
  typedef EspduTransform_sequence::iterator EspduTransform_iterator;
  typedef EspduTransform_sequence::const_iterator EspduTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< EspduTransform_type, char > EspduTransform_traits;

  const EspduTransform_sequence&
  EspduTransform () const;

  EspduTransform_sequence&
  EspduTransform ();

  void
  EspduTransform (const EspduTransform_sequence& s);

  // ReceiverPdu
  // 
  typedef ::ReceiverPdu ReceiverPdu_type;
  typedef ::xsd::cxx::tree::sequence< ReceiverPdu_type > ReceiverPdu_sequence;
  typedef ReceiverPdu_sequence::iterator ReceiverPdu_iterator;
  typedef ReceiverPdu_sequence::const_iterator ReceiverPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< ReceiverPdu_type, char > ReceiverPdu_traits;

  const ReceiverPdu_sequence&
  ReceiverPdu () const;

  ReceiverPdu_sequence&
  ReceiverPdu ();

  void
  ReceiverPdu (const ReceiverPdu_sequence& s);

  // SignalPdu
  // 
  typedef ::SignalPdu SignalPdu_type;
  typedef ::xsd::cxx::tree::sequence< SignalPdu_type > SignalPdu_sequence;
  typedef SignalPdu_sequence::iterator SignalPdu_iterator;
  typedef SignalPdu_sequence::const_iterator SignalPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< SignalPdu_type, char > SignalPdu_traits;

  const SignalPdu_sequence&
  SignalPdu () const;

  SignalPdu_sequence&
  SignalPdu ();

  void
  SignalPdu (const SignalPdu_sequence& s);

  // TransmitterPdu
  // 
  typedef ::TransmitterPdu TransmitterPdu_type;
  typedef ::xsd::cxx::tree::sequence< TransmitterPdu_type > TransmitterPdu_sequence;
  typedef TransmitterPdu_sequence::iterator TransmitterPdu_iterator;
  typedef TransmitterPdu_sequence::const_iterator TransmitterPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< TransmitterPdu_type, char > TransmitterPdu_traits;

  const TransmitterPdu_sequence&
  TransmitterPdu () const;

  TransmitterPdu_sequence&
  TransmitterPdu ();

  void
  TransmitterPdu (const TransmitterPdu_sequence& s);

  // GeoLocation
  // 
  typedef ::GeoLocation GeoLocation_type;
  typedef ::xsd::cxx::tree::sequence< GeoLocation_type > GeoLocation_sequence;
  typedef GeoLocation_sequence::iterator GeoLocation_iterator;
  typedef GeoLocation_sequence::const_iterator GeoLocation_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLocation_type, char > GeoLocation_traits;

  const GeoLocation_sequence&
  GeoLocation () const;

  GeoLocation_sequence&
  GeoLocation ();

  void
  GeoLocation (const GeoLocation_sequence& s);

  // GeoLOD
  // 
  typedef ::GeoLOD GeoLOD_type;
  typedef ::xsd::cxx::tree::sequence< GeoLOD_type > GeoLOD_sequence;
  typedef GeoLOD_sequence::iterator GeoLOD_iterator;
  typedef GeoLOD_sequence::const_iterator GeoLOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLOD_type, char > GeoLOD_traits;

  const GeoLOD_sequence&
  GeoLOD () const;

  GeoLOD_sequence&
  GeoLOD ();

  void
  GeoLOD (const GeoLOD_sequence& s);

  // GeoMetadata
  // 
  typedef ::GeoMetadata GeoMetadata_type;
  typedef ::xsd::cxx::tree::sequence< GeoMetadata_type > GeoMetadata_sequence;
  typedef GeoMetadata_sequence::iterator GeoMetadata_iterator;
  typedef GeoMetadata_sequence::const_iterator GeoMetadata_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoMetadata_type, char > GeoMetadata_traits;

  const GeoMetadata_sequence&
  GeoMetadata () const;

  GeoMetadata_sequence&
  GeoMetadata ();

  void
  GeoMetadata (const GeoMetadata_sequence& s);

  // GeoOrigin
  // 
  typedef ::GeoOrigin GeoOrigin_type;
  typedef ::xsd::cxx::tree::sequence< GeoOrigin_type > GeoOrigin_sequence;
  typedef GeoOrigin_sequence::iterator GeoOrigin_iterator;
  typedef GeoOrigin_sequence::const_iterator GeoOrigin_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_sequence&
  GeoOrigin () const;

  GeoOrigin_sequence&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_sequence& s);

  // GeoPositionInterpolator
  // 
  typedef ::GeoPositionInterpolator GeoPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< GeoPositionInterpolator_type > GeoPositionInterpolator_sequence;
  typedef GeoPositionInterpolator_sequence::iterator GeoPositionInterpolator_iterator;
  typedef GeoPositionInterpolator_sequence::const_iterator GeoPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoPositionInterpolator_type, char > GeoPositionInterpolator_traits;

  const GeoPositionInterpolator_sequence&
  GeoPositionInterpolator () const;

  GeoPositionInterpolator_sequence&
  GeoPositionInterpolator ();

  void
  GeoPositionInterpolator (const GeoPositionInterpolator_sequence& s);

  // GeoTouchSensor
  // 
  typedef ::GeoTouchSensor GeoTouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< GeoTouchSensor_type > GeoTouchSensor_sequence;
  typedef GeoTouchSensor_sequence::iterator GeoTouchSensor_iterator;
  typedef GeoTouchSensor_sequence::const_iterator GeoTouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoTouchSensor_type, char > GeoTouchSensor_traits;

  const GeoTouchSensor_sequence&
  GeoTouchSensor () const;

  GeoTouchSensor_sequence&
  GeoTouchSensor ();

  void
  GeoTouchSensor (const GeoTouchSensor_sequence& s);

  // GeoViewpoint
  // 
  typedef ::GeoViewpoint GeoViewpoint_type;
  typedef ::xsd::cxx::tree::sequence< GeoViewpoint_type > GeoViewpoint_sequence;
  typedef GeoViewpoint_sequence::iterator GeoViewpoint_iterator;
  typedef GeoViewpoint_sequence::const_iterator GeoViewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoViewpoint_type, char > GeoViewpoint_traits;

  const GeoViewpoint_sequence&
  GeoViewpoint () const;

  GeoViewpoint_sequence&
  GeoViewpoint ();

  void
  GeoViewpoint (const GeoViewpoint_sequence& s);

  // HAnimHumanoid
  // 
  typedef ::HAnimHumanoid HAnimHumanoid_type;
  typedef ::xsd::cxx::tree::sequence< HAnimHumanoid_type > HAnimHumanoid_sequence;
  typedef HAnimHumanoid_sequence::iterator HAnimHumanoid_iterator;
  typedef HAnimHumanoid_sequence::const_iterator HAnimHumanoid_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimHumanoid_type, char > HAnimHumanoid_traits;

  const HAnimHumanoid_sequence&
  HAnimHumanoid () const;

  HAnimHumanoid_sequence&
  HAnimHumanoid ();

  void
  HAnimHumanoid (const HAnimHumanoid_sequence& s);

  // HAnimJoint
  // 
  typedef ::HAnimJoint HAnimJoint_type;
  typedef ::xsd::cxx::tree::sequence< HAnimJoint_type > HAnimJoint_sequence;
  typedef HAnimJoint_sequence::iterator HAnimJoint_iterator;
  typedef HAnimJoint_sequence::const_iterator HAnimJoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimJoint_type, char > HAnimJoint_traits;

  const HAnimJoint_sequence&
  HAnimJoint () const;

  HAnimJoint_sequence&
  HAnimJoint ();

  void
  HAnimJoint (const HAnimJoint_sequence& s);

  // HAnimSegment
  // 
  typedef ::HAnimSegment HAnimSegment_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSegment_type > HAnimSegment_sequence;
  typedef HAnimSegment_sequence::iterator HAnimSegment_iterator;
  typedef HAnimSegment_sequence::const_iterator HAnimSegment_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSegment_type, char > HAnimSegment_traits;

  const HAnimSegment_sequence&
  HAnimSegment () const;

  HAnimSegment_sequence&
  HAnimSegment ();

  void
  HAnimSegment (const HAnimSegment_sequence& s);

  // HAnimSite
  // 
  typedef ::HAnimSite HAnimSite_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSite_type > HAnimSite_sequence;
  typedef HAnimSite_sequence::iterator HAnimSite_iterator;
  typedef HAnimSite_sequence::const_iterator HAnimSite_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSite_type, char > HAnimSite_traits;

  const HAnimSite_sequence&
  HAnimSite () const;

  HAnimSite_sequence&
  HAnimSite ();

  void
  HAnimSite (const HAnimSite_sequence& s);

  // NurbsOrientationInterpolator
  // 
  typedef ::NurbsOrientationInterpolator NurbsOrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsOrientationInterpolator_type > NurbsOrientationInterpolator_sequence;
  typedef NurbsOrientationInterpolator_sequence::iterator NurbsOrientationInterpolator_iterator;
  typedef NurbsOrientationInterpolator_sequence::const_iterator NurbsOrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsOrientationInterpolator_type, char > NurbsOrientationInterpolator_traits;

  const NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator () const;

  NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator ();

  void
  NurbsOrientationInterpolator (const NurbsOrientationInterpolator_sequence& s);

  // NurbsPositionInterpolator
  // 
  typedef ::NurbsPositionInterpolator NurbsPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsPositionInterpolator_type > NurbsPositionInterpolator_sequence;
  typedef NurbsPositionInterpolator_sequence::iterator NurbsPositionInterpolator_iterator;
  typedef NurbsPositionInterpolator_sequence::const_iterator NurbsPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsPositionInterpolator_type, char > NurbsPositionInterpolator_traits;

  const NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator () const;

  NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator ();

  void
  NurbsPositionInterpolator (const NurbsPositionInterpolator_sequence& s);

  // NurbsSurfaceInterpolator
  // 
  typedef ::NurbsSurfaceInterpolator NurbsSurfaceInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSurfaceInterpolator_type > NurbsSurfaceInterpolator_sequence;
  typedef NurbsSurfaceInterpolator_sequence::iterator NurbsSurfaceInterpolator_iterator;
  typedef NurbsSurfaceInterpolator_sequence::const_iterator NurbsSurfaceInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSurfaceInterpolator_type, char > NurbsSurfaceInterpolator_traits;

  const NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator () const;

  NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator ();

  void
  NurbsSurfaceInterpolator (const NurbsSurfaceInterpolator_sequence& s);

  // NurbsSet
  // 
  typedef ::NurbsSet NurbsSet_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSet_type > NurbsSet_sequence;
  typedef NurbsSet_sequence::iterator NurbsSet_iterator;
  typedef NurbsSet_sequence::const_iterator NurbsSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSet_type, char > NurbsSet_traits;

  const NurbsSet_sequence&
  NurbsSet () const;

  NurbsSet_sequence&
  NurbsSet ();

  void
  NurbsSet (const NurbsSet_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Box
  // 
  typedef ::Box Box_type;
  typedef ::xsd::cxx::tree::sequence< Box_type > Box_sequence;
  typedef Box_sequence::iterator Box_iterator;
  typedef Box_sequence::const_iterator Box_const_iterator;
  typedef ::xsd::cxx::tree::traits< Box_type, char > Box_traits;

  const Box_sequence&
  Box () const;

  Box_sequence&
  Box ();

  void
  Box (const Box_sequence& s);

  // Cone
  // 
  typedef ::Cone Cone_type;
  typedef ::xsd::cxx::tree::sequence< Cone_type > Cone_sequence;
  typedef Cone_sequence::iterator Cone_iterator;
  typedef Cone_sequence::const_iterator Cone_const_iterator;
  typedef ::xsd::cxx::tree::traits< Cone_type, char > Cone_traits;

  const Cone_sequence&
  Cone () const;

  Cone_sequence&
  Cone ();

  void
  Cone (const Cone_sequence& s);

  // Cylinder
  // 
  typedef ::Cylinder Cylinder_type;
  typedef ::xsd::cxx::tree::sequence< Cylinder_type > Cylinder_sequence;
  typedef Cylinder_sequence::iterator Cylinder_iterator;
  typedef Cylinder_sequence::const_iterator Cylinder_const_iterator;
  typedef ::xsd::cxx::tree::traits< Cylinder_type, char > Cylinder_traits;

  const Cylinder_sequence&
  Cylinder () const;

  Cylinder_sequence&
  Cylinder ();

  void
  Cylinder (const Cylinder_sequence& s);

  // IndexedFaceSet
  // 
  typedef ::IndexedFaceSet IndexedFaceSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedFaceSet_type > IndexedFaceSet_sequence;
  typedef IndexedFaceSet_sequence::iterator IndexedFaceSet_iterator;
  typedef IndexedFaceSet_sequence::const_iterator IndexedFaceSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedFaceSet_type, char > IndexedFaceSet_traits;

  const IndexedFaceSet_sequence&
  IndexedFaceSet () const;

  IndexedFaceSet_sequence&
  IndexedFaceSet ();

  void
  IndexedFaceSet (const IndexedFaceSet_sequence& s);

  // IndexedLineSet
  // 
  typedef ::IndexedLineSet IndexedLineSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedLineSet_type > IndexedLineSet_sequence;
  typedef IndexedLineSet_sequence::iterator IndexedLineSet_iterator;
  typedef IndexedLineSet_sequence::const_iterator IndexedLineSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedLineSet_type, char > IndexedLineSet_traits;

  const IndexedLineSet_sequence&
  IndexedLineSet () const;

  IndexedLineSet_sequence&
  IndexedLineSet ();

  void
  IndexedLineSet (const IndexedLineSet_sequence& s);

  // IndexedTriangleFanSet
  // 
  typedef ::IndexedTriangleFanSet IndexedTriangleFanSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedTriangleFanSet_type > IndexedTriangleFanSet_sequence;
  typedef IndexedTriangleFanSet_sequence::iterator IndexedTriangleFanSet_iterator;
  typedef IndexedTriangleFanSet_sequence::const_iterator IndexedTriangleFanSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleFanSet_type, char > IndexedTriangleFanSet_traits;

  const IndexedTriangleFanSet_sequence&
  IndexedTriangleFanSet () const;

  IndexedTriangleFanSet_sequence&
  IndexedTriangleFanSet ();

  void
  IndexedTriangleFanSet (const IndexedTriangleFanSet_sequence& s);

  // IndexedTriangleSet
  // 
  typedef ::IndexedTriangleSet IndexedTriangleSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedTriangleSet_type > IndexedTriangleSet_sequence;
  typedef IndexedTriangleSet_sequence::iterator IndexedTriangleSet_iterator;
  typedef IndexedTriangleSet_sequence::const_iterator IndexedTriangleSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleSet_type, char > IndexedTriangleSet_traits;

  const IndexedTriangleSet_sequence&
  IndexedTriangleSet () const;

  IndexedTriangleSet_sequence&
  IndexedTriangleSet ();

  void
  IndexedTriangleSet (const IndexedTriangleSet_sequence& s);

  // IndexedTriangleStripSet
  // 
  typedef ::IndexedTriangleStripSet IndexedTriangleStripSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedTriangleStripSet_type > IndexedTriangleStripSet_sequence;
  typedef IndexedTriangleStripSet_sequence::iterator IndexedTriangleStripSet_iterator;
  typedef IndexedTriangleStripSet_sequence::const_iterator IndexedTriangleStripSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleStripSet_type, char > IndexedTriangleStripSet_traits;

  const IndexedTriangleStripSet_sequence&
  IndexedTriangleStripSet () const;

  IndexedTriangleStripSet_sequence&
  IndexedTriangleStripSet ();

  void
  IndexedTriangleStripSet (const IndexedTriangleStripSet_sequence& s);

  // LineSet
  // 
  typedef ::LineSet LineSet_type;
  typedef ::xsd::cxx::tree::sequence< LineSet_type > LineSet_sequence;
  typedef LineSet_sequence::iterator LineSet_iterator;
  typedef LineSet_sequence::const_iterator LineSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< LineSet_type, char > LineSet_traits;

  const LineSet_sequence&
  LineSet () const;

  LineSet_sequence&
  LineSet ();

  void
  LineSet (const LineSet_sequence& s);

  // PointSet
  // 
  typedef ::PointSet PointSet_type;
  typedef ::xsd::cxx::tree::sequence< PointSet_type > PointSet_sequence;
  typedef PointSet_sequence::iterator PointSet_iterator;
  typedef PointSet_sequence::const_iterator PointSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< PointSet_type, char > PointSet_traits;

  const PointSet_sequence&
  PointSet () const;

  PointSet_sequence&
  PointSet ();

  void
  PointSet (const PointSet_sequence& s);

  // Sphere
  // 
  typedef ::Sphere Sphere_type;
  typedef ::xsd::cxx::tree::sequence< Sphere_type > Sphere_sequence;
  typedef Sphere_sequence::iterator Sphere_iterator;
  typedef Sphere_sequence::const_iterator Sphere_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sphere_type, char > Sphere_traits;

  const Sphere_sequence&
  Sphere () const;

  Sphere_sequence&
  Sphere ();

  void
  Sphere (const Sphere_sequence& s);

  // TriangleFanSet
  // 
  typedef ::TriangleFanSet TriangleFanSet_type;
  typedef ::xsd::cxx::tree::sequence< TriangleFanSet_type > TriangleFanSet_sequence;
  typedef TriangleFanSet_sequence::iterator TriangleFanSet_iterator;
  typedef TriangleFanSet_sequence::const_iterator TriangleFanSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleFanSet_type, char > TriangleFanSet_traits;

  const TriangleFanSet_sequence&
  TriangleFanSet () const;

  TriangleFanSet_sequence&
  TriangleFanSet ();

  void
  TriangleFanSet (const TriangleFanSet_sequence& s);

  // TriangleSet
  // 
  typedef ::TriangleSet TriangleSet_type;
  typedef ::xsd::cxx::tree::sequence< TriangleSet_type > TriangleSet_sequence;
  typedef TriangleSet_sequence::iterator TriangleSet_iterator;
  typedef TriangleSet_sequence::const_iterator TriangleSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleSet_type, char > TriangleSet_traits;

  const TriangleSet_sequence&
  TriangleSet () const;

  TriangleSet_sequence&
  TriangleSet ();

  void
  TriangleSet (const TriangleSet_sequence& s);

  // TriangleStripSet
  // 
  typedef ::TriangleStripSet TriangleStripSet_type;
  typedef ::xsd::cxx::tree::sequence< TriangleStripSet_type > TriangleStripSet_sequence;
  typedef TriangleStripSet_sequence::iterator TriangleStripSet_iterator;
  typedef TriangleStripSet_sequence::const_iterator TriangleStripSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleStripSet_type, char > TriangleStripSet_traits;

  const TriangleStripSet_sequence&
  TriangleStripSet () const;

  TriangleStripSet_sequence&
  TriangleStripSet ();

  void
  TriangleStripSet (const TriangleStripSet_sequence& s);

  // ElevationGrid
  // 
  typedef ::ElevationGrid ElevationGrid_type;
  typedef ::xsd::cxx::tree::sequence< ElevationGrid_type > ElevationGrid_sequence;
  typedef ElevationGrid_sequence::iterator ElevationGrid_iterator;
  typedef ElevationGrid_sequence::const_iterator ElevationGrid_const_iterator;
  typedef ::xsd::cxx::tree::traits< ElevationGrid_type, char > ElevationGrid_traits;

  const ElevationGrid_sequence&
  ElevationGrid () const;

  ElevationGrid_sequence&
  ElevationGrid ();

  void
  ElevationGrid (const ElevationGrid_sequence& s);

  // Polyline2D
  // 
  typedef ::Polyline2D Polyline2D_type;
  typedef ::xsd::cxx::tree::sequence< Polyline2D_type > Polyline2D_sequence;
  typedef Polyline2D_sequence::iterator Polyline2D_iterator;
  typedef Polyline2D_sequence::const_iterator Polyline2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Polyline2D_type, char > Polyline2D_traits;

  const Polyline2D_sequence&
  Polyline2D () const;

  Polyline2D_sequence&
  Polyline2D ();

  void
  Polyline2D (const Polyline2D_sequence& s);

  // Polypoint2D
  // 
  typedef ::Polypoint2D Polypoint2D_type;
  typedef ::xsd::cxx::tree::sequence< Polypoint2D_type > Polypoint2D_sequence;
  typedef Polypoint2D_sequence::iterator Polypoint2D_iterator;
  typedef Polypoint2D_sequence::const_iterator Polypoint2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Polypoint2D_type, char > Polypoint2D_traits;

  const Polypoint2D_sequence&
  Polypoint2D () const;

  Polypoint2D_sequence&
  Polypoint2D ();

  void
  Polypoint2D (const Polypoint2D_sequence& s);

  // Rectangle2D
  // 
  typedef ::Rectangle2D Rectangle2D_type;
  typedef ::xsd::cxx::tree::sequence< Rectangle2D_type > Rectangle2D_sequence;
  typedef Rectangle2D_sequence::iterator Rectangle2D_iterator;
  typedef Rectangle2D_sequence::const_iterator Rectangle2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Rectangle2D_type, char > Rectangle2D_traits;

  const Rectangle2D_sequence&
  Rectangle2D () const;

  Rectangle2D_sequence&
  Rectangle2D ();

  void
  Rectangle2D (const Rectangle2D_sequence& s);

  // TriangleSet2D
  // 
  typedef ::TriangleSet2D TriangleSet2D_type;
  typedef ::xsd::cxx::tree::sequence< TriangleSet2D_type > TriangleSet2D_sequence;
  typedef TriangleSet2D_sequence::iterator TriangleSet2D_iterator;
  typedef TriangleSet2D_sequence::const_iterator TriangleSet2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleSet2D_type, char > TriangleSet2D_traits;

  const TriangleSet2D_sequence&
  TriangleSet2D () const;

  TriangleSet2D_sequence&
  TriangleSet2D ();

  void
  TriangleSet2D (const TriangleSet2D_sequence& s);

  // Extrusion
  // 
  typedef ::Extrusion Extrusion_type;
  typedef ::xsd::cxx::tree::sequence< Extrusion_type > Extrusion_sequence;
  typedef Extrusion_sequence::iterator Extrusion_iterator;
  typedef Extrusion_sequence::const_iterator Extrusion_const_iterator;
  typedef ::xsd::cxx::tree::traits< Extrusion_type, char > Extrusion_traits;

  const Extrusion_sequence&
  Extrusion () const;

  Extrusion_sequence&
  Extrusion ();

  void
  Extrusion (const Extrusion_sequence& s);

  // Text
  // 
  typedef ::Text Text_type;
  typedef ::xsd::cxx::tree::sequence< Text_type > Text_sequence;
  typedef Text_sequence::iterator Text_iterator;
  typedef Text_sequence::const_iterator Text_const_iterator;
  typedef ::xsd::cxx::tree::traits< Text_type, char > Text_traits;

  const Text_sequence&
  Text () const;

  Text_sequence&
  Text ();

  void
  Text (const Text_sequence& s);

  // Arc2D
  // 
  typedef ::Arc2D Arc2D_type;
  typedef ::xsd::cxx::tree::sequence< Arc2D_type > Arc2D_sequence;
  typedef Arc2D_sequence::iterator Arc2D_iterator;
  typedef Arc2D_sequence::const_iterator Arc2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Arc2D_type, char > Arc2D_traits;

  const Arc2D_sequence&
  Arc2D () const;

  Arc2D_sequence&
  Arc2D ();

  void
  Arc2D (const Arc2D_sequence& s);

  // ArcClose2D
  // 
  typedef ::ArcClose2D ArcClose2D_type;
  typedef ::xsd::cxx::tree::sequence< ArcClose2D_type > ArcClose2D_sequence;
  typedef ArcClose2D_sequence::iterator ArcClose2D_iterator;
  typedef ArcClose2D_sequence::const_iterator ArcClose2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< ArcClose2D_type, char > ArcClose2D_traits;

  const ArcClose2D_sequence&
  ArcClose2D () const;

  ArcClose2D_sequence&
  ArcClose2D ();

  void
  ArcClose2D (const ArcClose2D_sequence& s);

  // Circle2D
  // 
  typedef ::Circle2D Circle2D_type;
  typedef ::xsd::cxx::tree::sequence< Circle2D_type > Circle2D_sequence;
  typedef Circle2D_sequence::iterator Circle2D_iterator;
  typedef Circle2D_sequence::const_iterator Circle2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Circle2D_type, char > Circle2D_traits;

  const Circle2D_sequence&
  Circle2D () const;

  Circle2D_sequence&
  Circle2D ();

  void
  Circle2D (const Circle2D_sequence& s);

  // Disk2D
  // 
  typedef ::Disk2D Disk2D_type;
  typedef ::xsd::cxx::tree::sequence< Disk2D_type > Disk2D_sequence;
  typedef Disk2D_sequence::iterator Disk2D_iterator;
  typedef Disk2D_sequence::const_iterator Disk2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Disk2D_type, char > Disk2D_traits;

  const Disk2D_sequence&
  Disk2D () const;

  Disk2D_sequence&
  Disk2D ();

  void
  Disk2D (const Disk2D_sequence& s);

  // QuadSet
  // 
  typedef ::QuadSet QuadSet_type;
  typedef ::xsd::cxx::tree::sequence< QuadSet_type > QuadSet_sequence;
  typedef QuadSet_sequence::iterator QuadSet_iterator;
  typedef QuadSet_sequence::const_iterator QuadSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< QuadSet_type, char > QuadSet_traits;

  const QuadSet_sequence&
  QuadSet () const;

  QuadSet_sequence&
  QuadSet ();

  void
  QuadSet (const QuadSet_sequence& s);

  // IndexedQuadSet
  // 
  typedef ::IndexedQuadSet IndexedQuadSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedQuadSet_type > IndexedQuadSet_sequence;
  typedef IndexedQuadSet_sequence::iterator IndexedQuadSet_iterator;
  typedef IndexedQuadSet_sequence::const_iterator IndexedQuadSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedQuadSet_type, char > IndexedQuadSet_traits;

  const IndexedQuadSet_sequence&
  IndexedQuadSet () const;

  IndexedQuadSet_sequence&
  IndexedQuadSet ();

  void
  IndexedQuadSet (const IndexedQuadSet_sequence& s);

  // GeoElevationGrid
  // 
  typedef ::GeoElevationGrid GeoElevationGrid_type;
  typedef ::xsd::cxx::tree::sequence< GeoElevationGrid_type > GeoElevationGrid_sequence;
  typedef GeoElevationGrid_sequence::iterator GeoElevationGrid_iterator;
  typedef GeoElevationGrid_sequence::const_iterator GeoElevationGrid_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoElevationGrid_type, char > GeoElevationGrid_traits;

  const GeoElevationGrid_sequence&
  GeoElevationGrid () const;

  GeoElevationGrid_sequence&
  GeoElevationGrid ();

  void
  GeoElevationGrid (const GeoElevationGrid_sequence& s);

  // NurbsCurve
  // 
  typedef ::NurbsCurve NurbsCurve_type;
  typedef ::xsd::cxx::tree::sequence< NurbsCurve_type > NurbsCurve_sequence;
  typedef NurbsCurve_sequence::iterator NurbsCurve_iterator;
  typedef NurbsCurve_sequence::const_iterator NurbsCurve_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsCurve_type, char > NurbsCurve_traits;

  const NurbsCurve_sequence&
  NurbsCurve () const;

  NurbsCurve_sequence&
  NurbsCurve ();

  void
  NurbsCurve (const NurbsCurve_sequence& s);

  // NurbsCurve2D
  // 
  typedef ::NurbsCurve2D NurbsCurve2D_type;
  typedef ::xsd::cxx::tree::sequence< NurbsCurve2D_type > NurbsCurve2D_sequence;
  typedef NurbsCurve2D_sequence::iterator NurbsCurve2D_iterator;
  typedef NurbsCurve2D_sequence::const_iterator NurbsCurve2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsCurve2D_type, char > NurbsCurve2D_traits;

  const NurbsCurve2D_sequence&
  NurbsCurve2D () const;

  NurbsCurve2D_sequence&
  NurbsCurve2D ();

  void
  NurbsCurve2D (const NurbsCurve2D_sequence& s);

  // NurbsPatchSurface
  // 
  typedef ::NurbsPatchSurface NurbsPatchSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsPatchSurface_type > NurbsPatchSurface_sequence;
  typedef NurbsPatchSurface_sequence::iterator NurbsPatchSurface_iterator;
  typedef NurbsPatchSurface_sequence::const_iterator NurbsPatchSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsPatchSurface_type, char > NurbsPatchSurface_traits;

  const NurbsPatchSurface_sequence&
  NurbsPatchSurface () const;

  NurbsPatchSurface_sequence&
  NurbsPatchSurface ();

  void
  NurbsPatchSurface (const NurbsPatchSurface_sequence& s);

  // NurbsSweptSurface
  // 
  typedef ::NurbsSweptSurface NurbsSweptSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSweptSurface_type > NurbsSweptSurface_sequence;
  typedef NurbsSweptSurface_sequence::iterator NurbsSweptSurface_iterator;
  typedef NurbsSweptSurface_sequence::const_iterator NurbsSweptSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSweptSurface_type, char > NurbsSweptSurface_traits;

  const NurbsSweptSurface_sequence&
  NurbsSweptSurface () const;

  NurbsSweptSurface_sequence&
  NurbsSweptSurface ();

  void
  NurbsSweptSurface (const NurbsSweptSurface_sequence& s);

  // NurbsSwungSurface
  // 
  typedef ::NurbsSwungSurface NurbsSwungSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSwungSurface_type > NurbsSwungSurface_sequence;
  typedef NurbsSwungSurface_sequence::iterator NurbsSwungSurface_iterator;
  typedef NurbsSwungSurface_sequence::const_iterator NurbsSwungSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSwungSurface_type, char > NurbsSwungSurface_traits;

  const NurbsSwungSurface_sequence&
  NurbsSwungSurface () const;

  NurbsSwungSurface_sequence&
  NurbsSwungSurface ();

  void
  NurbsSwungSurface (const NurbsSwungSurface_sequence& s);

  // NurbsTrimmedSurface
  // 
  typedef ::NurbsTrimmedSurface NurbsTrimmedSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTrimmedSurface_type > NurbsTrimmedSurface_sequence;
  typedef NurbsTrimmedSurface_sequence::iterator NurbsTrimmedSurface_iterator;
  typedef NurbsTrimmedSurface_sequence::const_iterator NurbsTrimmedSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTrimmedSurface_type, char > NurbsTrimmedSurface_traits;

  const NurbsTrimmedSurface_sequence&
  NurbsTrimmedSurface () const;

  NurbsTrimmedSurface_sequence&
  NurbsTrimmedSurface ();

  void
  NurbsTrimmedSurface (const NurbsTrimmedSurface_sequence& s);

  // Color
  // 
  typedef ::Color Color_type;
  typedef ::xsd::cxx::tree::sequence< Color_type > Color_sequence;
  typedef Color_sequence::iterator Color_iterator;
  typedef Color_sequence::const_iterator Color_const_iterator;
  typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

  const Color_sequence&
  Color () const;

  Color_sequence&
  Color ();

  void
  Color (const Color_sequence& s);

  // ColorRGBA
  // 
  typedef ::ColorRGBA ColorRGBA_type;
  typedef ::xsd::cxx::tree::sequence< ColorRGBA_type > ColorRGBA_sequence;
  typedef ColorRGBA_sequence::iterator ColorRGBA_iterator;
  typedef ColorRGBA_sequence::const_iterator ColorRGBA_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorRGBA_type, char > ColorRGBA_traits;

  const ColorRGBA_sequence&
  ColorRGBA () const;

  ColorRGBA_sequence&
  ColorRGBA ();

  void
  ColorRGBA (const ColorRGBA_sequence& s);

  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::sequence< Coordinate_type > Coordinate_sequence;
  typedef Coordinate_sequence::iterator Coordinate_iterator;
  typedef Coordinate_sequence::const_iterator Coordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_sequence&
  Coordinate () const;

  Coordinate_sequence&
  Coordinate ();

  void
  Coordinate (const Coordinate_sequence& s);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateDouble_type > CoordinateDouble_sequence;
  typedef CoordinateDouble_sequence::iterator CoordinateDouble_iterator;
  typedef CoordinateDouble_sequence::const_iterator CoordinateDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_sequence&
  CoordinateDouble () const;

  CoordinateDouble_sequence&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_sequence& s);

  // FontStyle
  // 
  typedef ::FontStyle FontStyle_type;
  typedef ::xsd::cxx::tree::sequence< FontStyle_type > FontStyle_sequence;
  typedef FontStyle_sequence::iterator FontStyle_iterator;
  typedef FontStyle_sequence::const_iterator FontStyle_const_iterator;
  typedef ::xsd::cxx::tree::traits< FontStyle_type, char > FontStyle_traits;

  const FontStyle_sequence&
  FontStyle () const;

  FontStyle_sequence&
  FontStyle ();

  void
  FontStyle (const FontStyle_sequence& s);

  // GeoCoordinate
  // 
  typedef ::GeoCoordinate GeoCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< GeoCoordinate_type > GeoCoordinate_sequence;
  typedef GeoCoordinate_sequence::iterator GeoCoordinate_iterator;
  typedef GeoCoordinate_sequence::const_iterator GeoCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoCoordinate_type, char > GeoCoordinate_traits;

  const GeoCoordinate_sequence&
  GeoCoordinate () const;

  GeoCoordinate_sequence&
  GeoCoordinate ();

  void
  GeoCoordinate (const GeoCoordinate_sequence& s);

  // Normal
  // 
  typedef ::Normal Normal_type;
  typedef ::xsd::cxx::tree::sequence< Normal_type > Normal_sequence;
  typedef Normal_sequence::iterator Normal_iterator;
  typedef Normal_sequence::const_iterator Normal_const_iterator;
  typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

  const Normal_sequence&
  Normal () const;

  Normal_sequence&
  Normal ();

  void
  Normal (const Normal_sequence& s);

  // TextureCoordinate
  // 
  typedef ::TextureCoordinate TextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate_type > TextureCoordinate_sequence;
  typedef TextureCoordinate_sequence::iterator TextureCoordinate_iterator;
  typedef TextureCoordinate_sequence::const_iterator TextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate_type, char > TextureCoordinate_traits;

  const TextureCoordinate_sequence&
  TextureCoordinate () const;

  TextureCoordinate_sequence&
  TextureCoordinate ();

  void
  TextureCoordinate (const TextureCoordinate_sequence& s);

  // NurbsTextureCoordinate
  // 
  typedef ::NurbsTextureCoordinate NurbsTextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTextureCoordinate_type > NurbsTextureCoordinate_sequence;
  typedef NurbsTextureCoordinate_sequence::iterator NurbsTextureCoordinate_iterator;
  typedef NurbsTextureCoordinate_sequence::const_iterator NurbsTextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTextureCoordinate_type, char > NurbsTextureCoordinate_traits;

  const NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate () const;

  NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate ();

  void
  NurbsTextureCoordinate (const NurbsTextureCoordinate_sequence& s);

  // name
  // 
  typedef ::xml_schema::nmtoken name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // value
  // 
  typedef ::SFString value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  fieldValue (const name_type&);

  fieldValue (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  fieldValue (const fieldValue& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual fieldValue*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~fieldValue ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  FillProperties_sequence FillProperties_;
  LineProperties_sequence LineProperties_;
  Material_sequence Material_;
  ComposedShader_sequence ComposedShader_;
  PackagedShader_sequence PackagedShader_;
  ProgramShader_sequence ProgramShader_;
  ComposedCubeMapTexture_sequence ComposedCubeMapTexture_;
  ImageTexture_sequence ImageTexture_;
  MovieTexture_sequence MovieTexture_;
  MultiTexture_sequence MultiTexture_;
  PixelTexture_sequence PixelTexture_;
  GeneratedCubeMapTexture_sequence GeneratedCubeMapTexture_;
  ImageCubeMapTexture_sequence ImageCubeMapTexture_;
  MultiTextureTransform_sequence MultiTextureTransform_;
  TextureTransform_sequence TextureTransform_;
  MetadataDouble_sequence MetadataDouble_;
  MetadataFloat_sequence MetadataFloat_;
  MetadataInteger_sequence MetadataInteger_;
  MetadataSet_sequence MetadataSet_;
  MetadataString_sequence MetadataString_;
  Appearance_sequence Appearance_;
  Background_sequence Background_;
  ColorInterpolator_sequence ColorInterpolator_;
  CoordinateInterpolator_sequence CoordinateInterpolator_;
  DirectionalLight_sequence DirectionalLight_;
  Group_sequence Group_;
  NavigationInfo_sequence NavigationInfo_;
  NormalInterpolator_sequence NormalInterpolator_;
  OrientationInterpolator_sequence OrientationInterpolator_;
  PositionInterpolator_sequence PositionInterpolator_;
  ScalarInterpolator_sequence ScalarInterpolator_;
  Shape_sequence Shape_;
  TimeSensor_sequence TimeSensor_;
  Transform_sequence Transform_;
  Viewpoint_sequence Viewpoint_;
  WorldInfo_sequence WorldInfo_;
  Anchor_sequence Anchor_;
  BooleanFilter_sequence BooleanFilter_;
  BooleanSequencer_sequence BooleanSequencer_;
  BooleanToggle_sequence BooleanToggle_;
  BooleanTrigger_sequence BooleanTrigger_;
  CylinderSensor_sequence CylinderSensor_;
  Inline_sequence Inline_;
  IntegerSequencer_sequence IntegerSequencer_;
  IntegerTrigger_sequence IntegerTrigger_;
  KeySensor_sequence KeySensor_;
  PlaneSensor_sequence PlaneSensor_;
  PointLight_sequence PointLight_;
  ProximitySensor_sequence ProximitySensor_;
  SphereSensor_sequence SphereSensor_;
  SpotLight_sequence SpotLight_;
  StringSensor_sequence StringSensor_;
  Switch_sequence Switch_;
  TimeTrigger_sequence TimeTrigger_;
  TouchSensor_sequence TouchSensor_;
  AudioClip_sequence AudioClip_;
  Billboard_sequence Billboard_;
  Collision_sequence Collision_;
  Fog_sequence Fog_;
  LoadSensor_sequence LoadSensor_;
  LocalFog_sequence LocalFog_;
  LOD_sequence LOD_;
  Script_sequence Script_;
  Sound_sequence Sound_;
  VisibilitySensor_sequence VisibilitySensor_;
  CoordinateInterpolator2D_sequence CoordinateInterpolator2D_;
  PositionInterpolator2D_sequence PositionInterpolator2D_;
  StaticGroup_sequence StaticGroup_;
  CADAssembly_sequence CADAssembly_;
  CADLayer_sequence CADLayer_;
  EspduTransform_sequence EspduTransform_;
  ReceiverPdu_sequence ReceiverPdu_;
  SignalPdu_sequence SignalPdu_;
  TransmitterPdu_sequence TransmitterPdu_;
  GeoLocation_sequence GeoLocation_;
  GeoLOD_sequence GeoLOD_;
  GeoMetadata_sequence GeoMetadata_;
  GeoOrigin_sequence GeoOrigin_;
  GeoPositionInterpolator_sequence GeoPositionInterpolator_;
  GeoTouchSensor_sequence GeoTouchSensor_;
  GeoViewpoint_sequence GeoViewpoint_;
  HAnimHumanoid_sequence HAnimHumanoid_;
  HAnimJoint_sequence HAnimJoint_;
  HAnimSegment_sequence HAnimSegment_;
  HAnimSite_sequence HAnimSite_;
  NurbsOrientationInterpolator_sequence NurbsOrientationInterpolator_;
  NurbsPositionInterpolator_sequence NurbsPositionInterpolator_;
  NurbsSurfaceInterpolator_sequence NurbsSurfaceInterpolator_;
  NurbsSet_sequence NurbsSet_;
  ProtoInstance_sequence ProtoInstance_;
  Box_sequence Box_;
  Cone_sequence Cone_;
  Cylinder_sequence Cylinder_;
  IndexedFaceSet_sequence IndexedFaceSet_;
  IndexedLineSet_sequence IndexedLineSet_;
  IndexedTriangleFanSet_sequence IndexedTriangleFanSet_;
  IndexedTriangleSet_sequence IndexedTriangleSet_;
  IndexedTriangleStripSet_sequence IndexedTriangleStripSet_;
  LineSet_sequence LineSet_;
  PointSet_sequence PointSet_;
  Sphere_sequence Sphere_;
  TriangleFanSet_sequence TriangleFanSet_;
  TriangleSet_sequence TriangleSet_;
  TriangleStripSet_sequence TriangleStripSet_;
  ElevationGrid_sequence ElevationGrid_;
  Polyline2D_sequence Polyline2D_;
  Polypoint2D_sequence Polypoint2D_;
  Rectangle2D_sequence Rectangle2D_;
  TriangleSet2D_sequence TriangleSet2D_;
  Extrusion_sequence Extrusion_;
  Text_sequence Text_;
  Arc2D_sequence Arc2D_;
  ArcClose2D_sequence ArcClose2D_;
  Circle2D_sequence Circle2D_;
  Disk2D_sequence Disk2D_;
  QuadSet_sequence QuadSet_;
  IndexedQuadSet_sequence IndexedQuadSet_;
  GeoElevationGrid_sequence GeoElevationGrid_;
  NurbsCurve_sequence NurbsCurve_;
  NurbsCurve2D_sequence NurbsCurve2D_;
  NurbsPatchSurface_sequence NurbsPatchSurface_;
  NurbsSweptSurface_sequence NurbsSweptSurface_;
  NurbsSwungSurface_sequence NurbsSwungSurface_;
  NurbsTrimmedSurface_sequence NurbsTrimmedSurface_;
  Color_sequence Color_;
  ColorRGBA_sequence ColorRGBA_;
  Coordinate_sequence Coordinate_;
  CoordinateDouble_sequence CoordinateDouble_;
  FontStyle_sequence FontStyle_;
  GeoCoordinate_sequence GeoCoordinate_;
  Normal_sequence Normal_;
  TextureCoordinate_sequence TextureCoordinate_;
  NurbsTextureCoordinate_sequence NurbsTextureCoordinate_;
  ::xsd::cxx::tree::one< name_type > name_;
  value_optional value_;
};

class head: public ::SceneGraphStructureNodeType
{
  public:
  // component
  // 
  typedef ::component component_type;
  typedef ::xsd::cxx::tree::sequence< component_type > component_sequence;
  typedef component_sequence::iterator component_iterator;
  typedef component_sequence::const_iterator component_const_iterator;
  typedef ::xsd::cxx::tree::traits< component_type, char > component_traits;

  const component_sequence&
  component () const;

  component_sequence&
  component ();

  void
  component (const component_sequence& s);

  // meta
  // 
  typedef ::meta meta_type;
  typedef ::xsd::cxx::tree::sequence< meta_type > meta_sequence;
  typedef meta_sequence::iterator meta_iterator;
  typedef meta_sequence::const_iterator meta_const_iterator;
  typedef ::xsd::cxx::tree::traits< meta_type, char > meta_traits;

  const meta_sequence&
  meta () const;

  meta_sequence&
  meta ();

  void
  meta (const meta_sequence& s);

  // Constructors.
  //
  head ();

  head (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  head (const head& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual head*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~head ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  component_sequence component_;
  meta_sequence meta_;
};

class meta: public ::SceneGraphStructureNodeType
{
  public:
  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // content
  // 
  typedef ::SFString content_type;
  typedef ::xsd::cxx::tree::traits< content_type, char > content_traits;

  const content_type&
  content () const;

  content_type&
  content ();

  void
  content (const content_type& x);

  void
  content (::std::auto_ptr< content_type > p);

  // http-equiv
  // 
  typedef ::SFString http_equiv_type;
  typedef ::xsd::cxx::tree::optional< http_equiv_type > http_equiv_optional;
  typedef ::xsd::cxx::tree::traits< http_equiv_type, char > http_equiv_traits;

  const http_equiv_optional&
  http_equiv () const;

  http_equiv_optional&
  http_equiv ();

  void
  http_equiv (const http_equiv_type& x);

  void
  http_equiv (const http_equiv_optional& x);

  void
  http_equiv (::std::auto_ptr< http_equiv_type > p);

  // lang
  // 
  typedef ::SFString lang_type;
  typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
  typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

  const lang_optional&
  lang () const;

  lang_optional&
  lang ();

  void
  lang (const lang_type& x);

  void
  lang (const lang_optional& x);

  void
  lang (::std::auto_ptr< lang_type > p);

  // dir
  // 
  typedef ::metaDirectionValues dir_type;
  typedef ::xsd::cxx::tree::optional< dir_type > dir_optional;
  typedef ::xsd::cxx::tree::traits< dir_type, char > dir_traits;

  const dir_optional&
  dir () const;

  dir_optional&
  dir ();

  void
  dir (const dir_type& x);

  void
  dir (const dir_optional& x);

  void
  dir (::std::auto_ptr< dir_type > p);

  // Constructors.
  //
  meta (const name_type&,
        const content_type&);

  meta (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  meta (const meta& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual meta*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~meta ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< content_type > content_;
  http_equiv_optional http_equiv_;
  lang_optional lang_;
  dir_optional dir_;
};

class ExternProtoDeclare: public ::X3DPrototype
{
  public:
  // field
  // 
  typedef ::field field_type;
  typedef ::xsd::cxx::tree::sequence< field_type > field_sequence;
  typedef field_sequence::iterator field_iterator;
  typedef field_sequence::const_iterator field_const_iterator;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_sequence&
  field () const;

  field_sequence&
  field ();

  void
  field (const field_sequence& s);

  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_type&
  url () const;

  url_type&
  url ();

  void
  url (const url_type& x);

  void
  url (::std::auto_ptr< url_type > p);

  // appinfo
  // 
  typedef ::SFString appinfo_type;
  typedef ::xsd::cxx::tree::optional< appinfo_type > appinfo_optional;
  typedef ::xsd::cxx::tree::traits< appinfo_type, char > appinfo_traits;

  const appinfo_optional&
  appinfo () const;

  appinfo_optional&
  appinfo ();

  void
  appinfo (const appinfo_type& x);

  void
  appinfo (const appinfo_optional& x);

  void
  appinfo (::std::auto_ptr< appinfo_type > p);

  // documentation
  // 
  typedef ::SFString documentation_type;
  typedef ::xsd::cxx::tree::optional< documentation_type > documentation_optional;
  typedef ::xsd::cxx::tree::traits< documentation_type, char > documentation_traits;

  const documentation_optional&
  documentation () const;

  documentation_optional&
  documentation ();

  void
  documentation (const documentation_type& x);

  void
  documentation (const documentation_optional& x);

  void
  documentation (::std::auto_ptr< documentation_type > p);

  // Constructors.
  //
  ExternProtoDeclare (const name_type&,
                      const url_type&);

  ExternProtoDeclare (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  ExternProtoDeclare (const ExternProtoDeclare& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual ExternProtoDeclare*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ExternProtoDeclare ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  field_sequence field_;
  ::xsd::cxx::tree::one< url_type > url_;
  appinfo_optional appinfo_;
  documentation_optional documentation_;
};

class ProtoDeclare: public ::X3DPrototype
{
  public:
  // ProtoInterface
  // 
  typedef ::ProtoInterface ProtoInterface_type;
  typedef ::xsd::cxx::tree::optional< ProtoInterface_type > ProtoInterface_optional;
  typedef ::xsd::cxx::tree::traits< ProtoInterface_type, char > ProtoInterface_traits;

  const ProtoInterface_optional&
  ProtoInterface () const;

  ProtoInterface_optional&
  ProtoInterface ();

  void
  ProtoInterface (const ProtoInterface_type& x);

  void
  ProtoInterface (const ProtoInterface_optional& x);

  void
  ProtoInterface (::std::auto_ptr< ProtoInterface_type > p);

  // ProtoBody
  // 
  typedef ::ProtoBody ProtoBody_type;
  typedef ::xsd::cxx::tree::traits< ProtoBody_type, char > ProtoBody_traits;

  const ProtoBody_type&
  ProtoBody () const;

  ProtoBody_type&
  ProtoBody ();

  void
  ProtoBody (const ProtoBody_type& x);

  void
  ProtoBody (::std::auto_ptr< ProtoBody_type > p);

  // appinfo
  // 
  typedef ::SFString appinfo_type;
  typedef ::xsd::cxx::tree::optional< appinfo_type > appinfo_optional;
  typedef ::xsd::cxx::tree::traits< appinfo_type, char > appinfo_traits;

  const appinfo_optional&
  appinfo () const;

  appinfo_optional&
  appinfo ();

  void
  appinfo (const appinfo_type& x);

  void
  appinfo (const appinfo_optional& x);

  void
  appinfo (::std::auto_ptr< appinfo_type > p);

  // documentation
  // 
  typedef ::SFString documentation_type;
  typedef ::xsd::cxx::tree::optional< documentation_type > documentation_optional;
  typedef ::xsd::cxx::tree::traits< documentation_type, char > documentation_traits;

  const documentation_optional&
  documentation () const;

  documentation_optional&
  documentation ();

  void
  documentation (const documentation_type& x);

  void
  documentation (const documentation_optional& x);

  void
  documentation (::std::auto_ptr< documentation_type > p);

  // Constructors.
  //
  ProtoDeclare (const name_type&,
                const ProtoBody_type&);

  ProtoDeclare (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  ProtoDeclare (const ProtoDeclare& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual ProtoDeclare*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ProtoDeclare ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ProtoInterface_optional ProtoInterface_;
  ::xsd::cxx::tree::one< ProtoBody_type > ProtoBody_;
  appinfo_optional appinfo_;
  documentation_optional documentation_;
};

class ProtoInterface: public ::SceneGraphStructureNodeType
{
  public:
  // field
  // 
  typedef ::field field_type;
  typedef ::xsd::cxx::tree::sequence< field_type > field_sequence;
  typedef field_sequence::iterator field_iterator;
  typedef field_sequence::const_iterator field_const_iterator;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_sequence&
  field () const;

  field_sequence&
  field ();

  void
  field (const field_sequence& s);

  // Constructors.
  //
  ProtoInterface ();

  ProtoInterface (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  ProtoInterface (const ProtoInterface& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual ProtoInterface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ProtoInterface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  field_sequence field_;
};

class ProtoBody: public ::SceneGraphStructureNodeType
{
  public:
  // FillProperties
  // 
  typedef ::FillProperties FillProperties_type;
  typedef ::xsd::cxx::tree::sequence< FillProperties_type > FillProperties_sequence;
  typedef FillProperties_sequence::iterator FillProperties_iterator;
  typedef FillProperties_sequence::const_iterator FillProperties_const_iterator;
  typedef ::xsd::cxx::tree::traits< FillProperties_type, char > FillProperties_traits;

  const FillProperties_sequence&
  FillProperties () const;

  FillProperties_sequence&
  FillProperties ();

  void
  FillProperties (const FillProperties_sequence& s);

  // LineProperties
  // 
  typedef ::LineProperties LineProperties_type;
  typedef ::xsd::cxx::tree::sequence< LineProperties_type > LineProperties_sequence;
  typedef LineProperties_sequence::iterator LineProperties_iterator;
  typedef LineProperties_sequence::const_iterator LineProperties_const_iterator;
  typedef ::xsd::cxx::tree::traits< LineProperties_type, char > LineProperties_traits;

  const LineProperties_sequence&
  LineProperties () const;

  LineProperties_sequence&
  LineProperties ();

  void
  LineProperties (const LineProperties_sequence& s);

  // Material
  // 
  typedef ::Material Material_type;
  typedef ::xsd::cxx::tree::sequence< Material_type > Material_sequence;
  typedef Material_sequence::iterator Material_iterator;
  typedef Material_sequence::const_iterator Material_const_iterator;
  typedef ::xsd::cxx::tree::traits< Material_type, char > Material_traits;

  const Material_sequence&
  Material () const;

  Material_sequence&
  Material ();

  void
  Material (const Material_sequence& s);

  // ComposedShader
  // 
  typedef ::ComposedShader ComposedShader_type;
  typedef ::xsd::cxx::tree::sequence< ComposedShader_type > ComposedShader_sequence;
  typedef ComposedShader_sequence::iterator ComposedShader_iterator;
  typedef ComposedShader_sequence::const_iterator ComposedShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< ComposedShader_type, char > ComposedShader_traits;

  const ComposedShader_sequence&
  ComposedShader () const;

  ComposedShader_sequence&
  ComposedShader ();

  void
  ComposedShader (const ComposedShader_sequence& s);

  // PackagedShader
  // 
  typedef ::PackagedShader PackagedShader_type;
  typedef ::xsd::cxx::tree::sequence< PackagedShader_type > PackagedShader_sequence;
  typedef PackagedShader_sequence::iterator PackagedShader_iterator;
  typedef PackagedShader_sequence::const_iterator PackagedShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< PackagedShader_type, char > PackagedShader_traits;

  const PackagedShader_sequence&
  PackagedShader () const;

  PackagedShader_sequence&
  PackagedShader ();

  void
  PackagedShader (const PackagedShader_sequence& s);

  // ProgramShader
  // 
  typedef ::ProgramShader ProgramShader_type;
  typedef ::xsd::cxx::tree::sequence< ProgramShader_type > ProgramShader_sequence;
  typedef ProgramShader_sequence::iterator ProgramShader_iterator;
  typedef ProgramShader_sequence::const_iterator ProgramShader_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProgramShader_type, char > ProgramShader_traits;

  const ProgramShader_sequence&
  ProgramShader () const;

  ProgramShader_sequence&
  ProgramShader ();

  void
  ProgramShader (const ProgramShader_sequence& s);

  // ComposedCubeMapTexture
  // 
  typedef ::ComposedCubeMapTexture ComposedCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< ComposedCubeMapTexture_type > ComposedCubeMapTexture_sequence;
  typedef ComposedCubeMapTexture_sequence::iterator ComposedCubeMapTexture_iterator;
  typedef ComposedCubeMapTexture_sequence::const_iterator ComposedCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ComposedCubeMapTexture_type, char > ComposedCubeMapTexture_traits;

  const ComposedCubeMapTexture_sequence&
  ComposedCubeMapTexture () const;

  ComposedCubeMapTexture_sequence&
  ComposedCubeMapTexture ();

  void
  ComposedCubeMapTexture (const ComposedCubeMapTexture_sequence& s);

  // ImageTexture
  // 
  typedef ::ImageTexture ImageTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageTexture_type > ImageTexture_sequence;
  typedef ImageTexture_sequence::iterator ImageTexture_iterator;
  typedef ImageTexture_sequence::const_iterator ImageTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageTexture_type, char > ImageTexture_traits;

  const ImageTexture_sequence&
  ImageTexture () const;

  ImageTexture_sequence&
  ImageTexture ();

  void
  ImageTexture (const ImageTexture_sequence& s);

  // MovieTexture
  // 
  typedef ::MovieTexture MovieTexture_type;
  typedef ::xsd::cxx::tree::sequence< MovieTexture_type > MovieTexture_sequence;
  typedef MovieTexture_sequence::iterator MovieTexture_iterator;
  typedef MovieTexture_sequence::const_iterator MovieTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MovieTexture_type, char > MovieTexture_traits;

  const MovieTexture_sequence&
  MovieTexture () const;

  MovieTexture_sequence&
  MovieTexture ();

  void
  MovieTexture (const MovieTexture_sequence& s);

  // MultiTexture
  // 
  typedef ::MultiTexture MultiTexture_type;
  typedef ::xsd::cxx::tree::sequence< MultiTexture_type > MultiTexture_sequence;
  typedef MultiTexture_sequence::iterator MultiTexture_iterator;
  typedef MultiTexture_sequence::const_iterator MultiTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTexture_type, char > MultiTexture_traits;

  const MultiTexture_sequence&
  MultiTexture () const;

  MultiTexture_sequence&
  MultiTexture ();

  void
  MultiTexture (const MultiTexture_sequence& s);

  // PixelTexture
  // 
  typedef ::PixelTexture PixelTexture_type;
  typedef ::xsd::cxx::tree::sequence< PixelTexture_type > PixelTexture_sequence;
  typedef PixelTexture_sequence::iterator PixelTexture_iterator;
  typedef PixelTexture_sequence::const_iterator PixelTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< PixelTexture_type, char > PixelTexture_traits;

  const PixelTexture_sequence&
  PixelTexture () const;

  PixelTexture_sequence&
  PixelTexture ();

  void
  PixelTexture (const PixelTexture_sequence& s);

  // GeneratedCubeMapTexture
  // 
  typedef ::GeneratedCubeMapTexture GeneratedCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< GeneratedCubeMapTexture_type > GeneratedCubeMapTexture_sequence;
  typedef GeneratedCubeMapTexture_sequence::iterator GeneratedCubeMapTexture_iterator;
  typedef GeneratedCubeMapTexture_sequence::const_iterator GeneratedCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeneratedCubeMapTexture_type, char > GeneratedCubeMapTexture_traits;

  const GeneratedCubeMapTexture_sequence&
  GeneratedCubeMapTexture () const;

  GeneratedCubeMapTexture_sequence&
  GeneratedCubeMapTexture ();

  void
  GeneratedCubeMapTexture (const GeneratedCubeMapTexture_sequence& s);

  // ImageCubeMapTexture
  // 
  typedef ::ImageCubeMapTexture ImageCubeMapTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageCubeMapTexture_type > ImageCubeMapTexture_sequence;
  typedef ImageCubeMapTexture_sequence::iterator ImageCubeMapTexture_iterator;
  typedef ImageCubeMapTexture_sequence::const_iterator ImageCubeMapTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageCubeMapTexture_type, char > ImageCubeMapTexture_traits;

  const ImageCubeMapTexture_sequence&
  ImageCubeMapTexture () const;

  ImageCubeMapTexture_sequence&
  ImageCubeMapTexture ();

  void
  ImageCubeMapTexture (const ImageCubeMapTexture_sequence& s);

  // MultiTextureTransform
  // 
  typedef ::MultiTextureTransform MultiTextureTransform_type;
  typedef ::xsd::cxx::tree::sequence< MultiTextureTransform_type > MultiTextureTransform_sequence;
  typedef MultiTextureTransform_sequence::iterator MultiTextureTransform_iterator;
  typedef MultiTextureTransform_sequence::const_iterator MultiTextureTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< MultiTextureTransform_type, char > MultiTextureTransform_traits;

  const MultiTextureTransform_sequence&
  MultiTextureTransform () const;

  MultiTextureTransform_sequence&
  MultiTextureTransform ();

  void
  MultiTextureTransform (const MultiTextureTransform_sequence& s);

  // TextureTransform
  // 
  typedef ::TextureTransform TextureTransform_type;
  typedef ::xsd::cxx::tree::sequence< TextureTransform_type > TextureTransform_sequence;
  typedef TextureTransform_sequence::iterator TextureTransform_iterator;
  typedef TextureTransform_sequence::const_iterator TextureTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureTransform_type, char > TextureTransform_traits;

  const TextureTransform_sequence&
  TextureTransform () const;

  TextureTransform_sequence&
  TextureTransform ();

  void
  TextureTransform (const TextureTransform_sequence& s);

  // MetadataDouble
  // 
  typedef ::MetadataDouble MetadataDouble_type;
  typedef ::xsd::cxx::tree::sequence< MetadataDouble_type > MetadataDouble_sequence;
  typedef MetadataDouble_sequence::iterator MetadataDouble_iterator;
  typedef MetadataDouble_sequence::const_iterator MetadataDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataDouble_type, char > MetadataDouble_traits;

  const MetadataDouble_sequence&
  MetadataDouble () const;

  MetadataDouble_sequence&
  MetadataDouble ();

  void
  MetadataDouble (const MetadataDouble_sequence& s);

  // MetadataFloat
  // 
  typedef ::MetadataFloat MetadataFloat_type;
  typedef ::xsd::cxx::tree::sequence< MetadataFloat_type > MetadataFloat_sequence;
  typedef MetadataFloat_sequence::iterator MetadataFloat_iterator;
  typedef MetadataFloat_sequence::const_iterator MetadataFloat_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataFloat_type, char > MetadataFloat_traits;

  const MetadataFloat_sequence&
  MetadataFloat () const;

  MetadataFloat_sequence&
  MetadataFloat ();

  void
  MetadataFloat (const MetadataFloat_sequence& s);

  // MetadataInteger
  // 
  typedef ::MetadataInteger MetadataInteger_type;
  typedef ::xsd::cxx::tree::sequence< MetadataInteger_type > MetadataInteger_sequence;
  typedef MetadataInteger_sequence::iterator MetadataInteger_iterator;
  typedef MetadataInteger_sequence::const_iterator MetadataInteger_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataInteger_type, char > MetadataInteger_traits;

  const MetadataInteger_sequence&
  MetadataInteger () const;

  MetadataInteger_sequence&
  MetadataInteger ();

  void
  MetadataInteger (const MetadataInteger_sequence& s);

  // MetadataSet
  // 
  typedef ::MetadataSet MetadataSet_type;
  typedef ::xsd::cxx::tree::sequence< MetadataSet_type > MetadataSet_sequence;
  typedef MetadataSet_sequence::iterator MetadataSet_iterator;
  typedef MetadataSet_sequence::const_iterator MetadataSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataSet_type, char > MetadataSet_traits;

  const MetadataSet_sequence&
  MetadataSet () const;

  MetadataSet_sequence&
  MetadataSet ();

  void
  MetadataSet (const MetadataSet_sequence& s);

  // MetadataString
  // 
  typedef ::MetadataString MetadataString_type;
  typedef ::xsd::cxx::tree::sequence< MetadataString_type > MetadataString_sequence;
  typedef MetadataString_sequence::iterator MetadataString_iterator;
  typedef MetadataString_sequence::const_iterator MetadataString_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataString_type, char > MetadataString_traits;

  const MetadataString_sequence&
  MetadataString () const;

  MetadataString_sequence&
  MetadataString ();

  void
  MetadataString (const MetadataString_sequence& s);

  // Appearance
  // 
  typedef ::Appearance Appearance_type;
  typedef ::xsd::cxx::tree::sequence< Appearance_type > Appearance_sequence;
  typedef Appearance_sequence::iterator Appearance_iterator;
  typedef Appearance_sequence::const_iterator Appearance_const_iterator;
  typedef ::xsd::cxx::tree::traits< Appearance_type, char > Appearance_traits;

  const Appearance_sequence&
  Appearance () const;

  Appearance_sequence&
  Appearance ();

  void
  Appearance (const Appearance_sequence& s);

  // Background
  // 
  typedef ::Background Background_type;
  typedef ::xsd::cxx::tree::sequence< Background_type > Background_sequence;
  typedef Background_sequence::iterator Background_iterator;
  typedef Background_sequence::const_iterator Background_const_iterator;
  typedef ::xsd::cxx::tree::traits< Background_type, char > Background_traits;

  const Background_sequence&
  Background () const;

  Background_sequence&
  Background ();

  void
  Background (const Background_sequence& s);

  // ColorInterpolator
  // 
  typedef ::ColorInterpolator ColorInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ColorInterpolator_type > ColorInterpolator_sequence;
  typedef ColorInterpolator_sequence::iterator ColorInterpolator_iterator;
  typedef ColorInterpolator_sequence::const_iterator ColorInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorInterpolator_type, char > ColorInterpolator_traits;

  const ColorInterpolator_sequence&
  ColorInterpolator () const;

  ColorInterpolator_sequence&
  ColorInterpolator ();

  void
  ColorInterpolator (const ColorInterpolator_sequence& s);

  // CoordinateInterpolator
  // 
  typedef ::CoordinateInterpolator CoordinateInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator_type > CoordinateInterpolator_sequence;
  typedef CoordinateInterpolator_sequence::iterator CoordinateInterpolator_iterator;
  typedef CoordinateInterpolator_sequence::const_iterator CoordinateInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator_type, char > CoordinateInterpolator_traits;

  const CoordinateInterpolator_sequence&
  CoordinateInterpolator () const;

  CoordinateInterpolator_sequence&
  CoordinateInterpolator ();

  void
  CoordinateInterpolator (const CoordinateInterpolator_sequence& s);

  // DirectionalLight
  // 
  typedef ::DirectionalLight DirectionalLight_type;
  typedef ::xsd::cxx::tree::sequence< DirectionalLight_type > DirectionalLight_sequence;
  typedef DirectionalLight_sequence::iterator DirectionalLight_iterator;
  typedef DirectionalLight_sequence::const_iterator DirectionalLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< DirectionalLight_type, char > DirectionalLight_traits;

  const DirectionalLight_sequence&
  DirectionalLight () const;

  DirectionalLight_sequence&
  DirectionalLight ();

  void
  DirectionalLight (const DirectionalLight_sequence& s);

  // Group
  // 
  typedef ::Group Group_type;
  typedef ::xsd::cxx::tree::sequence< Group_type > Group_sequence;
  typedef Group_sequence::iterator Group_iterator;
  typedef Group_sequence::const_iterator Group_const_iterator;
  typedef ::xsd::cxx::tree::traits< Group_type, char > Group_traits;

  const Group_sequence&
  Group () const;

  Group_sequence&
  Group ();

  void
  Group (const Group_sequence& s);

  // NavigationInfo
  // 
  typedef ::NavigationInfo NavigationInfo_type;
  typedef ::xsd::cxx::tree::sequence< NavigationInfo_type > NavigationInfo_sequence;
  typedef NavigationInfo_sequence::iterator NavigationInfo_iterator;
  typedef NavigationInfo_sequence::const_iterator NavigationInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< NavigationInfo_type, char > NavigationInfo_traits;

  const NavigationInfo_sequence&
  NavigationInfo () const;

  NavigationInfo_sequence&
  NavigationInfo ();

  void
  NavigationInfo (const NavigationInfo_sequence& s);

  // NormalInterpolator
  // 
  typedef ::NormalInterpolator NormalInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NormalInterpolator_type > NormalInterpolator_sequence;
  typedef NormalInterpolator_sequence::iterator NormalInterpolator_iterator;
  typedef NormalInterpolator_sequence::const_iterator NormalInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NormalInterpolator_type, char > NormalInterpolator_traits;

  const NormalInterpolator_sequence&
  NormalInterpolator () const;

  NormalInterpolator_sequence&
  NormalInterpolator ();

  void
  NormalInterpolator (const NormalInterpolator_sequence& s);

  // OrientationInterpolator
  // 
  typedef ::OrientationInterpolator OrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< OrientationInterpolator_type > OrientationInterpolator_sequence;
  typedef OrientationInterpolator_sequence::iterator OrientationInterpolator_iterator;
  typedef OrientationInterpolator_sequence::const_iterator OrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< OrientationInterpolator_type, char > OrientationInterpolator_traits;

  const OrientationInterpolator_sequence&
  OrientationInterpolator () const;

  OrientationInterpolator_sequence&
  OrientationInterpolator ();

  void
  OrientationInterpolator (const OrientationInterpolator_sequence& s);

  // PositionInterpolator
  // 
  typedef ::PositionInterpolator PositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator_type > PositionInterpolator_sequence;
  typedef PositionInterpolator_sequence::iterator PositionInterpolator_iterator;
  typedef PositionInterpolator_sequence::const_iterator PositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator_type, char > PositionInterpolator_traits;

  const PositionInterpolator_sequence&
  PositionInterpolator () const;

  PositionInterpolator_sequence&
  PositionInterpolator ();

  void
  PositionInterpolator (const PositionInterpolator_sequence& s);

  // ScalarInterpolator
  // 
  typedef ::ScalarInterpolator ScalarInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ScalarInterpolator_type > ScalarInterpolator_sequence;
  typedef ScalarInterpolator_sequence::iterator ScalarInterpolator_iterator;
  typedef ScalarInterpolator_sequence::const_iterator ScalarInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ScalarInterpolator_type, char > ScalarInterpolator_traits;

  const ScalarInterpolator_sequence&
  ScalarInterpolator () const;

  ScalarInterpolator_sequence&
  ScalarInterpolator ();

  void
  ScalarInterpolator (const ScalarInterpolator_sequence& s);

  // Shape
  // 
  typedef ::Shape Shape_type;
  typedef ::xsd::cxx::tree::sequence< Shape_type > Shape_sequence;
  typedef Shape_sequence::iterator Shape_iterator;
  typedef Shape_sequence::const_iterator Shape_const_iterator;
  typedef ::xsd::cxx::tree::traits< Shape_type, char > Shape_traits;

  const Shape_sequence&
  Shape () const;

  Shape_sequence&
  Shape ();

  void
  Shape (const Shape_sequence& s);

  // TimeSensor
  // 
  typedef ::TimeSensor TimeSensor_type;
  typedef ::xsd::cxx::tree::sequence< TimeSensor_type > TimeSensor_sequence;
  typedef TimeSensor_sequence::iterator TimeSensor_iterator;
  typedef TimeSensor_sequence::const_iterator TimeSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeSensor_type, char > TimeSensor_traits;

  const TimeSensor_sequence&
  TimeSensor () const;

  TimeSensor_sequence&
  TimeSensor ();

  void
  TimeSensor (const TimeSensor_sequence& s);

  // Transform
  // 
  typedef ::Transform Transform_type;
  typedef ::xsd::cxx::tree::sequence< Transform_type > Transform_sequence;
  typedef Transform_sequence::iterator Transform_iterator;
  typedef Transform_sequence::const_iterator Transform_const_iterator;
  typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

  const Transform_sequence&
  Transform () const;

  Transform_sequence&
  Transform ();

  void
  Transform (const Transform_sequence& s);

  // Viewpoint
  // 
  typedef ::Viewpoint Viewpoint_type;
  typedef ::xsd::cxx::tree::sequence< Viewpoint_type > Viewpoint_sequence;
  typedef Viewpoint_sequence::iterator Viewpoint_iterator;
  typedef Viewpoint_sequence::const_iterator Viewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< Viewpoint_type, char > Viewpoint_traits;

  const Viewpoint_sequence&
  Viewpoint () const;

  Viewpoint_sequence&
  Viewpoint ();

  void
  Viewpoint (const Viewpoint_sequence& s);

  // WorldInfo
  // 
  typedef ::WorldInfo WorldInfo_type;
  typedef ::xsd::cxx::tree::sequence< WorldInfo_type > WorldInfo_sequence;
  typedef WorldInfo_sequence::iterator WorldInfo_iterator;
  typedef WorldInfo_sequence::const_iterator WorldInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< WorldInfo_type, char > WorldInfo_traits;

  const WorldInfo_sequence&
  WorldInfo () const;

  WorldInfo_sequence&
  WorldInfo ();

  void
  WorldInfo (const WorldInfo_sequence& s);

  // Anchor
  // 
  typedef ::Anchor Anchor_type;
  typedef ::xsd::cxx::tree::sequence< Anchor_type > Anchor_sequence;
  typedef Anchor_sequence::iterator Anchor_iterator;
  typedef Anchor_sequence::const_iterator Anchor_const_iterator;
  typedef ::xsd::cxx::tree::traits< Anchor_type, char > Anchor_traits;

  const Anchor_sequence&
  Anchor () const;

  Anchor_sequence&
  Anchor ();

  void
  Anchor (const Anchor_sequence& s);

  // BooleanFilter
  // 
  typedef ::BooleanFilter BooleanFilter_type;
  typedef ::xsd::cxx::tree::sequence< BooleanFilter_type > BooleanFilter_sequence;
  typedef BooleanFilter_sequence::iterator BooleanFilter_iterator;
  typedef BooleanFilter_sequence::const_iterator BooleanFilter_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanFilter_type, char > BooleanFilter_traits;

  const BooleanFilter_sequence&
  BooleanFilter () const;

  BooleanFilter_sequence&
  BooleanFilter ();

  void
  BooleanFilter (const BooleanFilter_sequence& s);

  // BooleanSequencer
  // 
  typedef ::BooleanSequencer BooleanSequencer_type;
  typedef ::xsd::cxx::tree::sequence< BooleanSequencer_type > BooleanSequencer_sequence;
  typedef BooleanSequencer_sequence::iterator BooleanSequencer_iterator;
  typedef BooleanSequencer_sequence::const_iterator BooleanSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanSequencer_type, char > BooleanSequencer_traits;

  const BooleanSequencer_sequence&
  BooleanSequencer () const;

  BooleanSequencer_sequence&
  BooleanSequencer ();

  void
  BooleanSequencer (const BooleanSequencer_sequence& s);

  // BooleanToggle
  // 
  typedef ::BooleanToggle BooleanToggle_type;
  typedef ::xsd::cxx::tree::sequence< BooleanToggle_type > BooleanToggle_sequence;
  typedef BooleanToggle_sequence::iterator BooleanToggle_iterator;
  typedef BooleanToggle_sequence::const_iterator BooleanToggle_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanToggle_type, char > BooleanToggle_traits;

  const BooleanToggle_sequence&
  BooleanToggle () const;

  BooleanToggle_sequence&
  BooleanToggle ();

  void
  BooleanToggle (const BooleanToggle_sequence& s);

  // BooleanTrigger
  // 
  typedef ::BooleanTrigger BooleanTrigger_type;
  typedef ::xsd::cxx::tree::sequence< BooleanTrigger_type > BooleanTrigger_sequence;
  typedef BooleanTrigger_sequence::iterator BooleanTrigger_iterator;
  typedef BooleanTrigger_sequence::const_iterator BooleanTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanTrigger_type, char > BooleanTrigger_traits;

  const BooleanTrigger_sequence&
  BooleanTrigger () const;

  BooleanTrigger_sequence&
  BooleanTrigger ();

  void
  BooleanTrigger (const BooleanTrigger_sequence& s);

  // CylinderSensor
  // 
  typedef ::CylinderSensor CylinderSensor_type;
  typedef ::xsd::cxx::tree::sequence< CylinderSensor_type > CylinderSensor_sequence;
  typedef CylinderSensor_sequence::iterator CylinderSensor_iterator;
  typedef CylinderSensor_sequence::const_iterator CylinderSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< CylinderSensor_type, char > CylinderSensor_traits;

  const CylinderSensor_sequence&
  CylinderSensor () const;

  CylinderSensor_sequence&
  CylinderSensor ();

  void
  CylinderSensor (const CylinderSensor_sequence& s);

  // Inline
  // 
  typedef ::Inline Inline_type;
  typedef ::xsd::cxx::tree::sequence< Inline_type > Inline_sequence;
  typedef Inline_sequence::iterator Inline_iterator;
  typedef Inline_sequence::const_iterator Inline_const_iterator;
  typedef ::xsd::cxx::tree::traits< Inline_type, char > Inline_traits;

  const Inline_sequence&
  Inline () const;

  Inline_sequence&
  Inline ();

  void
  Inline (const Inline_sequence& s);

  // IntegerSequencer
  // 
  typedef ::IntegerSequencer IntegerSequencer_type;
  typedef ::xsd::cxx::tree::sequence< IntegerSequencer_type > IntegerSequencer_sequence;
  typedef IntegerSequencer_sequence::iterator IntegerSequencer_iterator;
  typedef IntegerSequencer_sequence::const_iterator IntegerSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerSequencer_type, char > IntegerSequencer_traits;

  const IntegerSequencer_sequence&
  IntegerSequencer () const;

  IntegerSequencer_sequence&
  IntegerSequencer ();

  void
  IntegerSequencer (const IntegerSequencer_sequence& s);

  // IntegerTrigger
  // 
  typedef ::IntegerTrigger IntegerTrigger_type;
  typedef ::xsd::cxx::tree::sequence< IntegerTrigger_type > IntegerTrigger_sequence;
  typedef IntegerTrigger_sequence::iterator IntegerTrigger_iterator;
  typedef IntegerTrigger_sequence::const_iterator IntegerTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerTrigger_type, char > IntegerTrigger_traits;

  const IntegerTrigger_sequence&
  IntegerTrigger () const;

  IntegerTrigger_sequence&
  IntegerTrigger ();

  void
  IntegerTrigger (const IntegerTrigger_sequence& s);

  // KeySensor
  // 
  typedef ::KeySensor KeySensor_type;
  typedef ::xsd::cxx::tree::sequence< KeySensor_type > KeySensor_sequence;
  typedef KeySensor_sequence::iterator KeySensor_iterator;
  typedef KeySensor_sequence::const_iterator KeySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< KeySensor_type, char > KeySensor_traits;

  const KeySensor_sequence&
  KeySensor () const;

  KeySensor_sequence&
  KeySensor ();

  void
  KeySensor (const KeySensor_sequence& s);

  // PlaneSensor
  // 
  typedef ::PlaneSensor PlaneSensor_type;
  typedef ::xsd::cxx::tree::sequence< PlaneSensor_type > PlaneSensor_sequence;
  typedef PlaneSensor_sequence::iterator PlaneSensor_iterator;
  typedef PlaneSensor_sequence::const_iterator PlaneSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< PlaneSensor_type, char > PlaneSensor_traits;

  const PlaneSensor_sequence&
  PlaneSensor () const;

  PlaneSensor_sequence&
  PlaneSensor ();

  void
  PlaneSensor (const PlaneSensor_sequence& s);

  // PointLight
  // 
  typedef ::PointLight PointLight_type;
  typedef ::xsd::cxx::tree::sequence< PointLight_type > PointLight_sequence;
  typedef PointLight_sequence::iterator PointLight_iterator;
  typedef PointLight_sequence::const_iterator PointLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< PointLight_type, char > PointLight_traits;

  const PointLight_sequence&
  PointLight () const;

  PointLight_sequence&
  PointLight ();

  void
  PointLight (const PointLight_sequence& s);

  // ProximitySensor
  // 
  typedef ::ProximitySensor ProximitySensor_type;
  typedef ::xsd::cxx::tree::sequence< ProximitySensor_type > ProximitySensor_sequence;
  typedef ProximitySensor_sequence::iterator ProximitySensor_iterator;
  typedef ProximitySensor_sequence::const_iterator ProximitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProximitySensor_type, char > ProximitySensor_traits;

  const ProximitySensor_sequence&
  ProximitySensor () const;

  ProximitySensor_sequence&
  ProximitySensor ();

  void
  ProximitySensor (const ProximitySensor_sequence& s);

  // SphereSensor
  // 
  typedef ::SphereSensor SphereSensor_type;
  typedef ::xsd::cxx::tree::sequence< SphereSensor_type > SphereSensor_sequence;
  typedef SphereSensor_sequence::iterator SphereSensor_iterator;
  typedef SphereSensor_sequence::const_iterator SphereSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< SphereSensor_type, char > SphereSensor_traits;

  const SphereSensor_sequence&
  SphereSensor () const;

  SphereSensor_sequence&
  SphereSensor ();

  void
  SphereSensor (const SphereSensor_sequence& s);

  // SpotLight
  // 
  typedef ::SpotLight SpotLight_type;
  typedef ::xsd::cxx::tree::sequence< SpotLight_type > SpotLight_sequence;
  typedef SpotLight_sequence::iterator SpotLight_iterator;
  typedef SpotLight_sequence::const_iterator SpotLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< SpotLight_type, char > SpotLight_traits;

  const SpotLight_sequence&
  SpotLight () const;

  SpotLight_sequence&
  SpotLight ();

  void
  SpotLight (const SpotLight_sequence& s);

  // StringSensor
  // 
  typedef ::StringSensor StringSensor_type;
  typedef ::xsd::cxx::tree::sequence< StringSensor_type > StringSensor_sequence;
  typedef StringSensor_sequence::iterator StringSensor_iterator;
  typedef StringSensor_sequence::const_iterator StringSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< StringSensor_type, char > StringSensor_traits;

  const StringSensor_sequence&
  StringSensor () const;

  StringSensor_sequence&
  StringSensor ();

  void
  StringSensor (const StringSensor_sequence& s);

  // Switch
  // 
  typedef ::Switch Switch_type;
  typedef ::xsd::cxx::tree::sequence< Switch_type > Switch_sequence;
  typedef Switch_sequence::iterator Switch_iterator;
  typedef Switch_sequence::const_iterator Switch_const_iterator;
  typedef ::xsd::cxx::tree::traits< Switch_type, char > Switch_traits;

  const Switch_sequence&
  Switch () const;

  Switch_sequence&
  Switch ();

  void
  Switch (const Switch_sequence& s);

  // TimeTrigger
  // 
  typedef ::TimeTrigger TimeTrigger_type;
  typedef ::xsd::cxx::tree::sequence< TimeTrigger_type > TimeTrigger_sequence;
  typedef TimeTrigger_sequence::iterator TimeTrigger_iterator;
  typedef TimeTrigger_sequence::const_iterator TimeTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeTrigger_type, char > TimeTrigger_traits;

  const TimeTrigger_sequence&
  TimeTrigger () const;

  TimeTrigger_sequence&
  TimeTrigger ();

  void
  TimeTrigger (const TimeTrigger_sequence& s);

  // TouchSensor
  // 
  typedef ::TouchSensor TouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< TouchSensor_type > TouchSensor_sequence;
  typedef TouchSensor_sequence::iterator TouchSensor_iterator;
  typedef TouchSensor_sequence::const_iterator TouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TouchSensor_type, char > TouchSensor_traits;

  const TouchSensor_sequence&
  TouchSensor () const;

  TouchSensor_sequence&
  TouchSensor ();

  void
  TouchSensor (const TouchSensor_sequence& s);

  // AudioClip
  // 
  typedef ::AudioClip AudioClip_type;
  typedef ::xsd::cxx::tree::sequence< AudioClip_type > AudioClip_sequence;
  typedef AudioClip_sequence::iterator AudioClip_iterator;
  typedef AudioClip_sequence::const_iterator AudioClip_const_iterator;
  typedef ::xsd::cxx::tree::traits< AudioClip_type, char > AudioClip_traits;

  const AudioClip_sequence&
  AudioClip () const;

  AudioClip_sequence&
  AudioClip ();

  void
  AudioClip (const AudioClip_sequence& s);

  // Billboard
  // 
  typedef ::Billboard Billboard_type;
  typedef ::xsd::cxx::tree::sequence< Billboard_type > Billboard_sequence;
  typedef Billboard_sequence::iterator Billboard_iterator;
  typedef Billboard_sequence::const_iterator Billboard_const_iterator;
  typedef ::xsd::cxx::tree::traits< Billboard_type, char > Billboard_traits;

  const Billboard_sequence&
  Billboard () const;

  Billboard_sequence&
  Billboard ();

  void
  Billboard (const Billboard_sequence& s);

  // Collision
  // 
  typedef ::Collision Collision_type;
  typedef ::xsd::cxx::tree::sequence< Collision_type > Collision_sequence;
  typedef Collision_sequence::iterator Collision_iterator;
  typedef Collision_sequence::const_iterator Collision_const_iterator;
  typedef ::xsd::cxx::tree::traits< Collision_type, char > Collision_traits;

  const Collision_sequence&
  Collision () const;

  Collision_sequence&
  Collision ();

  void
  Collision (const Collision_sequence& s);

  // Fog
  // 
  typedef ::Fog Fog_type;
  typedef ::xsd::cxx::tree::sequence< Fog_type > Fog_sequence;
  typedef Fog_sequence::iterator Fog_iterator;
  typedef Fog_sequence::const_iterator Fog_const_iterator;
  typedef ::xsd::cxx::tree::traits< Fog_type, char > Fog_traits;

  const Fog_sequence&
  Fog () const;

  Fog_sequence&
  Fog ();

  void
  Fog (const Fog_sequence& s);

  // LoadSensor
  // 
  typedef ::LoadSensor LoadSensor_type;
  typedef ::xsd::cxx::tree::sequence< LoadSensor_type > LoadSensor_sequence;
  typedef LoadSensor_sequence::iterator LoadSensor_iterator;
  typedef LoadSensor_sequence::const_iterator LoadSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< LoadSensor_type, char > LoadSensor_traits;

  const LoadSensor_sequence&
  LoadSensor () const;

  LoadSensor_sequence&
  LoadSensor ();

  void
  LoadSensor (const LoadSensor_sequence& s);

  // LocalFog
  // 
  typedef ::LocalFog LocalFog_type;
  typedef ::xsd::cxx::tree::sequence< LocalFog_type > LocalFog_sequence;
  typedef LocalFog_sequence::iterator LocalFog_iterator;
  typedef LocalFog_sequence::const_iterator LocalFog_const_iterator;
  typedef ::xsd::cxx::tree::traits< LocalFog_type, char > LocalFog_traits;

  const LocalFog_sequence&
  LocalFog () const;

  LocalFog_sequence&
  LocalFog ();

  void
  LocalFog (const LocalFog_sequence& s);

  // LOD
  // 
  typedef ::LOD LOD_type;
  typedef ::xsd::cxx::tree::sequence< LOD_type > LOD_sequence;
  typedef LOD_sequence::iterator LOD_iterator;
  typedef LOD_sequence::const_iterator LOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOD_type, char > LOD_traits;

  const LOD_sequence&
  LOD () const;

  LOD_sequence&
  LOD ();

  void
  LOD (const LOD_sequence& s);

  // Script
  // 
  typedef ::Script Script_type;
  typedef ::xsd::cxx::tree::sequence< Script_type > Script_sequence;
  typedef Script_sequence::iterator Script_iterator;
  typedef Script_sequence::const_iterator Script_const_iterator;
  typedef ::xsd::cxx::tree::traits< Script_type, char > Script_traits;

  const Script_sequence&
  Script () const;

  Script_sequence&
  Script ();

  void
  Script (const Script_sequence& s);

  // Sound
  // 
  typedef ::Sound Sound_type;
  typedef ::xsd::cxx::tree::sequence< Sound_type > Sound_sequence;
  typedef Sound_sequence::iterator Sound_iterator;
  typedef Sound_sequence::const_iterator Sound_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sound_type, char > Sound_traits;

  const Sound_sequence&
  Sound () const;

  Sound_sequence&
  Sound ();

  void
  Sound (const Sound_sequence& s);

  // VisibilitySensor
  // 
  typedef ::VisibilitySensor VisibilitySensor_type;
  typedef ::xsd::cxx::tree::sequence< VisibilitySensor_type > VisibilitySensor_sequence;
  typedef VisibilitySensor_sequence::iterator VisibilitySensor_iterator;
  typedef VisibilitySensor_sequence::const_iterator VisibilitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< VisibilitySensor_type, char > VisibilitySensor_traits;

  const VisibilitySensor_sequence&
  VisibilitySensor () const;

  VisibilitySensor_sequence&
  VisibilitySensor ();

  void
  VisibilitySensor (const VisibilitySensor_sequence& s);

  // CoordinateInterpolator2D
  // 
  typedef ::CoordinateInterpolator2D CoordinateInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator2D_type > CoordinateInterpolator2D_sequence;
  typedef CoordinateInterpolator2D_sequence::iterator CoordinateInterpolator2D_iterator;
  typedef CoordinateInterpolator2D_sequence::const_iterator CoordinateInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator2D_type, char > CoordinateInterpolator2D_traits;

  const CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D () const;

  CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D ();

  void
  CoordinateInterpolator2D (const CoordinateInterpolator2D_sequence& s);

  // PositionInterpolator2D
  // 
  typedef ::PositionInterpolator2D PositionInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator2D_type > PositionInterpolator2D_sequence;
  typedef PositionInterpolator2D_sequence::iterator PositionInterpolator2D_iterator;
  typedef PositionInterpolator2D_sequence::const_iterator PositionInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator2D_type, char > PositionInterpolator2D_traits;

  const PositionInterpolator2D_sequence&
  PositionInterpolator2D () const;

  PositionInterpolator2D_sequence&
  PositionInterpolator2D ();

  void
  PositionInterpolator2D (const PositionInterpolator2D_sequence& s);

  // StaticGroup
  // 
  typedef ::StaticGroup StaticGroup_type;
  typedef ::xsd::cxx::tree::sequence< StaticGroup_type > StaticGroup_sequence;
  typedef StaticGroup_sequence::iterator StaticGroup_iterator;
  typedef StaticGroup_sequence::const_iterator StaticGroup_const_iterator;
  typedef ::xsd::cxx::tree::traits< StaticGroup_type, char > StaticGroup_traits;

  const StaticGroup_sequence&
  StaticGroup () const;

  StaticGroup_sequence&
  StaticGroup ();

  void
  StaticGroup (const StaticGroup_sequence& s);

  // CADAssembly
  // 
  typedef ::CADAssembly CADAssembly_type;
  typedef ::xsd::cxx::tree::sequence< CADAssembly_type > CADAssembly_sequence;
  typedef CADAssembly_sequence::iterator CADAssembly_iterator;
  typedef CADAssembly_sequence::const_iterator CADAssembly_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADAssembly_type, char > CADAssembly_traits;

  const CADAssembly_sequence&
  CADAssembly () const;

  CADAssembly_sequence&
  CADAssembly ();

  void
  CADAssembly (const CADAssembly_sequence& s);

  // CADLayer
  // 
  typedef ::CADLayer CADLayer_type;
  typedef ::xsd::cxx::tree::sequence< CADLayer_type > CADLayer_sequence;
  typedef CADLayer_sequence::iterator CADLayer_iterator;
  typedef CADLayer_sequence::const_iterator CADLayer_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADLayer_type, char > CADLayer_traits;

  const CADLayer_sequence&
  CADLayer () const;

  CADLayer_sequence&
  CADLayer ();

  void
  CADLayer (const CADLayer_sequence& s);

  // EspduTransform
  // 
  typedef ::EspduTransform EspduTransform_type;
  typedef ::xsd::cxx::tree::sequence< EspduTransform_type > EspduTransform_sequence;
  typedef EspduTransform_sequence::iterator EspduTransform_iterator;
  typedef EspduTransform_sequence::const_iterator EspduTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< EspduTransform_type, char > EspduTransform_traits;

  const EspduTransform_sequence&
  EspduTransform () const;

  EspduTransform_sequence&
  EspduTransform ();

  void
  EspduTransform (const EspduTransform_sequence& s);

  // ReceiverPdu
  // 
  typedef ::ReceiverPdu ReceiverPdu_type;
  typedef ::xsd::cxx::tree::sequence< ReceiverPdu_type > ReceiverPdu_sequence;
  typedef ReceiverPdu_sequence::iterator ReceiverPdu_iterator;
  typedef ReceiverPdu_sequence::const_iterator ReceiverPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< ReceiverPdu_type, char > ReceiverPdu_traits;

  const ReceiverPdu_sequence&
  ReceiverPdu () const;

  ReceiverPdu_sequence&
  ReceiverPdu ();

  void
  ReceiverPdu (const ReceiverPdu_sequence& s);

  // SignalPdu
  // 
  typedef ::SignalPdu SignalPdu_type;
  typedef ::xsd::cxx::tree::sequence< SignalPdu_type > SignalPdu_sequence;
  typedef SignalPdu_sequence::iterator SignalPdu_iterator;
  typedef SignalPdu_sequence::const_iterator SignalPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< SignalPdu_type, char > SignalPdu_traits;

  const SignalPdu_sequence&
  SignalPdu () const;

  SignalPdu_sequence&
  SignalPdu ();

  void
  SignalPdu (const SignalPdu_sequence& s);

  // TransmitterPdu
  // 
  typedef ::TransmitterPdu TransmitterPdu_type;
  typedef ::xsd::cxx::tree::sequence< TransmitterPdu_type > TransmitterPdu_sequence;
  typedef TransmitterPdu_sequence::iterator TransmitterPdu_iterator;
  typedef TransmitterPdu_sequence::const_iterator TransmitterPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< TransmitterPdu_type, char > TransmitterPdu_traits;

  const TransmitterPdu_sequence&
  TransmitterPdu () const;

  TransmitterPdu_sequence&
  TransmitterPdu ();

  void
  TransmitterPdu (const TransmitterPdu_sequence& s);

  // GeoLocation
  // 
  typedef ::GeoLocation GeoLocation_type;
  typedef ::xsd::cxx::tree::sequence< GeoLocation_type > GeoLocation_sequence;
  typedef GeoLocation_sequence::iterator GeoLocation_iterator;
  typedef GeoLocation_sequence::const_iterator GeoLocation_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLocation_type, char > GeoLocation_traits;

  const GeoLocation_sequence&
  GeoLocation () const;

  GeoLocation_sequence&
  GeoLocation ();

  void
  GeoLocation (const GeoLocation_sequence& s);

  // GeoLOD
  // 
  typedef ::GeoLOD GeoLOD_type;
  typedef ::xsd::cxx::tree::sequence< GeoLOD_type > GeoLOD_sequence;
  typedef GeoLOD_sequence::iterator GeoLOD_iterator;
  typedef GeoLOD_sequence::const_iterator GeoLOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLOD_type, char > GeoLOD_traits;

  const GeoLOD_sequence&
  GeoLOD () const;

  GeoLOD_sequence&
  GeoLOD ();

  void
  GeoLOD (const GeoLOD_sequence& s);

  // GeoMetadata
  // 
  typedef ::GeoMetadata GeoMetadata_type;
  typedef ::xsd::cxx::tree::sequence< GeoMetadata_type > GeoMetadata_sequence;
  typedef GeoMetadata_sequence::iterator GeoMetadata_iterator;
  typedef GeoMetadata_sequence::const_iterator GeoMetadata_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoMetadata_type, char > GeoMetadata_traits;

  const GeoMetadata_sequence&
  GeoMetadata () const;

  GeoMetadata_sequence&
  GeoMetadata ();

  void
  GeoMetadata (const GeoMetadata_sequence& s);

  // GeoOrigin
  // 
  typedef ::GeoOrigin GeoOrigin_type;
  typedef ::xsd::cxx::tree::sequence< GeoOrigin_type > GeoOrigin_sequence;
  typedef GeoOrigin_sequence::iterator GeoOrigin_iterator;
  typedef GeoOrigin_sequence::const_iterator GeoOrigin_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_sequence&
  GeoOrigin () const;

  GeoOrigin_sequence&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_sequence& s);

  // GeoPositionInterpolator
  // 
  typedef ::GeoPositionInterpolator GeoPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< GeoPositionInterpolator_type > GeoPositionInterpolator_sequence;
  typedef GeoPositionInterpolator_sequence::iterator GeoPositionInterpolator_iterator;
  typedef GeoPositionInterpolator_sequence::const_iterator GeoPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoPositionInterpolator_type, char > GeoPositionInterpolator_traits;

  const GeoPositionInterpolator_sequence&
  GeoPositionInterpolator () const;

  GeoPositionInterpolator_sequence&
  GeoPositionInterpolator ();

  void
  GeoPositionInterpolator (const GeoPositionInterpolator_sequence& s);

  // GeoTouchSensor
  // 
  typedef ::GeoTouchSensor GeoTouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< GeoTouchSensor_type > GeoTouchSensor_sequence;
  typedef GeoTouchSensor_sequence::iterator GeoTouchSensor_iterator;
  typedef GeoTouchSensor_sequence::const_iterator GeoTouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoTouchSensor_type, char > GeoTouchSensor_traits;

  const GeoTouchSensor_sequence&
  GeoTouchSensor () const;

  GeoTouchSensor_sequence&
  GeoTouchSensor ();

  void
  GeoTouchSensor (const GeoTouchSensor_sequence& s);

  // GeoViewpoint
  // 
  typedef ::GeoViewpoint GeoViewpoint_type;
  typedef ::xsd::cxx::tree::sequence< GeoViewpoint_type > GeoViewpoint_sequence;
  typedef GeoViewpoint_sequence::iterator GeoViewpoint_iterator;
  typedef GeoViewpoint_sequence::const_iterator GeoViewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoViewpoint_type, char > GeoViewpoint_traits;

  const GeoViewpoint_sequence&
  GeoViewpoint () const;

  GeoViewpoint_sequence&
  GeoViewpoint ();

  void
  GeoViewpoint (const GeoViewpoint_sequence& s);

  // HAnimHumanoid
  // 
  typedef ::HAnimHumanoid HAnimHumanoid_type;
  typedef ::xsd::cxx::tree::sequence< HAnimHumanoid_type > HAnimHumanoid_sequence;
  typedef HAnimHumanoid_sequence::iterator HAnimHumanoid_iterator;
  typedef HAnimHumanoid_sequence::const_iterator HAnimHumanoid_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimHumanoid_type, char > HAnimHumanoid_traits;

  const HAnimHumanoid_sequence&
  HAnimHumanoid () const;

  HAnimHumanoid_sequence&
  HAnimHumanoid ();

  void
  HAnimHumanoid (const HAnimHumanoid_sequence& s);

  // HAnimJoint
  // 
  typedef ::HAnimJoint HAnimJoint_type;
  typedef ::xsd::cxx::tree::sequence< HAnimJoint_type > HAnimJoint_sequence;
  typedef HAnimJoint_sequence::iterator HAnimJoint_iterator;
  typedef HAnimJoint_sequence::const_iterator HAnimJoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimJoint_type, char > HAnimJoint_traits;

  const HAnimJoint_sequence&
  HAnimJoint () const;

  HAnimJoint_sequence&
  HAnimJoint ();

  void
  HAnimJoint (const HAnimJoint_sequence& s);

  // HAnimSegment
  // 
  typedef ::HAnimSegment HAnimSegment_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSegment_type > HAnimSegment_sequence;
  typedef HAnimSegment_sequence::iterator HAnimSegment_iterator;
  typedef HAnimSegment_sequence::const_iterator HAnimSegment_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSegment_type, char > HAnimSegment_traits;

  const HAnimSegment_sequence&
  HAnimSegment () const;

  HAnimSegment_sequence&
  HAnimSegment ();

  void
  HAnimSegment (const HAnimSegment_sequence& s);

  // HAnimSite
  // 
  typedef ::HAnimSite HAnimSite_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSite_type > HAnimSite_sequence;
  typedef HAnimSite_sequence::iterator HAnimSite_iterator;
  typedef HAnimSite_sequence::const_iterator HAnimSite_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSite_type, char > HAnimSite_traits;

  const HAnimSite_sequence&
  HAnimSite () const;

  HAnimSite_sequence&
  HAnimSite ();

  void
  HAnimSite (const HAnimSite_sequence& s);

  // NurbsOrientationInterpolator
  // 
  typedef ::NurbsOrientationInterpolator NurbsOrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsOrientationInterpolator_type > NurbsOrientationInterpolator_sequence;
  typedef NurbsOrientationInterpolator_sequence::iterator NurbsOrientationInterpolator_iterator;
  typedef NurbsOrientationInterpolator_sequence::const_iterator NurbsOrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsOrientationInterpolator_type, char > NurbsOrientationInterpolator_traits;

  const NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator () const;

  NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator ();

  void
  NurbsOrientationInterpolator (const NurbsOrientationInterpolator_sequence& s);

  // NurbsPositionInterpolator
  // 
  typedef ::NurbsPositionInterpolator NurbsPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsPositionInterpolator_type > NurbsPositionInterpolator_sequence;
  typedef NurbsPositionInterpolator_sequence::iterator NurbsPositionInterpolator_iterator;
  typedef NurbsPositionInterpolator_sequence::const_iterator NurbsPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsPositionInterpolator_type, char > NurbsPositionInterpolator_traits;

  const NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator () const;

  NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator ();

  void
  NurbsPositionInterpolator (const NurbsPositionInterpolator_sequence& s);

  // NurbsSurfaceInterpolator
  // 
  typedef ::NurbsSurfaceInterpolator NurbsSurfaceInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSurfaceInterpolator_type > NurbsSurfaceInterpolator_sequence;
  typedef NurbsSurfaceInterpolator_sequence::iterator NurbsSurfaceInterpolator_iterator;
  typedef NurbsSurfaceInterpolator_sequence::const_iterator NurbsSurfaceInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSurfaceInterpolator_type, char > NurbsSurfaceInterpolator_traits;

  const NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator () const;

  NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator ();

  void
  NurbsSurfaceInterpolator (const NurbsSurfaceInterpolator_sequence& s);

  // NurbsSet
  // 
  typedef ::NurbsSet NurbsSet_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSet_type > NurbsSet_sequence;
  typedef NurbsSet_sequence::iterator NurbsSet_iterator;
  typedef NurbsSet_sequence::const_iterator NurbsSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSet_type, char > NurbsSet_traits;

  const NurbsSet_sequence&
  NurbsSet () const;

  NurbsSet_sequence&
  NurbsSet ();

  void
  NurbsSet (const NurbsSet_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Box
  // 
  typedef ::Box Box_type;
  typedef ::xsd::cxx::tree::sequence< Box_type > Box_sequence;
  typedef Box_sequence::iterator Box_iterator;
  typedef Box_sequence::const_iterator Box_const_iterator;
  typedef ::xsd::cxx::tree::traits< Box_type, char > Box_traits;

  const Box_sequence&
  Box () const;

  Box_sequence&
  Box ();

  void
  Box (const Box_sequence& s);

  // Cone
  // 
  typedef ::Cone Cone_type;
  typedef ::xsd::cxx::tree::sequence< Cone_type > Cone_sequence;
  typedef Cone_sequence::iterator Cone_iterator;
  typedef Cone_sequence::const_iterator Cone_const_iterator;
  typedef ::xsd::cxx::tree::traits< Cone_type, char > Cone_traits;

  const Cone_sequence&
  Cone () const;

  Cone_sequence&
  Cone ();

  void
  Cone (const Cone_sequence& s);

  // Cylinder
  // 
  typedef ::Cylinder Cylinder_type;
  typedef ::xsd::cxx::tree::sequence< Cylinder_type > Cylinder_sequence;
  typedef Cylinder_sequence::iterator Cylinder_iterator;
  typedef Cylinder_sequence::const_iterator Cylinder_const_iterator;
  typedef ::xsd::cxx::tree::traits< Cylinder_type, char > Cylinder_traits;

  const Cylinder_sequence&
  Cylinder () const;

  Cylinder_sequence&
  Cylinder ();

  void
  Cylinder (const Cylinder_sequence& s);

  // IndexedFaceSet
  // 
  typedef ::IndexedFaceSet IndexedFaceSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedFaceSet_type > IndexedFaceSet_sequence;
  typedef IndexedFaceSet_sequence::iterator IndexedFaceSet_iterator;
  typedef IndexedFaceSet_sequence::const_iterator IndexedFaceSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedFaceSet_type, char > IndexedFaceSet_traits;

  const IndexedFaceSet_sequence&
  IndexedFaceSet () const;

  IndexedFaceSet_sequence&
  IndexedFaceSet ();

  void
  IndexedFaceSet (const IndexedFaceSet_sequence& s);

  // IndexedLineSet
  // 
  typedef ::IndexedLineSet IndexedLineSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedLineSet_type > IndexedLineSet_sequence;
  typedef IndexedLineSet_sequence::iterator IndexedLineSet_iterator;
  typedef IndexedLineSet_sequence::const_iterator IndexedLineSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedLineSet_type, char > IndexedLineSet_traits;

  const IndexedLineSet_sequence&
  IndexedLineSet () const;

  IndexedLineSet_sequence&
  IndexedLineSet ();

  void
  IndexedLineSet (const IndexedLineSet_sequence& s);

  // IndexedTriangleFanSet
  // 
  typedef ::IndexedTriangleFanSet IndexedTriangleFanSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedTriangleFanSet_type > IndexedTriangleFanSet_sequence;
  typedef IndexedTriangleFanSet_sequence::iterator IndexedTriangleFanSet_iterator;
  typedef IndexedTriangleFanSet_sequence::const_iterator IndexedTriangleFanSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleFanSet_type, char > IndexedTriangleFanSet_traits;

  const IndexedTriangleFanSet_sequence&
  IndexedTriangleFanSet () const;

  IndexedTriangleFanSet_sequence&
  IndexedTriangleFanSet ();

  void
  IndexedTriangleFanSet (const IndexedTriangleFanSet_sequence& s);

  // IndexedTriangleSet
  // 
  typedef ::IndexedTriangleSet IndexedTriangleSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedTriangleSet_type > IndexedTriangleSet_sequence;
  typedef IndexedTriangleSet_sequence::iterator IndexedTriangleSet_iterator;
  typedef IndexedTriangleSet_sequence::const_iterator IndexedTriangleSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleSet_type, char > IndexedTriangleSet_traits;

  const IndexedTriangleSet_sequence&
  IndexedTriangleSet () const;

  IndexedTriangleSet_sequence&
  IndexedTriangleSet ();

  void
  IndexedTriangleSet (const IndexedTriangleSet_sequence& s);

  // IndexedTriangleStripSet
  // 
  typedef ::IndexedTriangleStripSet IndexedTriangleStripSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedTriangleStripSet_type > IndexedTriangleStripSet_sequence;
  typedef IndexedTriangleStripSet_sequence::iterator IndexedTriangleStripSet_iterator;
  typedef IndexedTriangleStripSet_sequence::const_iterator IndexedTriangleStripSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedTriangleStripSet_type, char > IndexedTriangleStripSet_traits;

  const IndexedTriangleStripSet_sequence&
  IndexedTriangleStripSet () const;

  IndexedTriangleStripSet_sequence&
  IndexedTriangleStripSet ();

  void
  IndexedTriangleStripSet (const IndexedTriangleStripSet_sequence& s);

  // LineSet
  // 
  typedef ::LineSet LineSet_type;
  typedef ::xsd::cxx::tree::sequence< LineSet_type > LineSet_sequence;
  typedef LineSet_sequence::iterator LineSet_iterator;
  typedef LineSet_sequence::const_iterator LineSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< LineSet_type, char > LineSet_traits;

  const LineSet_sequence&
  LineSet () const;

  LineSet_sequence&
  LineSet ();

  void
  LineSet (const LineSet_sequence& s);

  // PointSet
  // 
  typedef ::PointSet PointSet_type;
  typedef ::xsd::cxx::tree::sequence< PointSet_type > PointSet_sequence;
  typedef PointSet_sequence::iterator PointSet_iterator;
  typedef PointSet_sequence::const_iterator PointSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< PointSet_type, char > PointSet_traits;

  const PointSet_sequence&
  PointSet () const;

  PointSet_sequence&
  PointSet ();

  void
  PointSet (const PointSet_sequence& s);

  // Sphere
  // 
  typedef ::Sphere Sphere_type;
  typedef ::xsd::cxx::tree::sequence< Sphere_type > Sphere_sequence;
  typedef Sphere_sequence::iterator Sphere_iterator;
  typedef Sphere_sequence::const_iterator Sphere_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sphere_type, char > Sphere_traits;

  const Sphere_sequence&
  Sphere () const;

  Sphere_sequence&
  Sphere ();

  void
  Sphere (const Sphere_sequence& s);

  // TriangleFanSet
  // 
  typedef ::TriangleFanSet TriangleFanSet_type;
  typedef ::xsd::cxx::tree::sequence< TriangleFanSet_type > TriangleFanSet_sequence;
  typedef TriangleFanSet_sequence::iterator TriangleFanSet_iterator;
  typedef TriangleFanSet_sequence::const_iterator TriangleFanSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleFanSet_type, char > TriangleFanSet_traits;

  const TriangleFanSet_sequence&
  TriangleFanSet () const;

  TriangleFanSet_sequence&
  TriangleFanSet ();

  void
  TriangleFanSet (const TriangleFanSet_sequence& s);

  // TriangleSet
  // 
  typedef ::TriangleSet TriangleSet_type;
  typedef ::xsd::cxx::tree::sequence< TriangleSet_type > TriangleSet_sequence;
  typedef TriangleSet_sequence::iterator TriangleSet_iterator;
  typedef TriangleSet_sequence::const_iterator TriangleSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleSet_type, char > TriangleSet_traits;

  const TriangleSet_sequence&
  TriangleSet () const;

  TriangleSet_sequence&
  TriangleSet ();

  void
  TriangleSet (const TriangleSet_sequence& s);

  // TriangleStripSet
  // 
  typedef ::TriangleStripSet TriangleStripSet_type;
  typedef ::xsd::cxx::tree::sequence< TriangleStripSet_type > TriangleStripSet_sequence;
  typedef TriangleStripSet_sequence::iterator TriangleStripSet_iterator;
  typedef TriangleStripSet_sequence::const_iterator TriangleStripSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleStripSet_type, char > TriangleStripSet_traits;

  const TriangleStripSet_sequence&
  TriangleStripSet () const;

  TriangleStripSet_sequence&
  TriangleStripSet ();

  void
  TriangleStripSet (const TriangleStripSet_sequence& s);

  // ElevationGrid
  // 
  typedef ::ElevationGrid ElevationGrid_type;
  typedef ::xsd::cxx::tree::sequence< ElevationGrid_type > ElevationGrid_sequence;
  typedef ElevationGrid_sequence::iterator ElevationGrid_iterator;
  typedef ElevationGrid_sequence::const_iterator ElevationGrid_const_iterator;
  typedef ::xsd::cxx::tree::traits< ElevationGrid_type, char > ElevationGrid_traits;

  const ElevationGrid_sequence&
  ElevationGrid () const;

  ElevationGrid_sequence&
  ElevationGrid ();

  void
  ElevationGrid (const ElevationGrid_sequence& s);

  // Polyline2D
  // 
  typedef ::Polyline2D Polyline2D_type;
  typedef ::xsd::cxx::tree::sequence< Polyline2D_type > Polyline2D_sequence;
  typedef Polyline2D_sequence::iterator Polyline2D_iterator;
  typedef Polyline2D_sequence::const_iterator Polyline2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Polyline2D_type, char > Polyline2D_traits;

  const Polyline2D_sequence&
  Polyline2D () const;

  Polyline2D_sequence&
  Polyline2D ();

  void
  Polyline2D (const Polyline2D_sequence& s);

  // Polypoint2D
  // 
  typedef ::Polypoint2D Polypoint2D_type;
  typedef ::xsd::cxx::tree::sequence< Polypoint2D_type > Polypoint2D_sequence;
  typedef Polypoint2D_sequence::iterator Polypoint2D_iterator;
  typedef Polypoint2D_sequence::const_iterator Polypoint2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Polypoint2D_type, char > Polypoint2D_traits;

  const Polypoint2D_sequence&
  Polypoint2D () const;

  Polypoint2D_sequence&
  Polypoint2D ();

  void
  Polypoint2D (const Polypoint2D_sequence& s);

  // Rectangle2D
  // 
  typedef ::Rectangle2D Rectangle2D_type;
  typedef ::xsd::cxx::tree::sequence< Rectangle2D_type > Rectangle2D_sequence;
  typedef Rectangle2D_sequence::iterator Rectangle2D_iterator;
  typedef Rectangle2D_sequence::const_iterator Rectangle2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Rectangle2D_type, char > Rectangle2D_traits;

  const Rectangle2D_sequence&
  Rectangle2D () const;

  Rectangle2D_sequence&
  Rectangle2D ();

  void
  Rectangle2D (const Rectangle2D_sequence& s);

  // TriangleSet2D
  // 
  typedef ::TriangleSet2D TriangleSet2D_type;
  typedef ::xsd::cxx::tree::sequence< TriangleSet2D_type > TriangleSet2D_sequence;
  typedef TriangleSet2D_sequence::iterator TriangleSet2D_iterator;
  typedef TriangleSet2D_sequence::const_iterator TriangleSet2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< TriangleSet2D_type, char > TriangleSet2D_traits;

  const TriangleSet2D_sequence&
  TriangleSet2D () const;

  TriangleSet2D_sequence&
  TriangleSet2D ();

  void
  TriangleSet2D (const TriangleSet2D_sequence& s);

  // Extrusion
  // 
  typedef ::Extrusion Extrusion_type;
  typedef ::xsd::cxx::tree::sequence< Extrusion_type > Extrusion_sequence;
  typedef Extrusion_sequence::iterator Extrusion_iterator;
  typedef Extrusion_sequence::const_iterator Extrusion_const_iterator;
  typedef ::xsd::cxx::tree::traits< Extrusion_type, char > Extrusion_traits;

  const Extrusion_sequence&
  Extrusion () const;

  Extrusion_sequence&
  Extrusion ();

  void
  Extrusion (const Extrusion_sequence& s);

  // Text
  // 
  typedef ::Text Text_type;
  typedef ::xsd::cxx::tree::sequence< Text_type > Text_sequence;
  typedef Text_sequence::iterator Text_iterator;
  typedef Text_sequence::const_iterator Text_const_iterator;
  typedef ::xsd::cxx::tree::traits< Text_type, char > Text_traits;

  const Text_sequence&
  Text () const;

  Text_sequence&
  Text ();

  void
  Text (const Text_sequence& s);

  // Arc2D
  // 
  typedef ::Arc2D Arc2D_type;
  typedef ::xsd::cxx::tree::sequence< Arc2D_type > Arc2D_sequence;
  typedef Arc2D_sequence::iterator Arc2D_iterator;
  typedef Arc2D_sequence::const_iterator Arc2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Arc2D_type, char > Arc2D_traits;

  const Arc2D_sequence&
  Arc2D () const;

  Arc2D_sequence&
  Arc2D ();

  void
  Arc2D (const Arc2D_sequence& s);

  // ArcClose2D
  // 
  typedef ::ArcClose2D ArcClose2D_type;
  typedef ::xsd::cxx::tree::sequence< ArcClose2D_type > ArcClose2D_sequence;
  typedef ArcClose2D_sequence::iterator ArcClose2D_iterator;
  typedef ArcClose2D_sequence::const_iterator ArcClose2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< ArcClose2D_type, char > ArcClose2D_traits;

  const ArcClose2D_sequence&
  ArcClose2D () const;

  ArcClose2D_sequence&
  ArcClose2D ();

  void
  ArcClose2D (const ArcClose2D_sequence& s);

  // Circle2D
  // 
  typedef ::Circle2D Circle2D_type;
  typedef ::xsd::cxx::tree::sequence< Circle2D_type > Circle2D_sequence;
  typedef Circle2D_sequence::iterator Circle2D_iterator;
  typedef Circle2D_sequence::const_iterator Circle2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Circle2D_type, char > Circle2D_traits;

  const Circle2D_sequence&
  Circle2D () const;

  Circle2D_sequence&
  Circle2D ();

  void
  Circle2D (const Circle2D_sequence& s);

  // Disk2D
  // 
  typedef ::Disk2D Disk2D_type;
  typedef ::xsd::cxx::tree::sequence< Disk2D_type > Disk2D_sequence;
  typedef Disk2D_sequence::iterator Disk2D_iterator;
  typedef Disk2D_sequence::const_iterator Disk2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Disk2D_type, char > Disk2D_traits;

  const Disk2D_sequence&
  Disk2D () const;

  Disk2D_sequence&
  Disk2D ();

  void
  Disk2D (const Disk2D_sequence& s);

  // QuadSet
  // 
  typedef ::QuadSet QuadSet_type;
  typedef ::xsd::cxx::tree::sequence< QuadSet_type > QuadSet_sequence;
  typedef QuadSet_sequence::iterator QuadSet_iterator;
  typedef QuadSet_sequence::const_iterator QuadSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< QuadSet_type, char > QuadSet_traits;

  const QuadSet_sequence&
  QuadSet () const;

  QuadSet_sequence&
  QuadSet ();

  void
  QuadSet (const QuadSet_sequence& s);

  // IndexedQuadSet
  // 
  typedef ::IndexedQuadSet IndexedQuadSet_type;
  typedef ::xsd::cxx::tree::sequence< IndexedQuadSet_type > IndexedQuadSet_sequence;
  typedef IndexedQuadSet_sequence::iterator IndexedQuadSet_iterator;
  typedef IndexedQuadSet_sequence::const_iterator IndexedQuadSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< IndexedQuadSet_type, char > IndexedQuadSet_traits;

  const IndexedQuadSet_sequence&
  IndexedQuadSet () const;

  IndexedQuadSet_sequence&
  IndexedQuadSet ();

  void
  IndexedQuadSet (const IndexedQuadSet_sequence& s);

  // GeoElevationGrid
  // 
  typedef ::GeoElevationGrid GeoElevationGrid_type;
  typedef ::xsd::cxx::tree::sequence< GeoElevationGrid_type > GeoElevationGrid_sequence;
  typedef GeoElevationGrid_sequence::iterator GeoElevationGrid_iterator;
  typedef GeoElevationGrid_sequence::const_iterator GeoElevationGrid_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoElevationGrid_type, char > GeoElevationGrid_traits;

  const GeoElevationGrid_sequence&
  GeoElevationGrid () const;

  GeoElevationGrid_sequence&
  GeoElevationGrid ();

  void
  GeoElevationGrid (const GeoElevationGrid_sequence& s);

  // NurbsCurve
  // 
  typedef ::NurbsCurve NurbsCurve_type;
  typedef ::xsd::cxx::tree::sequence< NurbsCurve_type > NurbsCurve_sequence;
  typedef NurbsCurve_sequence::iterator NurbsCurve_iterator;
  typedef NurbsCurve_sequence::const_iterator NurbsCurve_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsCurve_type, char > NurbsCurve_traits;

  const NurbsCurve_sequence&
  NurbsCurve () const;

  NurbsCurve_sequence&
  NurbsCurve ();

  void
  NurbsCurve (const NurbsCurve_sequence& s);

  // NurbsCurve2D
  // 
  typedef ::NurbsCurve2D NurbsCurve2D_type;
  typedef ::xsd::cxx::tree::sequence< NurbsCurve2D_type > NurbsCurve2D_sequence;
  typedef NurbsCurve2D_sequence::iterator NurbsCurve2D_iterator;
  typedef NurbsCurve2D_sequence::const_iterator NurbsCurve2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsCurve2D_type, char > NurbsCurve2D_traits;

  const NurbsCurve2D_sequence&
  NurbsCurve2D () const;

  NurbsCurve2D_sequence&
  NurbsCurve2D ();

  void
  NurbsCurve2D (const NurbsCurve2D_sequence& s);

  // NurbsPatchSurface
  // 
  typedef ::NurbsPatchSurface NurbsPatchSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsPatchSurface_type > NurbsPatchSurface_sequence;
  typedef NurbsPatchSurface_sequence::iterator NurbsPatchSurface_iterator;
  typedef NurbsPatchSurface_sequence::const_iterator NurbsPatchSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsPatchSurface_type, char > NurbsPatchSurface_traits;

  const NurbsPatchSurface_sequence&
  NurbsPatchSurface () const;

  NurbsPatchSurface_sequence&
  NurbsPatchSurface ();

  void
  NurbsPatchSurface (const NurbsPatchSurface_sequence& s);

  // NurbsSweptSurface
  // 
  typedef ::NurbsSweptSurface NurbsSweptSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSweptSurface_type > NurbsSweptSurface_sequence;
  typedef NurbsSweptSurface_sequence::iterator NurbsSweptSurface_iterator;
  typedef NurbsSweptSurface_sequence::const_iterator NurbsSweptSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSweptSurface_type, char > NurbsSweptSurface_traits;

  const NurbsSweptSurface_sequence&
  NurbsSweptSurface () const;

  NurbsSweptSurface_sequence&
  NurbsSweptSurface ();

  void
  NurbsSweptSurface (const NurbsSweptSurface_sequence& s);

  // NurbsSwungSurface
  // 
  typedef ::NurbsSwungSurface NurbsSwungSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSwungSurface_type > NurbsSwungSurface_sequence;
  typedef NurbsSwungSurface_sequence::iterator NurbsSwungSurface_iterator;
  typedef NurbsSwungSurface_sequence::const_iterator NurbsSwungSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSwungSurface_type, char > NurbsSwungSurface_traits;

  const NurbsSwungSurface_sequence&
  NurbsSwungSurface () const;

  NurbsSwungSurface_sequence&
  NurbsSwungSurface ();

  void
  NurbsSwungSurface (const NurbsSwungSurface_sequence& s);

  // NurbsTrimmedSurface
  // 
  typedef ::NurbsTrimmedSurface NurbsTrimmedSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTrimmedSurface_type > NurbsTrimmedSurface_sequence;
  typedef NurbsTrimmedSurface_sequence::iterator NurbsTrimmedSurface_iterator;
  typedef NurbsTrimmedSurface_sequence::const_iterator NurbsTrimmedSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTrimmedSurface_type, char > NurbsTrimmedSurface_traits;

  const NurbsTrimmedSurface_sequence&
  NurbsTrimmedSurface () const;

  NurbsTrimmedSurface_sequence&
  NurbsTrimmedSurface ();

  void
  NurbsTrimmedSurface (const NurbsTrimmedSurface_sequence& s);

  // Color
  // 
  typedef ::Color Color_type;
  typedef ::xsd::cxx::tree::sequence< Color_type > Color_sequence;
  typedef Color_sequence::iterator Color_iterator;
  typedef Color_sequence::const_iterator Color_const_iterator;
  typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

  const Color_sequence&
  Color () const;

  Color_sequence&
  Color ();

  void
  Color (const Color_sequence& s);

  // ColorRGBA
  // 
  typedef ::ColorRGBA ColorRGBA_type;
  typedef ::xsd::cxx::tree::sequence< ColorRGBA_type > ColorRGBA_sequence;
  typedef ColorRGBA_sequence::iterator ColorRGBA_iterator;
  typedef ColorRGBA_sequence::const_iterator ColorRGBA_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorRGBA_type, char > ColorRGBA_traits;

  const ColorRGBA_sequence&
  ColorRGBA () const;

  ColorRGBA_sequence&
  ColorRGBA ();

  void
  ColorRGBA (const ColorRGBA_sequence& s);

  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::sequence< Coordinate_type > Coordinate_sequence;
  typedef Coordinate_sequence::iterator Coordinate_iterator;
  typedef Coordinate_sequence::const_iterator Coordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_sequence&
  Coordinate () const;

  Coordinate_sequence&
  Coordinate ();

  void
  Coordinate (const Coordinate_sequence& s);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateDouble_type > CoordinateDouble_sequence;
  typedef CoordinateDouble_sequence::iterator CoordinateDouble_iterator;
  typedef CoordinateDouble_sequence::const_iterator CoordinateDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_sequence&
  CoordinateDouble () const;

  CoordinateDouble_sequence&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_sequence& s);

  // FontStyle
  // 
  typedef ::FontStyle FontStyle_type;
  typedef ::xsd::cxx::tree::sequence< FontStyle_type > FontStyle_sequence;
  typedef FontStyle_sequence::iterator FontStyle_iterator;
  typedef FontStyle_sequence::const_iterator FontStyle_const_iterator;
  typedef ::xsd::cxx::tree::traits< FontStyle_type, char > FontStyle_traits;

  const FontStyle_sequence&
  FontStyle () const;

  FontStyle_sequence&
  FontStyle ();

  void
  FontStyle (const FontStyle_sequence& s);

  // GeoCoordinate
  // 
  typedef ::GeoCoordinate GeoCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< GeoCoordinate_type > GeoCoordinate_sequence;
  typedef GeoCoordinate_sequence::iterator GeoCoordinate_iterator;
  typedef GeoCoordinate_sequence::const_iterator GeoCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoCoordinate_type, char > GeoCoordinate_traits;

  const GeoCoordinate_sequence&
  GeoCoordinate () const;

  GeoCoordinate_sequence&
  GeoCoordinate ();

  void
  GeoCoordinate (const GeoCoordinate_sequence& s);

  // Normal
  // 
  typedef ::Normal Normal_type;
  typedef ::xsd::cxx::tree::sequence< Normal_type > Normal_sequence;
  typedef Normal_sequence::iterator Normal_iterator;
  typedef Normal_sequence::const_iterator Normal_const_iterator;
  typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

  const Normal_sequence&
  Normal () const;

  Normal_sequence&
  Normal ();

  void
  Normal (const Normal_sequence& s);

  // TextureCoordinate
  // 
  typedef ::TextureCoordinate TextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate_type > TextureCoordinate_sequence;
  typedef TextureCoordinate_sequence::iterator TextureCoordinate_iterator;
  typedef TextureCoordinate_sequence::const_iterator TextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate_type, char > TextureCoordinate_traits;

  const TextureCoordinate_sequence&
  TextureCoordinate () const;

  TextureCoordinate_sequence&
  TextureCoordinate ();

  void
  TextureCoordinate (const TextureCoordinate_sequence& s);

  // NurbsTextureCoordinate
  // 
  typedef ::NurbsTextureCoordinate NurbsTextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTextureCoordinate_type > NurbsTextureCoordinate_sequence;
  typedef NurbsTextureCoordinate_sequence::iterator NurbsTextureCoordinate_iterator;
  typedef NurbsTextureCoordinate_sequence::const_iterator NurbsTextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTextureCoordinate_type, char > NurbsTextureCoordinate_traits;

  const NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate () const;

  NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate ();

  void
  NurbsTextureCoordinate (const NurbsTextureCoordinate_sequence& s);

  // ROUTE
  // 
  typedef ::ROUTE ROUTE_type;
  typedef ::xsd::cxx::tree::sequence< ROUTE_type > ROUTE_sequence;
  typedef ROUTE_sequence::iterator ROUTE_iterator;
  typedef ROUTE_sequence::const_iterator ROUTE_const_iterator;
  typedef ::xsd::cxx::tree::traits< ROUTE_type, char > ROUTE_traits;

  const ROUTE_sequence&
  ROUTE () const;

  ROUTE_sequence&
  ROUTE ();

  void
  ROUTE (const ROUTE_sequence& s);

  // ExternProtoDeclare
  // 
  typedef ::ExternProtoDeclare ExternProtoDeclare_type;
  typedef ::xsd::cxx::tree::sequence< ExternProtoDeclare_type > ExternProtoDeclare_sequence;
  typedef ExternProtoDeclare_sequence::iterator ExternProtoDeclare_iterator;
  typedef ExternProtoDeclare_sequence::const_iterator ExternProtoDeclare_const_iterator;
  typedef ::xsd::cxx::tree::traits< ExternProtoDeclare_type, char > ExternProtoDeclare_traits;

  const ExternProtoDeclare_sequence&
  ExternProtoDeclare () const;

  ExternProtoDeclare_sequence&
  ExternProtoDeclare ();

  void
  ExternProtoDeclare (const ExternProtoDeclare_sequence& s);

  // ProtoDeclare
  // 
  typedef ::ProtoDeclare ProtoDeclare_type;
  typedef ::xsd::cxx::tree::sequence< ProtoDeclare_type > ProtoDeclare_sequence;
  typedef ProtoDeclare_sequence::iterator ProtoDeclare_iterator;
  typedef ProtoDeclare_sequence::const_iterator ProtoDeclare_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoDeclare_type, char > ProtoDeclare_traits;

  const ProtoDeclare_sequence&
  ProtoDeclare () const;

  ProtoDeclare_sequence&
  ProtoDeclare ();

  void
  ProtoDeclare (const ProtoDeclare_sequence& s);

  // IMPORT
  // 
  typedef ::IMPORT IMPORT_type;
  typedef ::xsd::cxx::tree::sequence< IMPORT_type > IMPORT_sequence;
  typedef IMPORT_sequence::iterator IMPORT_iterator;
  typedef IMPORT_sequence::const_iterator IMPORT_const_iterator;
  typedef ::xsd::cxx::tree::traits< IMPORT_type, char > IMPORT_traits;

  const IMPORT_sequence&
  IMPORT () const;

  IMPORT_sequence&
  IMPORT ();

  void
  IMPORT (const IMPORT_sequence& s);

  // EXPORT
  // 
  typedef ::EXPORT EXPORT_type;
  typedef ::xsd::cxx::tree::sequence< EXPORT_type > EXPORT_sequence;
  typedef EXPORT_sequence::iterator EXPORT_iterator;
  typedef EXPORT_sequence::const_iterator EXPORT_const_iterator;
  typedef ::xsd::cxx::tree::traits< EXPORT_type, char > EXPORT_traits;

  const EXPORT_sequence&
  EXPORT () const;

  EXPORT_sequence&
  EXPORT ();

  void
  EXPORT (const EXPORT_sequence& s);

  // Constructors.
  //
  ProtoBody ();

  ProtoBody (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  ProtoBody (const ProtoBody& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual ProtoBody*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ProtoBody ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  FillProperties_sequence FillProperties_;
  LineProperties_sequence LineProperties_;
  Material_sequence Material_;
  ComposedShader_sequence ComposedShader_;
  PackagedShader_sequence PackagedShader_;
  ProgramShader_sequence ProgramShader_;
  ComposedCubeMapTexture_sequence ComposedCubeMapTexture_;
  ImageTexture_sequence ImageTexture_;
  MovieTexture_sequence MovieTexture_;
  MultiTexture_sequence MultiTexture_;
  PixelTexture_sequence PixelTexture_;
  GeneratedCubeMapTexture_sequence GeneratedCubeMapTexture_;
  ImageCubeMapTexture_sequence ImageCubeMapTexture_;
  MultiTextureTransform_sequence MultiTextureTransform_;
  TextureTransform_sequence TextureTransform_;
  MetadataDouble_sequence MetadataDouble_;
  MetadataFloat_sequence MetadataFloat_;
  MetadataInteger_sequence MetadataInteger_;
  MetadataSet_sequence MetadataSet_;
  MetadataString_sequence MetadataString_;
  Appearance_sequence Appearance_;
  Background_sequence Background_;
  ColorInterpolator_sequence ColorInterpolator_;
  CoordinateInterpolator_sequence CoordinateInterpolator_;
  DirectionalLight_sequence DirectionalLight_;
  Group_sequence Group_;
  NavigationInfo_sequence NavigationInfo_;
  NormalInterpolator_sequence NormalInterpolator_;
  OrientationInterpolator_sequence OrientationInterpolator_;
  PositionInterpolator_sequence PositionInterpolator_;
  ScalarInterpolator_sequence ScalarInterpolator_;
  Shape_sequence Shape_;
  TimeSensor_sequence TimeSensor_;
  Transform_sequence Transform_;
  Viewpoint_sequence Viewpoint_;
  WorldInfo_sequence WorldInfo_;
  Anchor_sequence Anchor_;
  BooleanFilter_sequence BooleanFilter_;
  BooleanSequencer_sequence BooleanSequencer_;
  BooleanToggle_sequence BooleanToggle_;
  BooleanTrigger_sequence BooleanTrigger_;
  CylinderSensor_sequence CylinderSensor_;
  Inline_sequence Inline_;
  IntegerSequencer_sequence IntegerSequencer_;
  IntegerTrigger_sequence IntegerTrigger_;
  KeySensor_sequence KeySensor_;
  PlaneSensor_sequence PlaneSensor_;
  PointLight_sequence PointLight_;
  ProximitySensor_sequence ProximitySensor_;
  SphereSensor_sequence SphereSensor_;
  SpotLight_sequence SpotLight_;
  StringSensor_sequence StringSensor_;
  Switch_sequence Switch_;
  TimeTrigger_sequence TimeTrigger_;
  TouchSensor_sequence TouchSensor_;
  AudioClip_sequence AudioClip_;
  Billboard_sequence Billboard_;
  Collision_sequence Collision_;
  Fog_sequence Fog_;
  LoadSensor_sequence LoadSensor_;
  LocalFog_sequence LocalFog_;
  LOD_sequence LOD_;
  Script_sequence Script_;
  Sound_sequence Sound_;
  VisibilitySensor_sequence VisibilitySensor_;
  CoordinateInterpolator2D_sequence CoordinateInterpolator2D_;
  PositionInterpolator2D_sequence PositionInterpolator2D_;
  StaticGroup_sequence StaticGroup_;
  CADAssembly_sequence CADAssembly_;
  CADLayer_sequence CADLayer_;
  EspduTransform_sequence EspduTransform_;
  ReceiverPdu_sequence ReceiverPdu_;
  SignalPdu_sequence SignalPdu_;
  TransmitterPdu_sequence TransmitterPdu_;
  GeoLocation_sequence GeoLocation_;
  GeoLOD_sequence GeoLOD_;
  GeoMetadata_sequence GeoMetadata_;
  GeoOrigin_sequence GeoOrigin_;
  GeoPositionInterpolator_sequence GeoPositionInterpolator_;
  GeoTouchSensor_sequence GeoTouchSensor_;
  GeoViewpoint_sequence GeoViewpoint_;
  HAnimHumanoid_sequence HAnimHumanoid_;
  HAnimJoint_sequence HAnimJoint_;
  HAnimSegment_sequence HAnimSegment_;
  HAnimSite_sequence HAnimSite_;
  NurbsOrientationInterpolator_sequence NurbsOrientationInterpolator_;
  NurbsPositionInterpolator_sequence NurbsPositionInterpolator_;
  NurbsSurfaceInterpolator_sequence NurbsSurfaceInterpolator_;
  NurbsSet_sequence NurbsSet_;
  ProtoInstance_sequence ProtoInstance_;
  Box_sequence Box_;
  Cone_sequence Cone_;
  Cylinder_sequence Cylinder_;
  IndexedFaceSet_sequence IndexedFaceSet_;
  IndexedLineSet_sequence IndexedLineSet_;
  IndexedTriangleFanSet_sequence IndexedTriangleFanSet_;
  IndexedTriangleSet_sequence IndexedTriangleSet_;
  IndexedTriangleStripSet_sequence IndexedTriangleStripSet_;
  LineSet_sequence LineSet_;
  PointSet_sequence PointSet_;
  Sphere_sequence Sphere_;
  TriangleFanSet_sequence TriangleFanSet_;
  TriangleSet_sequence TriangleSet_;
  TriangleStripSet_sequence TriangleStripSet_;
  ElevationGrid_sequence ElevationGrid_;
  Polyline2D_sequence Polyline2D_;
  Polypoint2D_sequence Polypoint2D_;
  Rectangle2D_sequence Rectangle2D_;
  TriangleSet2D_sequence TriangleSet2D_;
  Extrusion_sequence Extrusion_;
  Text_sequence Text_;
  Arc2D_sequence Arc2D_;
  ArcClose2D_sequence ArcClose2D_;
  Circle2D_sequence Circle2D_;
  Disk2D_sequence Disk2D_;
  QuadSet_sequence QuadSet_;
  IndexedQuadSet_sequence IndexedQuadSet_;
  GeoElevationGrid_sequence GeoElevationGrid_;
  NurbsCurve_sequence NurbsCurve_;
  NurbsCurve2D_sequence NurbsCurve2D_;
  NurbsPatchSurface_sequence NurbsPatchSurface_;
  NurbsSweptSurface_sequence NurbsSweptSurface_;
  NurbsSwungSurface_sequence NurbsSwungSurface_;
  NurbsTrimmedSurface_sequence NurbsTrimmedSurface_;
  Color_sequence Color_;
  ColorRGBA_sequence ColorRGBA_;
  Coordinate_sequence Coordinate_;
  CoordinateDouble_sequence CoordinateDouble_;
  FontStyle_sequence FontStyle_;
  GeoCoordinate_sequence GeoCoordinate_;
  Normal_sequence Normal_;
  TextureCoordinate_sequence TextureCoordinate_;
  NurbsTextureCoordinate_sequence NurbsTextureCoordinate_;
  ROUTE_sequence ROUTE_;
  ExternProtoDeclare_sequence ExternProtoDeclare_;
  ProtoDeclare_sequence ProtoDeclare_;
  IMPORT_sequence IMPORT_;
  EXPORT_sequence EXPORT_;
};

class ProtoInstance: public ::X3DPrototype
{
  public:
  // fieldValue
  // 
  typedef ::fieldValue fieldValue_type;
  typedef ::xsd::cxx::tree::sequence< fieldValue_type > fieldValue_sequence;
  typedef fieldValue_sequence::iterator fieldValue_iterator;
  typedef fieldValue_sequence::const_iterator fieldValue_const_iterator;
  typedef ::xsd::cxx::tree::traits< fieldValue_type, char > fieldValue_traits;

  const fieldValue_sequence&
  fieldValue () const;

  fieldValue_sequence&
  fieldValue ();

  void
  fieldValue (const fieldValue_sequence& s);

  // IS
  // 
  typedef ::IS IS_type;
  typedef ::xsd::cxx::tree::sequence< IS_type > IS_sequence;
  typedef IS_sequence::iterator IS_iterator;
  typedef IS_sequence::const_iterator IS_const_iterator;
  typedef ::xsd::cxx::tree::traits< IS_type, char > IS_traits;

  const IS_sequence&
  IS () const;

  IS_sequence&
  IS ();

  void
  IS (const IS_sequence& s);

  // DEF
  // 
  typedef ::xml_schema::id DEF_type;
  typedef ::xsd::cxx::tree::optional< DEF_type > DEF_optional;
  typedef ::xsd::cxx::tree::traits< DEF_type, char > DEF_traits;

  const DEF_optional&
  DEF () const;

  DEF_optional&
  DEF ();

  void
  DEF (const DEF_type& x);

  void
  DEF (const DEF_optional& x);

  void
  DEF (::std::auto_ptr< DEF_type > p);

  // USE
  // 
  typedef ::xml_schema::idref USE_type;
  typedef ::xsd::cxx::tree::optional< USE_type > USE_optional;
  typedef ::xsd::cxx::tree::traits< USE_type, char > USE_traits;

  const USE_optional&
  USE () const;

  USE_optional&
  USE ();

  void
  USE (const USE_type& x);

  void
  USE (const USE_optional& x);

  void
  USE (::std::auto_ptr< USE_type > p);

  // class
  // 
  typedef ::xml_schema::nmtoken class_type;
  typedef ::xsd::cxx::tree::optional< class_type > class_optional;
  typedef ::xsd::cxx::tree::traits< class_type, char > class_traits;

  const class_optional&
  class_ () const;

  class_optional&
  class_ ();

  void
  class_ (const class_type& x);

  void
  class_ (const class_optional& x);

  void
  class_ (::std::auto_ptr< class_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  ProtoInstance (const name_type&);

  ProtoInstance (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ProtoInstance (const ProtoInstance& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ProtoInstance*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ProtoInstance ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  fieldValue_sequence fieldValue_;
  IS_sequence IS_;
  DEF_optional DEF_;
  USE_optional USE_;
  class_optional class__;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class ROUTE: public ::SceneGraphStructureNodeType
{
  public:
  // fromNode
  // 
  typedef ::xml_schema::idref fromNode_type;
  typedef ::xsd::cxx::tree::traits< fromNode_type, char > fromNode_traits;

  const fromNode_type&
  fromNode () const;

  fromNode_type&
  fromNode ();

  void
  fromNode (const fromNode_type& x);

  void
  fromNode (::std::auto_ptr< fromNode_type > p);

  // fromField
  // 
  typedef ::xml_schema::nmtoken fromField_type;
  typedef ::xsd::cxx::tree::traits< fromField_type, char > fromField_traits;

  const fromField_type&
  fromField () const;

  fromField_type&
  fromField ();

  void
  fromField (const fromField_type& x);

  void
  fromField (::std::auto_ptr< fromField_type > p);

  // toNode
  // 
  typedef ::xml_schema::idref toNode_type;
  typedef ::xsd::cxx::tree::traits< toNode_type, char > toNode_traits;

  const toNode_type&
  toNode () const;

  toNode_type&
  toNode ();

  void
  toNode (const toNode_type& x);

  void
  toNode (::std::auto_ptr< toNode_type > p);

  // toField
  // 
  typedef ::xml_schema::nmtoken toField_type;
  typedef ::xsd::cxx::tree::traits< toField_type, char > toField_traits;

  const toField_type&
  toField () const;

  toField_type&
  toField ();

  void
  toField (const toField_type& x);

  void
  toField (::std::auto_ptr< toField_type > p);

  // Constructors.
  //
  ROUTE (const fromNode_type&,
         const fromField_type&,
         const toNode_type&,
         const toField_type&);

  ROUTE (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  ROUTE (const ROUTE& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual ROUTE*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ROUTE ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< fromNode_type > fromNode_;
  ::xsd::cxx::tree::one< fromField_type > fromField_;
  ::xsd::cxx::tree::one< toNode_type > toNode_;
  ::xsd::cxx::tree::one< toField_type > toField_;
};

class Scene: public ::SceneGraphStructureNodeType
{
  public:
  // MetadataDouble
  // 
  typedef ::MetadataDouble MetadataDouble_type;
  typedef ::xsd::cxx::tree::sequence< MetadataDouble_type > MetadataDouble_sequence;
  typedef MetadataDouble_sequence::iterator MetadataDouble_iterator;
  typedef MetadataDouble_sequence::const_iterator MetadataDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataDouble_type, char > MetadataDouble_traits;

  const MetadataDouble_sequence&
  MetadataDouble () const;

  MetadataDouble_sequence&
  MetadataDouble ();

  void
  MetadataDouble (const MetadataDouble_sequence& s);

  // MetadataFloat
  // 
  typedef ::MetadataFloat MetadataFloat_type;
  typedef ::xsd::cxx::tree::sequence< MetadataFloat_type > MetadataFloat_sequence;
  typedef MetadataFloat_sequence::iterator MetadataFloat_iterator;
  typedef MetadataFloat_sequence::const_iterator MetadataFloat_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataFloat_type, char > MetadataFloat_traits;

  const MetadataFloat_sequence&
  MetadataFloat () const;

  MetadataFloat_sequence&
  MetadataFloat ();

  void
  MetadataFloat (const MetadataFloat_sequence& s);

  // MetadataInteger
  // 
  typedef ::MetadataInteger MetadataInteger_type;
  typedef ::xsd::cxx::tree::sequence< MetadataInteger_type > MetadataInteger_sequence;
  typedef MetadataInteger_sequence::iterator MetadataInteger_iterator;
  typedef MetadataInteger_sequence::const_iterator MetadataInteger_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataInteger_type, char > MetadataInteger_traits;

  const MetadataInteger_sequence&
  MetadataInteger () const;

  MetadataInteger_sequence&
  MetadataInteger ();

  void
  MetadataInteger (const MetadataInteger_sequence& s);

  // MetadataSet
  // 
  typedef ::MetadataSet MetadataSet_type;
  typedef ::xsd::cxx::tree::sequence< MetadataSet_type > MetadataSet_sequence;
  typedef MetadataSet_sequence::iterator MetadataSet_iterator;
  typedef MetadataSet_sequence::const_iterator MetadataSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataSet_type, char > MetadataSet_traits;

  const MetadataSet_sequence&
  MetadataSet () const;

  MetadataSet_sequence&
  MetadataSet ();

  void
  MetadataSet (const MetadataSet_sequence& s);

  // MetadataString
  // 
  typedef ::MetadataString MetadataString_type;
  typedef ::xsd::cxx::tree::sequence< MetadataString_type > MetadataString_sequence;
  typedef MetadataString_sequence::iterator MetadataString_iterator;
  typedef MetadataString_sequence::const_iterator MetadataString_const_iterator;
  typedef ::xsd::cxx::tree::traits< MetadataString_type, char > MetadataString_traits;

  const MetadataString_sequence&
  MetadataString () const;

  MetadataString_sequence&
  MetadataString ();

  void
  MetadataString (const MetadataString_sequence& s);

  // Appearance
  // 
  typedef ::Appearance Appearance_type;
  typedef ::xsd::cxx::tree::sequence< Appearance_type > Appearance_sequence;
  typedef Appearance_sequence::iterator Appearance_iterator;
  typedef Appearance_sequence::const_iterator Appearance_const_iterator;
  typedef ::xsd::cxx::tree::traits< Appearance_type, char > Appearance_traits;

  const Appearance_sequence&
  Appearance () const;

  Appearance_sequence&
  Appearance ();

  void
  Appearance (const Appearance_sequence& s);

  // Background
  // 
  typedef ::Background Background_type;
  typedef ::xsd::cxx::tree::sequence< Background_type > Background_sequence;
  typedef Background_sequence::iterator Background_iterator;
  typedef Background_sequence::const_iterator Background_const_iterator;
  typedef ::xsd::cxx::tree::traits< Background_type, char > Background_traits;

  const Background_sequence&
  Background () const;

  Background_sequence&
  Background ();

  void
  Background (const Background_sequence& s);

  // ColorInterpolator
  // 
  typedef ::ColorInterpolator ColorInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ColorInterpolator_type > ColorInterpolator_sequence;
  typedef ColorInterpolator_sequence::iterator ColorInterpolator_iterator;
  typedef ColorInterpolator_sequence::const_iterator ColorInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorInterpolator_type, char > ColorInterpolator_traits;

  const ColorInterpolator_sequence&
  ColorInterpolator () const;

  ColorInterpolator_sequence&
  ColorInterpolator ();

  void
  ColorInterpolator (const ColorInterpolator_sequence& s);

  // CoordinateInterpolator
  // 
  typedef ::CoordinateInterpolator CoordinateInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator_type > CoordinateInterpolator_sequence;
  typedef CoordinateInterpolator_sequence::iterator CoordinateInterpolator_iterator;
  typedef CoordinateInterpolator_sequence::const_iterator CoordinateInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator_type, char > CoordinateInterpolator_traits;

  const CoordinateInterpolator_sequence&
  CoordinateInterpolator () const;

  CoordinateInterpolator_sequence&
  CoordinateInterpolator ();

  void
  CoordinateInterpolator (const CoordinateInterpolator_sequence& s);

  // DirectionalLight
  // 
  typedef ::DirectionalLight DirectionalLight_type;
  typedef ::xsd::cxx::tree::sequence< DirectionalLight_type > DirectionalLight_sequence;
  typedef DirectionalLight_sequence::iterator DirectionalLight_iterator;
  typedef DirectionalLight_sequence::const_iterator DirectionalLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< DirectionalLight_type, char > DirectionalLight_traits;

  const DirectionalLight_sequence&
  DirectionalLight () const;

  DirectionalLight_sequence&
  DirectionalLight ();

  void
  DirectionalLight (const DirectionalLight_sequence& s);

  // Group
  // 
  typedef ::Group Group_type;
  typedef ::xsd::cxx::tree::sequence< Group_type > Group_sequence;
  typedef Group_sequence::iterator Group_iterator;
  typedef Group_sequence::const_iterator Group_const_iterator;
  typedef ::xsd::cxx::tree::traits< Group_type, char > Group_traits;

  const Group_sequence&
  Group () const;

  Group_sequence&
  Group ();

  void
  Group (const Group_sequence& s);

  // NavigationInfo
  // 
  typedef ::NavigationInfo NavigationInfo_type;
  typedef ::xsd::cxx::tree::sequence< NavigationInfo_type > NavigationInfo_sequence;
  typedef NavigationInfo_sequence::iterator NavigationInfo_iterator;
  typedef NavigationInfo_sequence::const_iterator NavigationInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< NavigationInfo_type, char > NavigationInfo_traits;

  const NavigationInfo_sequence&
  NavigationInfo () const;

  NavigationInfo_sequence&
  NavigationInfo ();

  void
  NavigationInfo (const NavigationInfo_sequence& s);

  // NormalInterpolator
  // 
  typedef ::NormalInterpolator NormalInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NormalInterpolator_type > NormalInterpolator_sequence;
  typedef NormalInterpolator_sequence::iterator NormalInterpolator_iterator;
  typedef NormalInterpolator_sequence::const_iterator NormalInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NormalInterpolator_type, char > NormalInterpolator_traits;

  const NormalInterpolator_sequence&
  NormalInterpolator () const;

  NormalInterpolator_sequence&
  NormalInterpolator ();

  void
  NormalInterpolator (const NormalInterpolator_sequence& s);

  // OrientationInterpolator
  // 
  typedef ::OrientationInterpolator OrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< OrientationInterpolator_type > OrientationInterpolator_sequence;
  typedef OrientationInterpolator_sequence::iterator OrientationInterpolator_iterator;
  typedef OrientationInterpolator_sequence::const_iterator OrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< OrientationInterpolator_type, char > OrientationInterpolator_traits;

  const OrientationInterpolator_sequence&
  OrientationInterpolator () const;

  OrientationInterpolator_sequence&
  OrientationInterpolator ();

  void
  OrientationInterpolator (const OrientationInterpolator_sequence& s);

  // PositionInterpolator
  // 
  typedef ::PositionInterpolator PositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator_type > PositionInterpolator_sequence;
  typedef PositionInterpolator_sequence::iterator PositionInterpolator_iterator;
  typedef PositionInterpolator_sequence::const_iterator PositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator_type, char > PositionInterpolator_traits;

  const PositionInterpolator_sequence&
  PositionInterpolator () const;

  PositionInterpolator_sequence&
  PositionInterpolator ();

  void
  PositionInterpolator (const PositionInterpolator_sequence& s);

  // ScalarInterpolator
  // 
  typedef ::ScalarInterpolator ScalarInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ScalarInterpolator_type > ScalarInterpolator_sequence;
  typedef ScalarInterpolator_sequence::iterator ScalarInterpolator_iterator;
  typedef ScalarInterpolator_sequence::const_iterator ScalarInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ScalarInterpolator_type, char > ScalarInterpolator_traits;

  const ScalarInterpolator_sequence&
  ScalarInterpolator () const;

  ScalarInterpolator_sequence&
  ScalarInterpolator ();

  void
  ScalarInterpolator (const ScalarInterpolator_sequence& s);

  // Shape
  // 
  typedef ::Shape Shape_type;
  typedef ::xsd::cxx::tree::sequence< Shape_type > Shape_sequence;
  typedef Shape_sequence::iterator Shape_iterator;
  typedef Shape_sequence::const_iterator Shape_const_iterator;
  typedef ::xsd::cxx::tree::traits< Shape_type, char > Shape_traits;

  const Shape_sequence&
  Shape () const;

  Shape_sequence&
  Shape ();

  void
  Shape (const Shape_sequence& s);

  // TimeSensor
  // 
  typedef ::TimeSensor TimeSensor_type;
  typedef ::xsd::cxx::tree::sequence< TimeSensor_type > TimeSensor_sequence;
  typedef TimeSensor_sequence::iterator TimeSensor_iterator;
  typedef TimeSensor_sequence::const_iterator TimeSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeSensor_type, char > TimeSensor_traits;

  const TimeSensor_sequence&
  TimeSensor () const;

  TimeSensor_sequence&
  TimeSensor ();

  void
  TimeSensor (const TimeSensor_sequence& s);

  // Transform
  // 
  typedef ::Transform Transform_type;
  typedef ::xsd::cxx::tree::sequence< Transform_type > Transform_sequence;
  typedef Transform_sequence::iterator Transform_iterator;
  typedef Transform_sequence::const_iterator Transform_const_iterator;
  typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

  const Transform_sequence&
  Transform () const;

  Transform_sequence&
  Transform ();

  void
  Transform (const Transform_sequence& s);

  // Viewpoint
  // 
  typedef ::Viewpoint Viewpoint_type;
  typedef ::xsd::cxx::tree::sequence< Viewpoint_type > Viewpoint_sequence;
  typedef Viewpoint_sequence::iterator Viewpoint_iterator;
  typedef Viewpoint_sequence::const_iterator Viewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< Viewpoint_type, char > Viewpoint_traits;

  const Viewpoint_sequence&
  Viewpoint () const;

  Viewpoint_sequence&
  Viewpoint ();

  void
  Viewpoint (const Viewpoint_sequence& s);

  // WorldInfo
  // 
  typedef ::WorldInfo WorldInfo_type;
  typedef ::xsd::cxx::tree::sequence< WorldInfo_type > WorldInfo_sequence;
  typedef WorldInfo_sequence::iterator WorldInfo_iterator;
  typedef WorldInfo_sequence::const_iterator WorldInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< WorldInfo_type, char > WorldInfo_traits;

  const WorldInfo_sequence&
  WorldInfo () const;

  WorldInfo_sequence&
  WorldInfo ();

  void
  WorldInfo (const WorldInfo_sequence& s);

  // Anchor
  // 
  typedef ::Anchor Anchor_type;
  typedef ::xsd::cxx::tree::sequence< Anchor_type > Anchor_sequence;
  typedef Anchor_sequence::iterator Anchor_iterator;
  typedef Anchor_sequence::const_iterator Anchor_const_iterator;
  typedef ::xsd::cxx::tree::traits< Anchor_type, char > Anchor_traits;

  const Anchor_sequence&
  Anchor () const;

  Anchor_sequence&
  Anchor ();

  void
  Anchor (const Anchor_sequence& s);

  // BooleanFilter
  // 
  typedef ::BooleanFilter BooleanFilter_type;
  typedef ::xsd::cxx::tree::sequence< BooleanFilter_type > BooleanFilter_sequence;
  typedef BooleanFilter_sequence::iterator BooleanFilter_iterator;
  typedef BooleanFilter_sequence::const_iterator BooleanFilter_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanFilter_type, char > BooleanFilter_traits;

  const BooleanFilter_sequence&
  BooleanFilter () const;

  BooleanFilter_sequence&
  BooleanFilter ();

  void
  BooleanFilter (const BooleanFilter_sequence& s);

  // BooleanSequencer
  // 
  typedef ::BooleanSequencer BooleanSequencer_type;
  typedef ::xsd::cxx::tree::sequence< BooleanSequencer_type > BooleanSequencer_sequence;
  typedef BooleanSequencer_sequence::iterator BooleanSequencer_iterator;
  typedef BooleanSequencer_sequence::const_iterator BooleanSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanSequencer_type, char > BooleanSequencer_traits;

  const BooleanSequencer_sequence&
  BooleanSequencer () const;

  BooleanSequencer_sequence&
  BooleanSequencer ();

  void
  BooleanSequencer (const BooleanSequencer_sequence& s);

  // BooleanToggle
  // 
  typedef ::BooleanToggle BooleanToggle_type;
  typedef ::xsd::cxx::tree::sequence< BooleanToggle_type > BooleanToggle_sequence;
  typedef BooleanToggle_sequence::iterator BooleanToggle_iterator;
  typedef BooleanToggle_sequence::const_iterator BooleanToggle_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanToggle_type, char > BooleanToggle_traits;

  const BooleanToggle_sequence&
  BooleanToggle () const;

  BooleanToggle_sequence&
  BooleanToggle ();

  void
  BooleanToggle (const BooleanToggle_sequence& s);

  // BooleanTrigger
  // 
  typedef ::BooleanTrigger BooleanTrigger_type;
  typedef ::xsd::cxx::tree::sequence< BooleanTrigger_type > BooleanTrigger_sequence;
  typedef BooleanTrigger_sequence::iterator BooleanTrigger_iterator;
  typedef BooleanTrigger_sequence::const_iterator BooleanTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanTrigger_type, char > BooleanTrigger_traits;

  const BooleanTrigger_sequence&
  BooleanTrigger () const;

  BooleanTrigger_sequence&
  BooleanTrigger ();

  void
  BooleanTrigger (const BooleanTrigger_sequence& s);

  // CylinderSensor
  // 
  typedef ::CylinderSensor CylinderSensor_type;
  typedef ::xsd::cxx::tree::sequence< CylinderSensor_type > CylinderSensor_sequence;
  typedef CylinderSensor_sequence::iterator CylinderSensor_iterator;
  typedef CylinderSensor_sequence::const_iterator CylinderSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< CylinderSensor_type, char > CylinderSensor_traits;

  const CylinderSensor_sequence&
  CylinderSensor () const;

  CylinderSensor_sequence&
  CylinderSensor ();

  void
  CylinderSensor (const CylinderSensor_sequence& s);

  // Inline
  // 
  typedef ::Inline Inline_type;
  typedef ::xsd::cxx::tree::sequence< Inline_type > Inline_sequence;
  typedef Inline_sequence::iterator Inline_iterator;
  typedef Inline_sequence::const_iterator Inline_const_iterator;
  typedef ::xsd::cxx::tree::traits< Inline_type, char > Inline_traits;

  const Inline_sequence&
  Inline () const;

  Inline_sequence&
  Inline ();

  void
  Inline (const Inline_sequence& s);

  // IntegerSequencer
  // 
  typedef ::IntegerSequencer IntegerSequencer_type;
  typedef ::xsd::cxx::tree::sequence< IntegerSequencer_type > IntegerSequencer_sequence;
  typedef IntegerSequencer_sequence::iterator IntegerSequencer_iterator;
  typedef IntegerSequencer_sequence::const_iterator IntegerSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerSequencer_type, char > IntegerSequencer_traits;

  const IntegerSequencer_sequence&
  IntegerSequencer () const;

  IntegerSequencer_sequence&
  IntegerSequencer ();

  void
  IntegerSequencer (const IntegerSequencer_sequence& s);

  // IntegerTrigger
  // 
  typedef ::IntegerTrigger IntegerTrigger_type;
  typedef ::xsd::cxx::tree::sequence< IntegerTrigger_type > IntegerTrigger_sequence;
  typedef IntegerTrigger_sequence::iterator IntegerTrigger_iterator;
  typedef IntegerTrigger_sequence::const_iterator IntegerTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerTrigger_type, char > IntegerTrigger_traits;

  const IntegerTrigger_sequence&
  IntegerTrigger () const;

  IntegerTrigger_sequence&
  IntegerTrigger ();

  void
  IntegerTrigger (const IntegerTrigger_sequence& s);

  // KeySensor
  // 
  typedef ::KeySensor KeySensor_type;
  typedef ::xsd::cxx::tree::sequence< KeySensor_type > KeySensor_sequence;
  typedef KeySensor_sequence::iterator KeySensor_iterator;
  typedef KeySensor_sequence::const_iterator KeySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< KeySensor_type, char > KeySensor_traits;

  const KeySensor_sequence&
  KeySensor () const;

  KeySensor_sequence&
  KeySensor ();

  void
  KeySensor (const KeySensor_sequence& s);

  // PlaneSensor
  // 
  typedef ::PlaneSensor PlaneSensor_type;
  typedef ::xsd::cxx::tree::sequence< PlaneSensor_type > PlaneSensor_sequence;
  typedef PlaneSensor_sequence::iterator PlaneSensor_iterator;
  typedef PlaneSensor_sequence::const_iterator PlaneSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< PlaneSensor_type, char > PlaneSensor_traits;

  const PlaneSensor_sequence&
  PlaneSensor () const;

  PlaneSensor_sequence&
  PlaneSensor ();

  void
  PlaneSensor (const PlaneSensor_sequence& s);

  // PointLight
  // 
  typedef ::PointLight PointLight_type;
  typedef ::xsd::cxx::tree::sequence< PointLight_type > PointLight_sequence;
  typedef PointLight_sequence::iterator PointLight_iterator;
  typedef PointLight_sequence::const_iterator PointLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< PointLight_type, char > PointLight_traits;

  const PointLight_sequence&
  PointLight () const;

  PointLight_sequence&
  PointLight ();

  void
  PointLight (const PointLight_sequence& s);

  // ProximitySensor
  // 
  typedef ::ProximitySensor ProximitySensor_type;
  typedef ::xsd::cxx::tree::sequence< ProximitySensor_type > ProximitySensor_sequence;
  typedef ProximitySensor_sequence::iterator ProximitySensor_iterator;
  typedef ProximitySensor_sequence::const_iterator ProximitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProximitySensor_type, char > ProximitySensor_traits;

  const ProximitySensor_sequence&
  ProximitySensor () const;

  ProximitySensor_sequence&
  ProximitySensor ();

  void
  ProximitySensor (const ProximitySensor_sequence& s);

  // SphereSensor
  // 
  typedef ::SphereSensor SphereSensor_type;
  typedef ::xsd::cxx::tree::sequence< SphereSensor_type > SphereSensor_sequence;
  typedef SphereSensor_sequence::iterator SphereSensor_iterator;
  typedef SphereSensor_sequence::const_iterator SphereSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< SphereSensor_type, char > SphereSensor_traits;

  const SphereSensor_sequence&
  SphereSensor () const;

  SphereSensor_sequence&
  SphereSensor ();

  void
  SphereSensor (const SphereSensor_sequence& s);

  // SpotLight
  // 
  typedef ::SpotLight SpotLight_type;
  typedef ::xsd::cxx::tree::sequence< SpotLight_type > SpotLight_sequence;
  typedef SpotLight_sequence::iterator SpotLight_iterator;
  typedef SpotLight_sequence::const_iterator SpotLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< SpotLight_type, char > SpotLight_traits;

  const SpotLight_sequence&
  SpotLight () const;

  SpotLight_sequence&
  SpotLight ();

  void
  SpotLight (const SpotLight_sequence& s);

  // StringSensor
  // 
  typedef ::StringSensor StringSensor_type;
  typedef ::xsd::cxx::tree::sequence< StringSensor_type > StringSensor_sequence;
  typedef StringSensor_sequence::iterator StringSensor_iterator;
  typedef StringSensor_sequence::const_iterator StringSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< StringSensor_type, char > StringSensor_traits;

  const StringSensor_sequence&
  StringSensor () const;

  StringSensor_sequence&
  StringSensor ();

  void
  StringSensor (const StringSensor_sequence& s);

  // Switch
  // 
  typedef ::Switch Switch_type;
  typedef ::xsd::cxx::tree::sequence< Switch_type > Switch_sequence;
  typedef Switch_sequence::iterator Switch_iterator;
  typedef Switch_sequence::const_iterator Switch_const_iterator;
  typedef ::xsd::cxx::tree::traits< Switch_type, char > Switch_traits;

  const Switch_sequence&
  Switch () const;

  Switch_sequence&
  Switch ();

  void
  Switch (const Switch_sequence& s);

  // TimeTrigger
  // 
  typedef ::TimeTrigger TimeTrigger_type;
  typedef ::xsd::cxx::tree::sequence< TimeTrigger_type > TimeTrigger_sequence;
  typedef TimeTrigger_sequence::iterator TimeTrigger_iterator;
  typedef TimeTrigger_sequence::const_iterator TimeTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeTrigger_type, char > TimeTrigger_traits;

  const TimeTrigger_sequence&
  TimeTrigger () const;

  TimeTrigger_sequence&
  TimeTrigger ();

  void
  TimeTrigger (const TimeTrigger_sequence& s);

  // TouchSensor
  // 
  typedef ::TouchSensor TouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< TouchSensor_type > TouchSensor_sequence;
  typedef TouchSensor_sequence::iterator TouchSensor_iterator;
  typedef TouchSensor_sequence::const_iterator TouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TouchSensor_type, char > TouchSensor_traits;

  const TouchSensor_sequence&
  TouchSensor () const;

  TouchSensor_sequence&
  TouchSensor ();

  void
  TouchSensor (const TouchSensor_sequence& s);

  // AudioClip
  // 
  typedef ::AudioClip AudioClip_type;
  typedef ::xsd::cxx::tree::sequence< AudioClip_type > AudioClip_sequence;
  typedef AudioClip_sequence::iterator AudioClip_iterator;
  typedef AudioClip_sequence::const_iterator AudioClip_const_iterator;
  typedef ::xsd::cxx::tree::traits< AudioClip_type, char > AudioClip_traits;

  const AudioClip_sequence&
  AudioClip () const;

  AudioClip_sequence&
  AudioClip ();

  void
  AudioClip (const AudioClip_sequence& s);

  // Billboard
  // 
  typedef ::Billboard Billboard_type;
  typedef ::xsd::cxx::tree::sequence< Billboard_type > Billboard_sequence;
  typedef Billboard_sequence::iterator Billboard_iterator;
  typedef Billboard_sequence::const_iterator Billboard_const_iterator;
  typedef ::xsd::cxx::tree::traits< Billboard_type, char > Billboard_traits;

  const Billboard_sequence&
  Billboard () const;

  Billboard_sequence&
  Billboard ();

  void
  Billboard (const Billboard_sequence& s);

  // Collision
  // 
  typedef ::Collision Collision_type;
  typedef ::xsd::cxx::tree::sequence< Collision_type > Collision_sequence;
  typedef Collision_sequence::iterator Collision_iterator;
  typedef Collision_sequence::const_iterator Collision_const_iterator;
  typedef ::xsd::cxx::tree::traits< Collision_type, char > Collision_traits;

  const Collision_sequence&
  Collision () const;

  Collision_sequence&
  Collision ();

  void
  Collision (const Collision_sequence& s);

  // Fog
  // 
  typedef ::Fog Fog_type;
  typedef ::xsd::cxx::tree::sequence< Fog_type > Fog_sequence;
  typedef Fog_sequence::iterator Fog_iterator;
  typedef Fog_sequence::const_iterator Fog_const_iterator;
  typedef ::xsd::cxx::tree::traits< Fog_type, char > Fog_traits;

  const Fog_sequence&
  Fog () const;

  Fog_sequence&
  Fog ();

  void
  Fog (const Fog_sequence& s);

  // LoadSensor
  // 
  typedef ::LoadSensor LoadSensor_type;
  typedef ::xsd::cxx::tree::sequence< LoadSensor_type > LoadSensor_sequence;
  typedef LoadSensor_sequence::iterator LoadSensor_iterator;
  typedef LoadSensor_sequence::const_iterator LoadSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< LoadSensor_type, char > LoadSensor_traits;

  const LoadSensor_sequence&
  LoadSensor () const;

  LoadSensor_sequence&
  LoadSensor ();

  void
  LoadSensor (const LoadSensor_sequence& s);

  // LocalFog
  // 
  typedef ::LocalFog LocalFog_type;
  typedef ::xsd::cxx::tree::sequence< LocalFog_type > LocalFog_sequence;
  typedef LocalFog_sequence::iterator LocalFog_iterator;
  typedef LocalFog_sequence::const_iterator LocalFog_const_iterator;
  typedef ::xsd::cxx::tree::traits< LocalFog_type, char > LocalFog_traits;

  const LocalFog_sequence&
  LocalFog () const;

  LocalFog_sequence&
  LocalFog ();

  void
  LocalFog (const LocalFog_sequence& s);

  // LOD
  // 
  typedef ::LOD LOD_type;
  typedef ::xsd::cxx::tree::sequence< LOD_type > LOD_sequence;
  typedef LOD_sequence::iterator LOD_iterator;
  typedef LOD_sequence::const_iterator LOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOD_type, char > LOD_traits;

  const LOD_sequence&
  LOD () const;

  LOD_sequence&
  LOD ();

  void
  LOD (const LOD_sequence& s);

  // Script
  // 
  typedef ::Script Script_type;
  typedef ::xsd::cxx::tree::sequence< Script_type > Script_sequence;
  typedef Script_sequence::iterator Script_iterator;
  typedef Script_sequence::const_iterator Script_const_iterator;
  typedef ::xsd::cxx::tree::traits< Script_type, char > Script_traits;

  const Script_sequence&
  Script () const;

  Script_sequence&
  Script ();

  void
  Script (const Script_sequence& s);

  // Sound
  // 
  typedef ::Sound Sound_type;
  typedef ::xsd::cxx::tree::sequence< Sound_type > Sound_sequence;
  typedef Sound_sequence::iterator Sound_iterator;
  typedef Sound_sequence::const_iterator Sound_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sound_type, char > Sound_traits;

  const Sound_sequence&
  Sound () const;

  Sound_sequence&
  Sound ();

  void
  Sound (const Sound_sequence& s);

  // VisibilitySensor
  // 
  typedef ::VisibilitySensor VisibilitySensor_type;
  typedef ::xsd::cxx::tree::sequence< VisibilitySensor_type > VisibilitySensor_sequence;
  typedef VisibilitySensor_sequence::iterator VisibilitySensor_iterator;
  typedef VisibilitySensor_sequence::const_iterator VisibilitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< VisibilitySensor_type, char > VisibilitySensor_traits;

  const VisibilitySensor_sequence&
  VisibilitySensor () const;

  VisibilitySensor_sequence&
  VisibilitySensor ();

  void
  VisibilitySensor (const VisibilitySensor_sequence& s);

  // CoordinateInterpolator2D
  // 
  typedef ::CoordinateInterpolator2D CoordinateInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator2D_type > CoordinateInterpolator2D_sequence;
  typedef CoordinateInterpolator2D_sequence::iterator CoordinateInterpolator2D_iterator;
  typedef CoordinateInterpolator2D_sequence::const_iterator CoordinateInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator2D_type, char > CoordinateInterpolator2D_traits;

  const CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D () const;

  CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D ();

  void
  CoordinateInterpolator2D (const CoordinateInterpolator2D_sequence& s);

  // PositionInterpolator2D
  // 
  typedef ::PositionInterpolator2D PositionInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator2D_type > PositionInterpolator2D_sequence;
  typedef PositionInterpolator2D_sequence::iterator PositionInterpolator2D_iterator;
  typedef PositionInterpolator2D_sequence::const_iterator PositionInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator2D_type, char > PositionInterpolator2D_traits;

  const PositionInterpolator2D_sequence&
  PositionInterpolator2D () const;

  PositionInterpolator2D_sequence&
  PositionInterpolator2D ();

  void
  PositionInterpolator2D (const PositionInterpolator2D_sequence& s);

  // StaticGroup
  // 
  typedef ::StaticGroup StaticGroup_type;
  typedef ::xsd::cxx::tree::sequence< StaticGroup_type > StaticGroup_sequence;
  typedef StaticGroup_sequence::iterator StaticGroup_iterator;
  typedef StaticGroup_sequence::const_iterator StaticGroup_const_iterator;
  typedef ::xsd::cxx::tree::traits< StaticGroup_type, char > StaticGroup_traits;

  const StaticGroup_sequence&
  StaticGroup () const;

  StaticGroup_sequence&
  StaticGroup ();

  void
  StaticGroup (const StaticGroup_sequence& s);

  // CADAssembly
  // 
  typedef ::CADAssembly CADAssembly_type;
  typedef ::xsd::cxx::tree::sequence< CADAssembly_type > CADAssembly_sequence;
  typedef CADAssembly_sequence::iterator CADAssembly_iterator;
  typedef CADAssembly_sequence::const_iterator CADAssembly_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADAssembly_type, char > CADAssembly_traits;

  const CADAssembly_sequence&
  CADAssembly () const;

  CADAssembly_sequence&
  CADAssembly ();

  void
  CADAssembly (const CADAssembly_sequence& s);

  // CADLayer
  // 
  typedef ::CADLayer CADLayer_type;
  typedef ::xsd::cxx::tree::sequence< CADLayer_type > CADLayer_sequence;
  typedef CADLayer_sequence::iterator CADLayer_iterator;
  typedef CADLayer_sequence::const_iterator CADLayer_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADLayer_type, char > CADLayer_traits;

  const CADLayer_sequence&
  CADLayer () const;

  CADLayer_sequence&
  CADLayer ();

  void
  CADLayer (const CADLayer_sequence& s);

  // EspduTransform
  // 
  typedef ::EspduTransform EspduTransform_type;
  typedef ::xsd::cxx::tree::sequence< EspduTransform_type > EspduTransform_sequence;
  typedef EspduTransform_sequence::iterator EspduTransform_iterator;
  typedef EspduTransform_sequence::const_iterator EspduTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< EspduTransform_type, char > EspduTransform_traits;

  const EspduTransform_sequence&
  EspduTransform () const;

  EspduTransform_sequence&
  EspduTransform ();

  void
  EspduTransform (const EspduTransform_sequence& s);

  // ReceiverPdu
  // 
  typedef ::ReceiverPdu ReceiverPdu_type;
  typedef ::xsd::cxx::tree::sequence< ReceiverPdu_type > ReceiverPdu_sequence;
  typedef ReceiverPdu_sequence::iterator ReceiverPdu_iterator;
  typedef ReceiverPdu_sequence::const_iterator ReceiverPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< ReceiverPdu_type, char > ReceiverPdu_traits;

  const ReceiverPdu_sequence&
  ReceiverPdu () const;

  ReceiverPdu_sequence&
  ReceiverPdu ();

  void
  ReceiverPdu (const ReceiverPdu_sequence& s);

  // SignalPdu
  // 
  typedef ::SignalPdu SignalPdu_type;
  typedef ::xsd::cxx::tree::sequence< SignalPdu_type > SignalPdu_sequence;
  typedef SignalPdu_sequence::iterator SignalPdu_iterator;
  typedef SignalPdu_sequence::const_iterator SignalPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< SignalPdu_type, char > SignalPdu_traits;

  const SignalPdu_sequence&
  SignalPdu () const;

  SignalPdu_sequence&
  SignalPdu ();

  void
  SignalPdu (const SignalPdu_sequence& s);

  // TransmitterPdu
  // 
  typedef ::TransmitterPdu TransmitterPdu_type;
  typedef ::xsd::cxx::tree::sequence< TransmitterPdu_type > TransmitterPdu_sequence;
  typedef TransmitterPdu_sequence::iterator TransmitterPdu_iterator;
  typedef TransmitterPdu_sequence::const_iterator TransmitterPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< TransmitterPdu_type, char > TransmitterPdu_traits;

  const TransmitterPdu_sequence&
  TransmitterPdu () const;

  TransmitterPdu_sequence&
  TransmitterPdu ();

  void
  TransmitterPdu (const TransmitterPdu_sequence& s);

  // GeoLocation
  // 
  typedef ::GeoLocation GeoLocation_type;
  typedef ::xsd::cxx::tree::sequence< GeoLocation_type > GeoLocation_sequence;
  typedef GeoLocation_sequence::iterator GeoLocation_iterator;
  typedef GeoLocation_sequence::const_iterator GeoLocation_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLocation_type, char > GeoLocation_traits;

  const GeoLocation_sequence&
  GeoLocation () const;

  GeoLocation_sequence&
  GeoLocation ();

  void
  GeoLocation (const GeoLocation_sequence& s);

  // GeoLOD
  // 
  typedef ::GeoLOD GeoLOD_type;
  typedef ::xsd::cxx::tree::sequence< GeoLOD_type > GeoLOD_sequence;
  typedef GeoLOD_sequence::iterator GeoLOD_iterator;
  typedef GeoLOD_sequence::const_iterator GeoLOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLOD_type, char > GeoLOD_traits;

  const GeoLOD_sequence&
  GeoLOD () const;

  GeoLOD_sequence&
  GeoLOD ();

  void
  GeoLOD (const GeoLOD_sequence& s);

  // GeoMetadata
  // 
  typedef ::GeoMetadata GeoMetadata_type;
  typedef ::xsd::cxx::tree::sequence< GeoMetadata_type > GeoMetadata_sequence;
  typedef GeoMetadata_sequence::iterator GeoMetadata_iterator;
  typedef GeoMetadata_sequence::const_iterator GeoMetadata_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoMetadata_type, char > GeoMetadata_traits;

  const GeoMetadata_sequence&
  GeoMetadata () const;

  GeoMetadata_sequence&
  GeoMetadata ();

  void
  GeoMetadata (const GeoMetadata_sequence& s);

  // GeoOrigin
  // 
  typedef ::GeoOrigin GeoOrigin_type;
  typedef ::xsd::cxx::tree::sequence< GeoOrigin_type > GeoOrigin_sequence;
  typedef GeoOrigin_sequence::iterator GeoOrigin_iterator;
  typedef GeoOrigin_sequence::const_iterator GeoOrigin_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_sequence&
  GeoOrigin () const;

  GeoOrigin_sequence&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_sequence& s);

  // GeoPositionInterpolator
  // 
  typedef ::GeoPositionInterpolator GeoPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< GeoPositionInterpolator_type > GeoPositionInterpolator_sequence;
  typedef GeoPositionInterpolator_sequence::iterator GeoPositionInterpolator_iterator;
  typedef GeoPositionInterpolator_sequence::const_iterator GeoPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoPositionInterpolator_type, char > GeoPositionInterpolator_traits;

  const GeoPositionInterpolator_sequence&
  GeoPositionInterpolator () const;

  GeoPositionInterpolator_sequence&
  GeoPositionInterpolator ();

  void
  GeoPositionInterpolator (const GeoPositionInterpolator_sequence& s);

  // GeoTouchSensor
  // 
  typedef ::GeoTouchSensor GeoTouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< GeoTouchSensor_type > GeoTouchSensor_sequence;
  typedef GeoTouchSensor_sequence::iterator GeoTouchSensor_iterator;
  typedef GeoTouchSensor_sequence::const_iterator GeoTouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoTouchSensor_type, char > GeoTouchSensor_traits;

  const GeoTouchSensor_sequence&
  GeoTouchSensor () const;

  GeoTouchSensor_sequence&
  GeoTouchSensor ();

  void
  GeoTouchSensor (const GeoTouchSensor_sequence& s);

  // GeoViewpoint
  // 
  typedef ::GeoViewpoint GeoViewpoint_type;
  typedef ::xsd::cxx::tree::sequence< GeoViewpoint_type > GeoViewpoint_sequence;
  typedef GeoViewpoint_sequence::iterator GeoViewpoint_iterator;
  typedef GeoViewpoint_sequence::const_iterator GeoViewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoViewpoint_type, char > GeoViewpoint_traits;

  const GeoViewpoint_sequence&
  GeoViewpoint () const;

  GeoViewpoint_sequence&
  GeoViewpoint ();

  void
  GeoViewpoint (const GeoViewpoint_sequence& s);

  // HAnimHumanoid
  // 
  typedef ::HAnimHumanoid HAnimHumanoid_type;
  typedef ::xsd::cxx::tree::sequence< HAnimHumanoid_type > HAnimHumanoid_sequence;
  typedef HAnimHumanoid_sequence::iterator HAnimHumanoid_iterator;
  typedef HAnimHumanoid_sequence::const_iterator HAnimHumanoid_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimHumanoid_type, char > HAnimHumanoid_traits;

  const HAnimHumanoid_sequence&
  HAnimHumanoid () const;

  HAnimHumanoid_sequence&
  HAnimHumanoid ();

  void
  HAnimHumanoid (const HAnimHumanoid_sequence& s);

  // HAnimJoint
  // 
  typedef ::HAnimJoint HAnimJoint_type;
  typedef ::xsd::cxx::tree::sequence< HAnimJoint_type > HAnimJoint_sequence;
  typedef HAnimJoint_sequence::iterator HAnimJoint_iterator;
  typedef HAnimJoint_sequence::const_iterator HAnimJoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimJoint_type, char > HAnimJoint_traits;

  const HAnimJoint_sequence&
  HAnimJoint () const;

  HAnimJoint_sequence&
  HAnimJoint ();

  void
  HAnimJoint (const HAnimJoint_sequence& s);

  // HAnimSegment
  // 
  typedef ::HAnimSegment HAnimSegment_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSegment_type > HAnimSegment_sequence;
  typedef HAnimSegment_sequence::iterator HAnimSegment_iterator;
  typedef HAnimSegment_sequence::const_iterator HAnimSegment_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSegment_type, char > HAnimSegment_traits;

  const HAnimSegment_sequence&
  HAnimSegment () const;

  HAnimSegment_sequence&
  HAnimSegment ();

  void
  HAnimSegment (const HAnimSegment_sequence& s);

  // HAnimSite
  // 
  typedef ::HAnimSite HAnimSite_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSite_type > HAnimSite_sequence;
  typedef HAnimSite_sequence::iterator HAnimSite_iterator;
  typedef HAnimSite_sequence::const_iterator HAnimSite_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSite_type, char > HAnimSite_traits;

  const HAnimSite_sequence&
  HAnimSite () const;

  HAnimSite_sequence&
  HAnimSite ();

  void
  HAnimSite (const HAnimSite_sequence& s);

  // NurbsOrientationInterpolator
  // 
  typedef ::NurbsOrientationInterpolator NurbsOrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsOrientationInterpolator_type > NurbsOrientationInterpolator_sequence;
  typedef NurbsOrientationInterpolator_sequence::iterator NurbsOrientationInterpolator_iterator;
  typedef NurbsOrientationInterpolator_sequence::const_iterator NurbsOrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsOrientationInterpolator_type, char > NurbsOrientationInterpolator_traits;

  const NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator () const;

  NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator ();

  void
  NurbsOrientationInterpolator (const NurbsOrientationInterpolator_sequence& s);

  // NurbsPositionInterpolator
  // 
  typedef ::NurbsPositionInterpolator NurbsPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsPositionInterpolator_type > NurbsPositionInterpolator_sequence;
  typedef NurbsPositionInterpolator_sequence::iterator NurbsPositionInterpolator_iterator;
  typedef NurbsPositionInterpolator_sequence::const_iterator NurbsPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsPositionInterpolator_type, char > NurbsPositionInterpolator_traits;

  const NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator () const;

  NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator ();

  void
  NurbsPositionInterpolator (const NurbsPositionInterpolator_sequence& s);

  // NurbsSurfaceInterpolator
  // 
  typedef ::NurbsSurfaceInterpolator NurbsSurfaceInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSurfaceInterpolator_type > NurbsSurfaceInterpolator_sequence;
  typedef NurbsSurfaceInterpolator_sequence::iterator NurbsSurfaceInterpolator_iterator;
  typedef NurbsSurfaceInterpolator_sequence::const_iterator NurbsSurfaceInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSurfaceInterpolator_type, char > NurbsSurfaceInterpolator_traits;

  const NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator () const;

  NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator ();

  void
  NurbsSurfaceInterpolator (const NurbsSurfaceInterpolator_sequence& s);

  // NurbsSet
  // 
  typedef ::NurbsSet NurbsSet_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSet_type > NurbsSet_sequence;
  typedef NurbsSet_sequence::iterator NurbsSet_iterator;
  typedef NurbsSet_sequence::const_iterator NurbsSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSet_type, char > NurbsSet_traits;

  const NurbsSet_sequence&
  NurbsSet () const;

  NurbsSet_sequence&
  NurbsSet ();

  void
  NurbsSet (const NurbsSet_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // ROUTE
  // 
  typedef ::ROUTE ROUTE_type;
  typedef ::xsd::cxx::tree::sequence< ROUTE_type > ROUTE_sequence;
  typedef ROUTE_sequence::iterator ROUTE_iterator;
  typedef ROUTE_sequence::const_iterator ROUTE_const_iterator;
  typedef ::xsd::cxx::tree::traits< ROUTE_type, char > ROUTE_traits;

  const ROUTE_sequence&
  ROUTE () const;

  ROUTE_sequence&
  ROUTE ();

  void
  ROUTE (const ROUTE_sequence& s);

  // ExternProtoDeclare
  // 
  typedef ::ExternProtoDeclare ExternProtoDeclare_type;
  typedef ::xsd::cxx::tree::sequence< ExternProtoDeclare_type > ExternProtoDeclare_sequence;
  typedef ExternProtoDeclare_sequence::iterator ExternProtoDeclare_iterator;
  typedef ExternProtoDeclare_sequence::const_iterator ExternProtoDeclare_const_iterator;
  typedef ::xsd::cxx::tree::traits< ExternProtoDeclare_type, char > ExternProtoDeclare_traits;

  const ExternProtoDeclare_sequence&
  ExternProtoDeclare () const;

  ExternProtoDeclare_sequence&
  ExternProtoDeclare ();

  void
  ExternProtoDeclare (const ExternProtoDeclare_sequence& s);

  // ProtoDeclare
  // 
  typedef ::ProtoDeclare ProtoDeclare_type;
  typedef ::xsd::cxx::tree::sequence< ProtoDeclare_type > ProtoDeclare_sequence;
  typedef ProtoDeclare_sequence::iterator ProtoDeclare_iterator;
  typedef ProtoDeclare_sequence::const_iterator ProtoDeclare_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoDeclare_type, char > ProtoDeclare_traits;

  const ProtoDeclare_sequence&
  ProtoDeclare () const;

  ProtoDeclare_sequence&
  ProtoDeclare ();

  void
  ProtoDeclare (const ProtoDeclare_sequence& s);

  // IMPORT
  // 
  typedef ::IMPORT IMPORT_type;
  typedef ::xsd::cxx::tree::sequence< IMPORT_type > IMPORT_sequence;
  typedef IMPORT_sequence::iterator IMPORT_iterator;
  typedef IMPORT_sequence::const_iterator IMPORT_const_iterator;
  typedef ::xsd::cxx::tree::traits< IMPORT_type, char > IMPORT_traits;

  const IMPORT_sequence&
  IMPORT () const;

  IMPORT_sequence&
  IMPORT ();

  void
  IMPORT (const IMPORT_sequence& s);

  // EXPORT
  // 
  typedef ::EXPORT EXPORT_type;
  typedef ::xsd::cxx::tree::sequence< EXPORT_type > EXPORT_sequence;
  typedef EXPORT_sequence::iterator EXPORT_iterator;
  typedef EXPORT_sequence::const_iterator EXPORT_const_iterator;
  typedef ::xsd::cxx::tree::traits< EXPORT_type, char > EXPORT_traits;

  const EXPORT_sequence&
  EXPORT () const;

  EXPORT_sequence&
  EXPORT ();

  void
  EXPORT (const EXPORT_sequence& s);

  // Constructors.
  //
  Scene ();

  Scene (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Scene (const Scene& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Scene*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Scene ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  MetadataDouble_sequence MetadataDouble_;
  MetadataFloat_sequence MetadataFloat_;
  MetadataInteger_sequence MetadataInteger_;
  MetadataSet_sequence MetadataSet_;
  MetadataString_sequence MetadataString_;
  Appearance_sequence Appearance_;
  Background_sequence Background_;
  ColorInterpolator_sequence ColorInterpolator_;
  CoordinateInterpolator_sequence CoordinateInterpolator_;
  DirectionalLight_sequence DirectionalLight_;
  Group_sequence Group_;
  NavigationInfo_sequence NavigationInfo_;
  NormalInterpolator_sequence NormalInterpolator_;
  OrientationInterpolator_sequence OrientationInterpolator_;
  PositionInterpolator_sequence PositionInterpolator_;
  ScalarInterpolator_sequence ScalarInterpolator_;
  Shape_sequence Shape_;
  TimeSensor_sequence TimeSensor_;
  Transform_sequence Transform_;
  Viewpoint_sequence Viewpoint_;
  WorldInfo_sequence WorldInfo_;
  Anchor_sequence Anchor_;
  BooleanFilter_sequence BooleanFilter_;
  BooleanSequencer_sequence BooleanSequencer_;
  BooleanToggle_sequence BooleanToggle_;
  BooleanTrigger_sequence BooleanTrigger_;
  CylinderSensor_sequence CylinderSensor_;
  Inline_sequence Inline_;
  IntegerSequencer_sequence IntegerSequencer_;
  IntegerTrigger_sequence IntegerTrigger_;
  KeySensor_sequence KeySensor_;
  PlaneSensor_sequence PlaneSensor_;
  PointLight_sequence PointLight_;
  ProximitySensor_sequence ProximitySensor_;
  SphereSensor_sequence SphereSensor_;
  SpotLight_sequence SpotLight_;
  StringSensor_sequence StringSensor_;
  Switch_sequence Switch_;
  TimeTrigger_sequence TimeTrigger_;
  TouchSensor_sequence TouchSensor_;
  AudioClip_sequence AudioClip_;
  Billboard_sequence Billboard_;
  Collision_sequence Collision_;
  Fog_sequence Fog_;
  LoadSensor_sequence LoadSensor_;
  LocalFog_sequence LocalFog_;
  LOD_sequence LOD_;
  Script_sequence Script_;
  Sound_sequence Sound_;
  VisibilitySensor_sequence VisibilitySensor_;
  CoordinateInterpolator2D_sequence CoordinateInterpolator2D_;
  PositionInterpolator2D_sequence PositionInterpolator2D_;
  StaticGroup_sequence StaticGroup_;
  CADAssembly_sequence CADAssembly_;
  CADLayer_sequence CADLayer_;
  EspduTransform_sequence EspduTransform_;
  ReceiverPdu_sequence ReceiverPdu_;
  SignalPdu_sequence SignalPdu_;
  TransmitterPdu_sequence TransmitterPdu_;
  GeoLocation_sequence GeoLocation_;
  GeoLOD_sequence GeoLOD_;
  GeoMetadata_sequence GeoMetadata_;
  GeoOrigin_sequence GeoOrigin_;
  GeoPositionInterpolator_sequence GeoPositionInterpolator_;
  GeoTouchSensor_sequence GeoTouchSensor_;
  GeoViewpoint_sequence GeoViewpoint_;
  HAnimHumanoid_sequence HAnimHumanoid_;
  HAnimJoint_sequence HAnimJoint_;
  HAnimSegment_sequence HAnimSegment_;
  HAnimSite_sequence HAnimSite_;
  NurbsOrientationInterpolator_sequence NurbsOrientationInterpolator_;
  NurbsPositionInterpolator_sequence NurbsPositionInterpolator_;
  NurbsSurfaceInterpolator_sequence NurbsSurfaceInterpolator_;
  NurbsSet_sequence NurbsSet_;
  ProtoInstance_sequence ProtoInstance_;
  ROUTE_sequence ROUTE_;
  ExternProtoDeclare_sequence ExternProtoDeclare_;
  ProtoDeclare_sequence ProtoDeclare_;
  IMPORT_sequence IMPORT_;
  EXPORT_sequence EXPORT_;
};

class X3D: public ::SceneGraphStructureNodeType
{
  public:
  // head
  // 
  typedef ::head head_type;
  typedef ::xsd::cxx::tree::optional< head_type > head_optional;
  typedef ::xsd::cxx::tree::traits< head_type, char > head_traits;

  const head_optional&
  head () const;

  head_optional&
  head ();

  void
  head (const head_type& x);

  void
  head (const head_optional& x);

  void
  head (::std::auto_ptr< head_type > p);

  // Scene
  // 
  typedef ::Scene Scene_type;
  typedef ::xsd::cxx::tree::traits< Scene_type, char > Scene_traits;

  const Scene_type&
  Scene () const;

  Scene_type&
  Scene ();

  void
  Scene (const Scene_type& x);

  void
  Scene (::std::auto_ptr< Scene_type > p);

  // version
  // 
  typedef ::x3dVersion version_type;
  typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

  const version_type&
  version () const;

  version_type&
  version ();

  void
  version (const version_type& x);

  void
  version (::std::auto_ptr< version_type > p);

  // profile
  // 
  typedef ::profileNames profile_type;
  typedef ::xsd::cxx::tree::traits< profile_type, char > profile_traits;

  const profile_type&
  profile () const;

  profile_type&
  profile ();

  void
  profile (const profile_type& x);

  void
  profile (::std::auto_ptr< profile_type > p);

  // Constructors.
  //
  X3D (const Scene_type&,
       const version_type&,
       const profile_type&);

  X3D (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  X3D (const X3D& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual X3D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~X3D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  head_optional head_;
  ::xsd::cxx::tree::one< Scene_type > Scene_;
  ::xsd::cxx::tree::one< version_type > version_;
  ::xsd::cxx::tree::one< profile_type > profile_;
};

class EspduTransform: public ::X3DGroupingNode
{
  public:
  // enabled
  // 
  typedef ::SFBool enabled_type;
  typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

  const enabled_type&
  enabled () const;

  enabled_type&
  enabled ();

  void
  enabled (const enabled_type& x);

  void
  enabled (::std::auto_ptr< enabled_type > p);

  static const enabled_type&
  enabled_default_value ();

  // marking
  // 
  typedef ::SFString marking_type;
  typedef ::xsd::cxx::tree::optional< marking_type > marking_optional;
  typedef ::xsd::cxx::tree::traits< marking_type, char > marking_traits;

  const marking_optional&
  marking () const;

  marking_optional&
  marking ();

  void
  marking (const marking_type& x);

  void
  marking (const marking_optional& x);

  void
  marking (::std::auto_ptr< marking_type > p);

  // siteID
  // 
  typedef ::SFInt32 siteID_type;
  typedef ::xsd::cxx::tree::traits< siteID_type, char > siteID_traits;

  const siteID_type&
  siteID () const;

  siteID_type&
  siteID ();

  void
  siteID (const siteID_type& x);

  void
  siteID (::std::auto_ptr< siteID_type > p);

  static const siteID_type&
  siteID_default_value ();

  // applicationID
  // 
  typedef ::SFInt32 applicationID_type;
  typedef ::xsd::cxx::tree::traits< applicationID_type, char > applicationID_traits;

  const applicationID_type&
  applicationID () const;

  applicationID_type&
  applicationID ();

  void
  applicationID (const applicationID_type& x);

  void
  applicationID (::std::auto_ptr< applicationID_type > p);

  static const applicationID_type&
  applicationID_default_value ();

  // entityID
  // 
  typedef ::SFInt32 entityID_type;
  typedef ::xsd::cxx::tree::traits< entityID_type, char > entityID_traits;

  const entityID_type&
  entityID () const;

  entityID_type&
  entityID ();

  void
  entityID (const entityID_type& x);

  void
  entityID (::std::auto_ptr< entityID_type > p);

  static const entityID_type&
  entityID_default_value ();

  // forceID
  // 
  typedef ::SFInt32 forceID_type;
  typedef ::xsd::cxx::tree::traits< forceID_type, char > forceID_traits;

  const forceID_type&
  forceID () const;

  forceID_type&
  forceID ();

  void
  forceID (const forceID_type& x);

  void
  forceID (::std::auto_ptr< forceID_type > p);

  static const forceID_type&
  forceID_default_value ();

  // entityKind
  // 
  typedef ::SFInt32 entityKind_type;
  typedef ::xsd::cxx::tree::traits< entityKind_type, char > entityKind_traits;

  const entityKind_type&
  entityKind () const;

  entityKind_type&
  entityKind ();

  void
  entityKind (const entityKind_type& x);

  void
  entityKind (::std::auto_ptr< entityKind_type > p);

  static const entityKind_type&
  entityKind_default_value ();

  // entityDomain
  // 
  typedef ::SFInt32 entityDomain_type;
  typedef ::xsd::cxx::tree::traits< entityDomain_type, char > entityDomain_traits;

  const entityDomain_type&
  entityDomain () const;

  entityDomain_type&
  entityDomain ();

  void
  entityDomain (const entityDomain_type& x);

  void
  entityDomain (::std::auto_ptr< entityDomain_type > p);

  static const entityDomain_type&
  entityDomain_default_value ();

  // entityCountry
  // 
  typedef ::SFInt32 entityCountry_type;
  typedef ::xsd::cxx::tree::traits< entityCountry_type, char > entityCountry_traits;

  const entityCountry_type&
  entityCountry () const;

  entityCountry_type&
  entityCountry ();

  void
  entityCountry (const entityCountry_type& x);

  void
  entityCountry (::std::auto_ptr< entityCountry_type > p);

  static const entityCountry_type&
  entityCountry_default_value ();

  // entityCategory
  // 
  typedef ::SFInt32 entityCategory_type;
  typedef ::xsd::cxx::tree::traits< entityCategory_type, char > entityCategory_traits;

  const entityCategory_type&
  entityCategory () const;

  entityCategory_type&
  entityCategory ();

  void
  entityCategory (const entityCategory_type& x);

  void
  entityCategory (::std::auto_ptr< entityCategory_type > p);

  static const entityCategory_type&
  entityCategory_default_value ();

  // entitySubCategory
  // 
  typedef ::SFInt32 entitySubCategory_type;
  typedef ::xsd::cxx::tree::traits< entitySubCategory_type, char > entitySubCategory_traits;

  const entitySubCategory_type&
  entitySubCategory () const;

  entitySubCategory_type&
  entitySubCategory ();

  void
  entitySubCategory (const entitySubCategory_type& x);

  void
  entitySubCategory (::std::auto_ptr< entitySubCategory_type > p);

  static const entitySubCategory_type&
  entitySubCategory_default_value ();

  // entitySpecific
  // 
  typedef ::SFInt32 entitySpecific_type;
  typedef ::xsd::cxx::tree::traits< entitySpecific_type, char > entitySpecific_traits;

  const entitySpecific_type&
  entitySpecific () const;

  entitySpecific_type&
  entitySpecific ();

  void
  entitySpecific (const entitySpecific_type& x);

  void
  entitySpecific (::std::auto_ptr< entitySpecific_type > p);

  static const entitySpecific_type&
  entitySpecific_default_value ();

  // entityExtra
  // 
  typedef ::SFInt32 entityExtra_type;
  typedef ::xsd::cxx::tree::traits< entityExtra_type, char > entityExtra_traits;

  const entityExtra_type&
  entityExtra () const;

  entityExtra_type&
  entityExtra ();

  void
  entityExtra (const entityExtra_type& x);

  void
  entityExtra (::std::auto_ptr< entityExtra_type > p);

  static const entityExtra_type&
  entityExtra_default_value ();

  // readInterval
  // 
  typedef ::SFTime readInterval_type;
  typedef ::xsd::cxx::tree::traits< readInterval_type, char > readInterval_traits;

  const readInterval_type&
  readInterval () const;

  readInterval_type&
  readInterval ();

  void
  readInterval (const readInterval_type& x);

  void
  readInterval (::std::auto_ptr< readInterval_type > p);

  static const readInterval_type&
  readInterval_default_value ();

  // writeInterval
  // 
  typedef ::SFTime writeInterval_type;
  typedef ::xsd::cxx::tree::traits< writeInterval_type, char > writeInterval_traits;

  const writeInterval_type&
  writeInterval () const;

  writeInterval_type&
  writeInterval ();

  void
  writeInterval (const writeInterval_type& x);

  void
  writeInterval (::std::auto_ptr< writeInterval_type > p);

  static const writeInterval_type&
  writeInterval_default_value ();

  // networkMode
  // 
  typedef ::networkModeValues networkMode_type;
  typedef ::xsd::cxx::tree::traits< networkMode_type, char > networkMode_traits;

  const networkMode_type&
  networkMode () const;

  networkMode_type&
  networkMode ();

  void
  networkMode (const networkMode_type& x);

  void
  networkMode (::std::auto_ptr< networkMode_type > p);

  static const networkMode_type&
  networkMode_default_value ();

  // translation
  // 
  typedef ::SFVec3f translation_type;
  typedef ::xsd::cxx::tree::traits< translation_type, char > translation_traits;

  const translation_type&
  translation () const;

  translation_type&
  translation ();

  void
  translation (const translation_type& x);

  void
  translation (::std::auto_ptr< translation_type > p);

  static const translation_type&
  translation_default_value ();

  // rotation
  // 
  typedef ::SFRotation rotation_type;
  typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

  const rotation_type&
  rotation () const;

  rotation_type&
  rotation ();

  void
  rotation (const rotation_type& x);

  void
  rotation (::std::auto_ptr< rotation_type > p);

  static const rotation_type&
  rotation_default_value ();

  // scale
  // 
  typedef ::SFVec3f scale_type;
  typedef ::xsd::cxx::tree::traits< scale_type, char > scale_traits;

  const scale_type&
  scale () const;

  scale_type&
  scale ();

  void
  scale (const scale_type& x);

  void
  scale (::std::auto_ptr< scale_type > p);

  static const scale_type&
  scale_default_value ();

  // scaleOrientation
  // 
  typedef ::SFRotation scaleOrientation_type;
  typedef ::xsd::cxx::tree::traits< scaleOrientation_type, char > scaleOrientation_traits;

  const scaleOrientation_type&
  scaleOrientation () const;

  scaleOrientation_type&
  scaleOrientation ();

  void
  scaleOrientation (const scaleOrientation_type& x);

  void
  scaleOrientation (::std::auto_ptr< scaleOrientation_type > p);

  static const scaleOrientation_type&
  scaleOrientation_default_value ();

  // center
  // 
  typedef ::SFVec3f center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::auto_ptr< center_type > p);

  static const center_type&
  center_default_value ();

  // address
  // 
  typedef ::SFString address_type;
  typedef ::xsd::cxx::tree::traits< address_type, char > address_traits;

  const address_type&
  address () const;

  address_type&
  address ();

  void
  address (const address_type& x);

  void
  address (::std::auto_ptr< address_type > p);

  static const address_type&
  address_default_value ();

  // port
  // 
  typedef ::SFInt32 port_type;
  typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

  const port_type&
  port () const;

  port_type&
  port ();

  void
  port (const port_type& x);

  void
  port (::std::auto_ptr< port_type > p);

  static const port_type&
  port_default_value ();

  // multicastRelayHost
  // 
  typedef ::SFString multicastRelayHost_type;
  typedef ::xsd::cxx::tree::optional< multicastRelayHost_type > multicastRelayHost_optional;
  typedef ::xsd::cxx::tree::traits< multicastRelayHost_type, char > multicastRelayHost_traits;

  const multicastRelayHost_optional&
  multicastRelayHost () const;

  multicastRelayHost_optional&
  multicastRelayHost ();

  void
  multicastRelayHost (const multicastRelayHost_type& x);

  void
  multicastRelayHost (const multicastRelayHost_optional& x);

  void
  multicastRelayHost (::std::auto_ptr< multicastRelayHost_type > p);

  // multicastRelayPort
  // 
  typedef ::SFInt32 multicastRelayPort_type;
  typedef ::xsd::cxx::tree::traits< multicastRelayPort_type, char > multicastRelayPort_traits;

  const multicastRelayPort_type&
  multicastRelayPort () const;

  multicastRelayPort_type&
  multicastRelayPort ();

  void
  multicastRelayPort (const multicastRelayPort_type& x);

  void
  multicastRelayPort (::std::auto_ptr< multicastRelayPort_type > p);

  static const multicastRelayPort_type&
  multicastRelayPort_default_value ();

  // rtpHeaderExpected
  // 
  typedef ::SFBool rtpHeaderExpected_type;
  typedef ::xsd::cxx::tree::traits< rtpHeaderExpected_type, char > rtpHeaderExpected_traits;

  const rtpHeaderExpected_type&
  rtpHeaderExpected () const;

  rtpHeaderExpected_type&
  rtpHeaderExpected ();

  void
  rtpHeaderExpected (const rtpHeaderExpected_type& x);

  void
  rtpHeaderExpected (::std::auto_ptr< rtpHeaderExpected_type > p);

  static const rtpHeaderExpected_type&
  rtpHeaderExpected_default_value ();

  // deadReckoning
  // 
  typedef ::SFInt32 deadReckoning_type;
  typedef ::xsd::cxx::tree::traits< deadReckoning_type, char > deadReckoning_traits;

  const deadReckoning_type&
  deadReckoning () const;

  deadReckoning_type&
  deadReckoning ();

  void
  deadReckoning (const deadReckoning_type& x);

  void
  deadReckoning (::std::auto_ptr< deadReckoning_type > p);

  static const deadReckoning_type&
  deadReckoning_default_value ();

  // linearVelocity
  // 
  typedef ::SFVec3f linearVelocity_type;
  typedef ::xsd::cxx::tree::traits< linearVelocity_type, char > linearVelocity_traits;

  const linearVelocity_type&
  linearVelocity () const;

  linearVelocity_type&
  linearVelocity ();

  void
  linearVelocity (const linearVelocity_type& x);

  void
  linearVelocity (::std::auto_ptr< linearVelocity_type > p);

  static const linearVelocity_type&
  linearVelocity_default_value ();

  // linearAcceleration
  // 
  typedef ::SFVec3f linearAcceleration_type;
  typedef ::xsd::cxx::tree::traits< linearAcceleration_type, char > linearAcceleration_traits;

  const linearAcceleration_type&
  linearAcceleration () const;

  linearAcceleration_type&
  linearAcceleration ();

  void
  linearAcceleration (const linearAcceleration_type& x);

  void
  linearAcceleration (::std::auto_ptr< linearAcceleration_type > p);

  static const linearAcceleration_type&
  linearAcceleration_default_value ();

  // fired1
  // 
  typedef ::SFBool fired1_type;
  typedef ::xsd::cxx::tree::traits< fired1_type, char > fired1_traits;

  const fired1_type&
  fired1 () const;

  fired1_type&
  fired1 ();

  void
  fired1 (const fired1_type& x);

  void
  fired1 (::std::auto_ptr< fired1_type > p);

  static const fired1_type&
  fired1_default_value ();

  // fired2
  // 
  typedef ::SFBool fired2_type;
  typedef ::xsd::cxx::tree::traits< fired2_type, char > fired2_traits;

  const fired2_type&
  fired2 () const;

  fired2_type&
  fired2 ();

  void
  fired2 (const fired2_type& x);

  void
  fired2 (::std::auto_ptr< fired2_type > p);

  static const fired2_type&
  fired2_default_value ();

  // collisionType
  // 
  typedef ::SFInt32 collisionType_type;
  typedef ::xsd::cxx::tree::traits< collisionType_type, char > collisionType_traits;

  const collisionType_type&
  collisionType () const;

  collisionType_type&
  collisionType ();

  void
  collisionType (const collisionType_type& x);

  void
  collisionType (::std::auto_ptr< collisionType_type > p);

  static const collisionType_type&
  collisionType_default_value ();

  // detonationLocation
  // 
  typedef ::SFVec3f detonationLocation_type;
  typedef ::xsd::cxx::tree::traits< detonationLocation_type, char > detonationLocation_traits;

  const detonationLocation_type&
  detonationLocation () const;

  detonationLocation_type&
  detonationLocation ();

  void
  detonationLocation (const detonationLocation_type& x);

  void
  detonationLocation (::std::auto_ptr< detonationLocation_type > p);

  static const detonationLocation_type&
  detonationLocation_default_value ();

  // detonationRelativeLocation
  // 
  typedef ::SFVec3f detonationRelativeLocation_type;
  typedef ::xsd::cxx::tree::traits< detonationRelativeLocation_type, char > detonationRelativeLocation_traits;

  const detonationRelativeLocation_type&
  detonationRelativeLocation () const;

  detonationRelativeLocation_type&
  detonationRelativeLocation ();

  void
  detonationRelativeLocation (const detonationRelativeLocation_type& x);

  void
  detonationRelativeLocation (::std::auto_ptr< detonationRelativeLocation_type > p);

  static const detonationRelativeLocation_type&
  detonationRelativeLocation_default_value ();

  // detonationResult
  // 
  typedef ::SFInt32 detonationResult_type;
  typedef ::xsd::cxx::tree::traits< detonationResult_type, char > detonationResult_traits;

  const detonationResult_type&
  detonationResult () const;

  detonationResult_type&
  detonationResult ();

  void
  detonationResult (const detonationResult_type& x);

  void
  detonationResult (::std::auto_ptr< detonationResult_type > p);

  static const detonationResult_type&
  detonationResult_default_value ();

  // eventApplicationID
  // 
  typedef ::SFInt32 eventApplicationID_type;
  typedef ::xsd::cxx::tree::traits< eventApplicationID_type, char > eventApplicationID_traits;

  const eventApplicationID_type&
  eventApplicationID () const;

  eventApplicationID_type&
  eventApplicationID ();

  void
  eventApplicationID (const eventApplicationID_type& x);

  void
  eventApplicationID (::std::auto_ptr< eventApplicationID_type > p);

  static const eventApplicationID_type&
  eventApplicationID_default_value ();

  // eventEntityID
  // 
  typedef ::SFInt32 eventEntityID_type;
  typedef ::xsd::cxx::tree::traits< eventEntityID_type, char > eventEntityID_traits;

  const eventEntityID_type&
  eventEntityID () const;

  eventEntityID_type&
  eventEntityID ();

  void
  eventEntityID (const eventEntityID_type& x);

  void
  eventEntityID (::std::auto_ptr< eventEntityID_type > p);

  static const eventEntityID_type&
  eventEntityID_default_value ();

  // eventNumber
  // 
  typedef ::SFInt32 eventNumber_type;
  typedef ::xsd::cxx::tree::traits< eventNumber_type, char > eventNumber_traits;

  const eventNumber_type&
  eventNumber () const;

  eventNumber_type&
  eventNumber ();

  void
  eventNumber (const eventNumber_type& x);

  void
  eventNumber (::std::auto_ptr< eventNumber_type > p);

  static const eventNumber_type&
  eventNumber_default_value ();

  // eventSiteID
  // 
  typedef ::SFInt32 eventSiteID_type;
  typedef ::xsd::cxx::tree::traits< eventSiteID_type, char > eventSiteID_traits;

  const eventSiteID_type&
  eventSiteID () const;

  eventSiteID_type&
  eventSiteID ();

  void
  eventSiteID (const eventSiteID_type& x);

  void
  eventSiteID (::std::auto_ptr< eventSiteID_type > p);

  static const eventSiteID_type&
  eventSiteID_default_value ();

  // munitionStartPoint
  // 
  typedef ::SFVec3f munitionStartPoint_type;
  typedef ::xsd::cxx::tree::traits< munitionStartPoint_type, char > munitionStartPoint_traits;

  const munitionStartPoint_type&
  munitionStartPoint () const;

  munitionStartPoint_type&
  munitionStartPoint ();

  void
  munitionStartPoint (const munitionStartPoint_type& x);

  void
  munitionStartPoint (::std::auto_ptr< munitionStartPoint_type > p);

  static const munitionStartPoint_type&
  munitionStartPoint_default_value ();

  // munitionEndPoint
  // 
  typedef ::SFVec3f munitionEndPoint_type;
  typedef ::xsd::cxx::tree::traits< munitionEndPoint_type, char > munitionEndPoint_traits;

  const munitionEndPoint_type&
  munitionEndPoint () const;

  munitionEndPoint_type&
  munitionEndPoint ();

  void
  munitionEndPoint (const munitionEndPoint_type& x);

  void
  munitionEndPoint (::std::auto_ptr< munitionEndPoint_type > p);

  static const munitionEndPoint_type&
  munitionEndPoint_default_value ();

  // munitionSiteID
  // 
  typedef ::SFInt32 munitionSiteID_type;
  typedef ::xsd::cxx::tree::traits< munitionSiteID_type, char > munitionSiteID_traits;

  const munitionSiteID_type&
  munitionSiteID () const;

  munitionSiteID_type&
  munitionSiteID ();

  void
  munitionSiteID (const munitionSiteID_type& x);

  void
  munitionSiteID (::std::auto_ptr< munitionSiteID_type > p);

  static const munitionSiteID_type&
  munitionSiteID_default_value ();

  // munitionApplicationID
  // 
  typedef ::SFInt32 munitionApplicationID_type;
  typedef ::xsd::cxx::tree::traits< munitionApplicationID_type, char > munitionApplicationID_traits;

  const munitionApplicationID_type&
  munitionApplicationID () const;

  munitionApplicationID_type&
  munitionApplicationID ();

  void
  munitionApplicationID (const munitionApplicationID_type& x);

  void
  munitionApplicationID (::std::auto_ptr< munitionApplicationID_type > p);

  static const munitionApplicationID_type&
  munitionApplicationID_default_value ();

  // munitionEntityID
  // 
  typedef ::SFInt32 munitionEntityID_type;
  typedef ::xsd::cxx::tree::traits< munitionEntityID_type, char > munitionEntityID_traits;

  const munitionEntityID_type&
  munitionEntityID () const;

  munitionEntityID_type&
  munitionEntityID ();

  void
  munitionEntityID (const munitionEntityID_type& x);

  void
  munitionEntityID (::std::auto_ptr< munitionEntityID_type > p);

  static const munitionEntityID_type&
  munitionEntityID_default_value ();

  // fireMissionIndex
  // 
  typedef ::SFInt32 fireMissionIndex_type;
  typedef ::xsd::cxx::tree::traits< fireMissionIndex_type, char > fireMissionIndex_traits;

  const fireMissionIndex_type&
  fireMissionIndex () const;

  fireMissionIndex_type&
  fireMissionIndex ();

  void
  fireMissionIndex (const fireMissionIndex_type& x);

  void
  fireMissionIndex (::std::auto_ptr< fireMissionIndex_type > p);

  static const fireMissionIndex_type&
  fireMissionIndex_default_value ();

  // warhead
  // 
  typedef ::SFInt32 warhead_type;
  typedef ::xsd::cxx::tree::traits< warhead_type, char > warhead_traits;

  const warhead_type&
  warhead () const;

  warhead_type&
  warhead ();

  void
  warhead (const warhead_type& x);

  void
  warhead (::std::auto_ptr< warhead_type > p);

  static const warhead_type&
  warhead_default_value ();

  // fuse
  // 
  typedef ::SFInt32 fuse_type;
  typedef ::xsd::cxx::tree::traits< fuse_type, char > fuse_traits;

  const fuse_type&
  fuse () const;

  fuse_type&
  fuse ();

  void
  fuse (const fuse_type& x);

  void
  fuse (::std::auto_ptr< fuse_type > p);

  static const fuse_type&
  fuse_default_value ();

  // munitionQuantity
  // 
  typedef ::SFInt32 munitionQuantity_type;
  typedef ::xsd::cxx::tree::traits< munitionQuantity_type, char > munitionQuantity_traits;

  const munitionQuantity_type&
  munitionQuantity () const;

  munitionQuantity_type&
  munitionQuantity ();

  void
  munitionQuantity (const munitionQuantity_type& x);

  void
  munitionQuantity (::std::auto_ptr< munitionQuantity_type > p);

  static const munitionQuantity_type&
  munitionQuantity_default_value ();

  // firingRate
  // 
  typedef ::SFInt32 firingRate_type;
  typedef ::xsd::cxx::tree::traits< firingRate_type, char > firingRate_traits;

  const firingRate_type&
  firingRate () const;

  firingRate_type&
  firingRate ();

  void
  firingRate (const firingRate_type& x);

  void
  firingRate (::std::auto_ptr< firingRate_type > p);

  static const firingRate_type&
  firingRate_default_value ();

  // firingRange
  // 
  typedef ::SFFloat firingRange_type;
  typedef ::xsd::cxx::tree::traits< firingRange_type, char > firingRange_traits;

  const firingRange_type&
  firingRange () const;

  firingRange_type&
  firingRange ();

  void
  firingRange (const firingRange_type& x);

  void
  firingRange (::std::auto_ptr< firingRange_type > p);

  static const firingRange_type&
  firingRange_default_value ();

  // articulationParameterCount
  // 
  typedef ::SFInt32 articulationParameterCount_type;
  typedef ::xsd::cxx::tree::traits< articulationParameterCount_type, char > articulationParameterCount_traits;

  const articulationParameterCount_type&
  articulationParameterCount () const;

  articulationParameterCount_type&
  articulationParameterCount ();

  void
  articulationParameterCount (const articulationParameterCount_type& x);

  void
  articulationParameterCount (::std::auto_ptr< articulationParameterCount_type > p);

  static const articulationParameterCount_type&
  articulationParameterCount_default_value ();

  // articulationParameterDesignatorArray
  // 
  typedef ::MFInt32 articulationParameterDesignatorArray_type;
  typedef ::xsd::cxx::tree::optional< articulationParameterDesignatorArray_type > articulationParameterDesignatorArray_optional;
  typedef ::xsd::cxx::tree::traits< articulationParameterDesignatorArray_type, char > articulationParameterDesignatorArray_traits;

  const articulationParameterDesignatorArray_optional&
  articulationParameterDesignatorArray () const;

  articulationParameterDesignatorArray_optional&
  articulationParameterDesignatorArray ();

  void
  articulationParameterDesignatorArray (const articulationParameterDesignatorArray_type& x);

  void
  articulationParameterDesignatorArray (const articulationParameterDesignatorArray_optional& x);

  void
  articulationParameterDesignatorArray (::std::auto_ptr< articulationParameterDesignatorArray_type > p);

  // articulationParameterChangeIndicatorArray
  // 
  typedef ::MFInt32 articulationParameterChangeIndicatorArray_type;
  typedef ::xsd::cxx::tree::optional< articulationParameterChangeIndicatorArray_type > articulationParameterChangeIndicatorArray_optional;
  typedef ::xsd::cxx::tree::traits< articulationParameterChangeIndicatorArray_type, char > articulationParameterChangeIndicatorArray_traits;

  const articulationParameterChangeIndicatorArray_optional&
  articulationParameterChangeIndicatorArray () const;

  articulationParameterChangeIndicatorArray_optional&
  articulationParameterChangeIndicatorArray ();

  void
  articulationParameterChangeIndicatorArray (const articulationParameterChangeIndicatorArray_type& x);

  void
  articulationParameterChangeIndicatorArray (const articulationParameterChangeIndicatorArray_optional& x);

  void
  articulationParameterChangeIndicatorArray (::std::auto_ptr< articulationParameterChangeIndicatorArray_type > p);

  // articulationParameterIdPartAttachedToArray
  // 
  typedef ::MFInt32 articulationParameterIdPartAttachedToArray_type;
  typedef ::xsd::cxx::tree::optional< articulationParameterIdPartAttachedToArray_type > articulationParameterIdPartAttachedToArray_optional;
  typedef ::xsd::cxx::tree::traits< articulationParameterIdPartAttachedToArray_type, char > articulationParameterIdPartAttachedToArray_traits;

  const articulationParameterIdPartAttachedToArray_optional&
  articulationParameterIdPartAttachedToArray () const;

  articulationParameterIdPartAttachedToArray_optional&
  articulationParameterIdPartAttachedToArray ();

  void
  articulationParameterIdPartAttachedToArray (const articulationParameterIdPartAttachedToArray_type& x);

  void
  articulationParameterIdPartAttachedToArray (const articulationParameterIdPartAttachedToArray_optional& x);

  void
  articulationParameterIdPartAttachedToArray (::std::auto_ptr< articulationParameterIdPartAttachedToArray_type > p);

  // articulationParameterTypeArray
  // 
  typedef ::MFInt32 articulationParameterTypeArray_type;
  typedef ::xsd::cxx::tree::optional< articulationParameterTypeArray_type > articulationParameterTypeArray_optional;
  typedef ::xsd::cxx::tree::traits< articulationParameterTypeArray_type, char > articulationParameterTypeArray_traits;

  const articulationParameterTypeArray_optional&
  articulationParameterTypeArray () const;

  articulationParameterTypeArray_optional&
  articulationParameterTypeArray ();

  void
  articulationParameterTypeArray (const articulationParameterTypeArray_type& x);

  void
  articulationParameterTypeArray (const articulationParameterTypeArray_optional& x);

  void
  articulationParameterTypeArray (::std::auto_ptr< articulationParameterTypeArray_type > p);

  // articulationParameterArray
  // 
  typedef ::MFFloat articulationParameterArray_type;
  typedef ::xsd::cxx::tree::optional< articulationParameterArray_type > articulationParameterArray_optional;
  typedef ::xsd::cxx::tree::traits< articulationParameterArray_type, char > articulationParameterArray_traits;

  const articulationParameterArray_optional&
  articulationParameterArray () const;

  articulationParameterArray_optional&
  articulationParameterArray ();

  void
  articulationParameterArray (const articulationParameterArray_type& x);

  void
  articulationParameterArray (const articulationParameterArray_optional& x);

  void
  articulationParameterArray (::std::auto_ptr< articulationParameterArray_type > p);

  // Constructors.
  //
  EspduTransform ();

  EspduTransform (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  EspduTransform (const EspduTransform& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual EspduTransform*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~EspduTransform ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< enabled_type > enabled_;
  static const enabled_type enabled_default_value_;
  marking_optional marking_;
  ::xsd::cxx::tree::one< siteID_type > siteID_;
  static const siteID_type siteID_default_value_;
  ::xsd::cxx::tree::one< applicationID_type > applicationID_;
  static const applicationID_type applicationID_default_value_;
  ::xsd::cxx::tree::one< entityID_type > entityID_;
  static const entityID_type entityID_default_value_;
  ::xsd::cxx::tree::one< forceID_type > forceID_;
  static const forceID_type forceID_default_value_;
  ::xsd::cxx::tree::one< entityKind_type > entityKind_;
  static const entityKind_type entityKind_default_value_;
  ::xsd::cxx::tree::one< entityDomain_type > entityDomain_;
  static const entityDomain_type entityDomain_default_value_;
  ::xsd::cxx::tree::one< entityCountry_type > entityCountry_;
  static const entityCountry_type entityCountry_default_value_;
  ::xsd::cxx::tree::one< entityCategory_type > entityCategory_;
  static const entityCategory_type entityCategory_default_value_;
  ::xsd::cxx::tree::one< entitySubCategory_type > entitySubCategory_;
  static const entitySubCategory_type entitySubCategory_default_value_;
  ::xsd::cxx::tree::one< entitySpecific_type > entitySpecific_;
  static const entitySpecific_type entitySpecific_default_value_;
  ::xsd::cxx::tree::one< entityExtra_type > entityExtra_;
  static const entityExtra_type entityExtra_default_value_;
  ::xsd::cxx::tree::one< readInterval_type > readInterval_;
  static const readInterval_type readInterval_default_value_;
  ::xsd::cxx::tree::one< writeInterval_type > writeInterval_;
  static const writeInterval_type writeInterval_default_value_;
  ::xsd::cxx::tree::one< networkMode_type > networkMode_;
  static const networkMode_type networkMode_default_value_;
  ::xsd::cxx::tree::one< translation_type > translation_;
  static const translation_type translation_default_value_;
  ::xsd::cxx::tree::one< rotation_type > rotation_;
  static const rotation_type rotation_default_value_;
  ::xsd::cxx::tree::one< scale_type > scale_;
  static const scale_type scale_default_value_;
  ::xsd::cxx::tree::one< scaleOrientation_type > scaleOrientation_;
  static const scaleOrientation_type scaleOrientation_default_value_;
  ::xsd::cxx::tree::one< center_type > center_;
  static const center_type center_default_value_;
  ::xsd::cxx::tree::one< address_type > address_;
  static const address_type address_default_value_;
  ::xsd::cxx::tree::one< port_type > port_;
  static const port_type port_default_value_;
  multicastRelayHost_optional multicastRelayHost_;
  ::xsd::cxx::tree::one< multicastRelayPort_type > multicastRelayPort_;
  static const multicastRelayPort_type multicastRelayPort_default_value_;
  ::xsd::cxx::tree::one< rtpHeaderExpected_type > rtpHeaderExpected_;
  static const rtpHeaderExpected_type rtpHeaderExpected_default_value_;
  ::xsd::cxx::tree::one< deadReckoning_type > deadReckoning_;
  static const deadReckoning_type deadReckoning_default_value_;
  ::xsd::cxx::tree::one< linearVelocity_type > linearVelocity_;
  static const linearVelocity_type linearVelocity_default_value_;
  ::xsd::cxx::tree::one< linearAcceleration_type > linearAcceleration_;
  static const linearAcceleration_type linearAcceleration_default_value_;
  ::xsd::cxx::tree::one< fired1_type > fired1_;
  static const fired1_type fired1_default_value_;
  ::xsd::cxx::tree::one< fired2_type > fired2_;
  static const fired2_type fired2_default_value_;
  ::xsd::cxx::tree::one< collisionType_type > collisionType_;
  static const collisionType_type collisionType_default_value_;
  ::xsd::cxx::tree::one< detonationLocation_type > detonationLocation_;
  static const detonationLocation_type detonationLocation_default_value_;
  ::xsd::cxx::tree::one< detonationRelativeLocation_type > detonationRelativeLocation_;
  static const detonationRelativeLocation_type detonationRelativeLocation_default_value_;
  ::xsd::cxx::tree::one< detonationResult_type > detonationResult_;
  static const detonationResult_type detonationResult_default_value_;
  ::xsd::cxx::tree::one< eventApplicationID_type > eventApplicationID_;
  static const eventApplicationID_type eventApplicationID_default_value_;
  ::xsd::cxx::tree::one< eventEntityID_type > eventEntityID_;
  static const eventEntityID_type eventEntityID_default_value_;
  ::xsd::cxx::tree::one< eventNumber_type > eventNumber_;
  static const eventNumber_type eventNumber_default_value_;
  ::xsd::cxx::tree::one< eventSiteID_type > eventSiteID_;
  static const eventSiteID_type eventSiteID_default_value_;
  ::xsd::cxx::tree::one< munitionStartPoint_type > munitionStartPoint_;
  static const munitionStartPoint_type munitionStartPoint_default_value_;
  ::xsd::cxx::tree::one< munitionEndPoint_type > munitionEndPoint_;
  static const munitionEndPoint_type munitionEndPoint_default_value_;
  ::xsd::cxx::tree::one< munitionSiteID_type > munitionSiteID_;
  static const munitionSiteID_type munitionSiteID_default_value_;
  ::xsd::cxx::tree::one< munitionApplicationID_type > munitionApplicationID_;
  static const munitionApplicationID_type munitionApplicationID_default_value_;
  ::xsd::cxx::tree::one< munitionEntityID_type > munitionEntityID_;
  static const munitionEntityID_type munitionEntityID_default_value_;
  ::xsd::cxx::tree::one< fireMissionIndex_type > fireMissionIndex_;
  static const fireMissionIndex_type fireMissionIndex_default_value_;
  ::xsd::cxx::tree::one< warhead_type > warhead_;
  static const warhead_type warhead_default_value_;
  ::xsd::cxx::tree::one< fuse_type > fuse_;
  static const fuse_type fuse_default_value_;
  ::xsd::cxx::tree::one< munitionQuantity_type > munitionQuantity_;
  static const munitionQuantity_type munitionQuantity_default_value_;
  ::xsd::cxx::tree::one< firingRate_type > firingRate_;
  static const firingRate_type firingRate_default_value_;
  ::xsd::cxx::tree::one< firingRange_type > firingRange_;
  static const firingRange_type firingRange_default_value_;
  ::xsd::cxx::tree::one< articulationParameterCount_type > articulationParameterCount_;
  static const articulationParameterCount_type articulationParameterCount_default_value_;
  articulationParameterDesignatorArray_optional articulationParameterDesignatorArray_;
  articulationParameterChangeIndicatorArray_optional articulationParameterChangeIndicatorArray_;
  articulationParameterIdPartAttachedToArray_optional articulationParameterIdPartAttachedToArray_;
  articulationParameterTypeArray_optional articulationParameterTypeArray_;
  articulationParameterArray_optional articulationParameterArray_;
};

class ReceiverPdu: public ::X3DGroupingNode
{
  public:
  // enabled
  // 
  typedef ::SFBool enabled_type;
  typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

  const enabled_type&
  enabled () const;

  enabled_type&
  enabled ();

  void
  enabled (const enabled_type& x);

  void
  enabled (::std::auto_ptr< enabled_type > p);

  static const enabled_type&
  enabled_default_value ();

  // whichGeometry
  // 
  typedef ::SFInt32 whichGeometry_type;
  typedef ::xsd::cxx::tree::traits< whichGeometry_type, char > whichGeometry_traits;

  const whichGeometry_type&
  whichGeometry () const;

  whichGeometry_type&
  whichGeometry ();

  void
  whichGeometry (const whichGeometry_type& x);

  void
  whichGeometry (::std::auto_ptr< whichGeometry_type > p);

  static const whichGeometry_type&
  whichGeometry_default_value ();

  // readInterval
  // 
  typedef ::SFTime readInterval_type;
  typedef ::xsd::cxx::tree::traits< readInterval_type, char > readInterval_traits;

  const readInterval_type&
  readInterval () const;

  readInterval_type&
  readInterval ();

  void
  readInterval (const readInterval_type& x);

  void
  readInterval (::std::auto_ptr< readInterval_type > p);

  static const readInterval_type&
  readInterval_default_value ();

  // writeInterval
  // 
  typedef ::SFTime writeInterval_type;
  typedef ::xsd::cxx::tree::traits< writeInterval_type, char > writeInterval_traits;

  const writeInterval_type&
  writeInterval () const;

  writeInterval_type&
  writeInterval ();

  void
  writeInterval (const writeInterval_type& x);

  void
  writeInterval (::std::auto_ptr< writeInterval_type > p);

  static const writeInterval_type&
  writeInterval_default_value ();

  // networkMode
  // 
  typedef ::networkModeValues networkMode_type;
  typedef ::xsd::cxx::tree::traits< networkMode_type, char > networkMode_traits;

  const networkMode_type&
  networkMode () const;

  networkMode_type&
  networkMode ();

  void
  networkMode (const networkMode_type& x);

  void
  networkMode (::std::auto_ptr< networkMode_type > p);

  static const networkMode_type&
  networkMode_default_value ();

  // siteID
  // 
  typedef ::SFInt32 siteID_type;
  typedef ::xsd::cxx::tree::traits< siteID_type, char > siteID_traits;

  const siteID_type&
  siteID () const;

  siteID_type&
  siteID ();

  void
  siteID (const siteID_type& x);

  void
  siteID (::std::auto_ptr< siteID_type > p);

  static const siteID_type&
  siteID_default_value ();

  // applicationID
  // 
  typedef ::SFInt32 applicationID_type;
  typedef ::xsd::cxx::tree::traits< applicationID_type, char > applicationID_traits;

  const applicationID_type&
  applicationID () const;

  applicationID_type&
  applicationID ();

  void
  applicationID (const applicationID_type& x);

  void
  applicationID (::std::auto_ptr< applicationID_type > p);

  static const applicationID_type&
  applicationID_default_value ();

  // entityID
  // 
  typedef ::SFInt32 entityID_type;
  typedef ::xsd::cxx::tree::traits< entityID_type, char > entityID_traits;

  const entityID_type&
  entityID () const;

  entityID_type&
  entityID ();

  void
  entityID (const entityID_type& x);

  void
  entityID (::std::auto_ptr< entityID_type > p);

  static const entityID_type&
  entityID_default_value ();

  // address
  // 
  typedef ::SFString address_type;
  typedef ::xsd::cxx::tree::traits< address_type, char > address_traits;

  const address_type&
  address () const;

  address_type&
  address ();

  void
  address (const address_type& x);

  void
  address (::std::auto_ptr< address_type > p);

  static const address_type&
  address_default_value ();

  // port
  // 
  typedef ::SFInt32 port_type;
  typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

  const port_type&
  port () const;

  port_type&
  port ();

  void
  port (const port_type& x);

  void
  port (::std::auto_ptr< port_type > p);

  static const port_type&
  port_default_value ();

  // multicastRelayHost
  // 
  typedef ::SFString multicastRelayHost_type;
  typedef ::xsd::cxx::tree::optional< multicastRelayHost_type > multicastRelayHost_optional;
  typedef ::xsd::cxx::tree::traits< multicastRelayHost_type, char > multicastRelayHost_traits;

  const multicastRelayHost_optional&
  multicastRelayHost () const;

  multicastRelayHost_optional&
  multicastRelayHost ();

  void
  multicastRelayHost (const multicastRelayHost_type& x);

  void
  multicastRelayHost (const multicastRelayHost_optional& x);

  void
  multicastRelayHost (::std::auto_ptr< multicastRelayHost_type > p);

  // multicastRelayPort
  // 
  typedef ::SFInt32 multicastRelayPort_type;
  typedef ::xsd::cxx::tree::traits< multicastRelayPort_type, char > multicastRelayPort_traits;

  const multicastRelayPort_type&
  multicastRelayPort () const;

  multicastRelayPort_type&
  multicastRelayPort ();

  void
  multicastRelayPort (const multicastRelayPort_type& x);

  void
  multicastRelayPort (::std::auto_ptr< multicastRelayPort_type > p);

  static const multicastRelayPort_type&
  multicastRelayPort_default_value ();

  // rtpHeaderExpected
  // 
  typedef ::SFBool rtpHeaderExpected_type;
  typedef ::xsd::cxx::tree::traits< rtpHeaderExpected_type, char > rtpHeaderExpected_traits;

  const rtpHeaderExpected_type&
  rtpHeaderExpected () const;

  rtpHeaderExpected_type&
  rtpHeaderExpected ();

  void
  rtpHeaderExpected (const rtpHeaderExpected_type& x);

  void
  rtpHeaderExpected (::std::auto_ptr< rtpHeaderExpected_type > p);

  static const rtpHeaderExpected_type&
  rtpHeaderExpected_default_value ();

  // radioID
  // 
  typedef ::SFInt32 radioID_type;
  typedef ::xsd::cxx::tree::traits< radioID_type, char > radioID_traits;

  const radioID_type&
  radioID () const;

  radioID_type&
  radioID ();

  void
  radioID (const radioID_type& x);

  void
  radioID (::std::auto_ptr< radioID_type > p);

  static const radioID_type&
  radioID_default_value ();

  // receivedPower
  // 
  typedef ::SFFloat receivedPower_type;
  typedef ::xsd::cxx::tree::traits< receivedPower_type, char > receivedPower_traits;

  const receivedPower_type&
  receivedPower () const;

  receivedPower_type&
  receivedPower ();

  void
  receivedPower (const receivedPower_type& x);

  void
  receivedPower (::std::auto_ptr< receivedPower_type > p);

  static const receivedPower_type&
  receivedPower_default_value ();

  // receiverState
  // 
  typedef ::SFInt32 receiverState_type;
  typedef ::xsd::cxx::tree::traits< receiverState_type, char > receiverState_traits;

  const receiverState_type&
  receiverState () const;

  receiverState_type&
  receiverState ();

  void
  receiverState (const receiverState_type& x);

  void
  receiverState (::std::auto_ptr< receiverState_type > p);

  static const receiverState_type&
  receiverState_default_value ();

  // transmitterSiteID
  // 
  typedef ::SFInt32 transmitterSiteID_type;
  typedef ::xsd::cxx::tree::traits< transmitterSiteID_type, char > transmitterSiteID_traits;

  const transmitterSiteID_type&
  transmitterSiteID () const;

  transmitterSiteID_type&
  transmitterSiteID ();

  void
  transmitterSiteID (const transmitterSiteID_type& x);

  void
  transmitterSiteID (::std::auto_ptr< transmitterSiteID_type > p);

  static const transmitterSiteID_type&
  transmitterSiteID_default_value ();

  // transmitterApplicationID
  // 
  typedef ::SFInt32 transmitterApplicationID_type;
  typedef ::xsd::cxx::tree::traits< transmitterApplicationID_type, char > transmitterApplicationID_traits;

  const transmitterApplicationID_type&
  transmitterApplicationID () const;

  transmitterApplicationID_type&
  transmitterApplicationID ();

  void
  transmitterApplicationID (const transmitterApplicationID_type& x);

  void
  transmitterApplicationID (::std::auto_ptr< transmitterApplicationID_type > p);

  static const transmitterApplicationID_type&
  transmitterApplicationID_default_value ();

  // transmitterEntityID
  // 
  typedef ::SFInt32 transmitterEntityID_type;
  typedef ::xsd::cxx::tree::traits< transmitterEntityID_type, char > transmitterEntityID_traits;

  const transmitterEntityID_type&
  transmitterEntityID () const;

  transmitterEntityID_type&
  transmitterEntityID ();

  void
  transmitterEntityID (const transmitterEntityID_type& x);

  void
  transmitterEntityID (::std::auto_ptr< transmitterEntityID_type > p);

  static const transmitterEntityID_type&
  transmitterEntityID_default_value ();

  // transmitterRadioID
  // 
  typedef ::SFInt32 transmitterRadioID_type;
  typedef ::xsd::cxx::tree::traits< transmitterRadioID_type, char > transmitterRadioID_traits;

  const transmitterRadioID_type&
  transmitterRadioID () const;

  transmitterRadioID_type&
  transmitterRadioID ();

  void
  transmitterRadioID (const transmitterRadioID_type& x);

  void
  transmitterRadioID (::std::auto_ptr< transmitterRadioID_type > p);

  static const transmitterRadioID_type&
  transmitterRadioID_default_value ();

  // Constructors.
  //
  ReceiverPdu ();

  ReceiverPdu (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  ReceiverPdu (const ReceiverPdu& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual ReceiverPdu*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ReceiverPdu ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< enabled_type > enabled_;
  static const enabled_type enabled_default_value_;
  ::xsd::cxx::tree::one< whichGeometry_type > whichGeometry_;
  static const whichGeometry_type whichGeometry_default_value_;
  ::xsd::cxx::tree::one< readInterval_type > readInterval_;
  static const readInterval_type readInterval_default_value_;
  ::xsd::cxx::tree::one< writeInterval_type > writeInterval_;
  static const writeInterval_type writeInterval_default_value_;
  ::xsd::cxx::tree::one< networkMode_type > networkMode_;
  static const networkMode_type networkMode_default_value_;
  ::xsd::cxx::tree::one< siteID_type > siteID_;
  static const siteID_type siteID_default_value_;
  ::xsd::cxx::tree::one< applicationID_type > applicationID_;
  static const applicationID_type applicationID_default_value_;
  ::xsd::cxx::tree::one< entityID_type > entityID_;
  static const entityID_type entityID_default_value_;
  ::xsd::cxx::tree::one< address_type > address_;
  static const address_type address_default_value_;
  ::xsd::cxx::tree::one< port_type > port_;
  static const port_type port_default_value_;
  multicastRelayHost_optional multicastRelayHost_;
  ::xsd::cxx::tree::one< multicastRelayPort_type > multicastRelayPort_;
  static const multicastRelayPort_type multicastRelayPort_default_value_;
  ::xsd::cxx::tree::one< rtpHeaderExpected_type > rtpHeaderExpected_;
  static const rtpHeaderExpected_type rtpHeaderExpected_default_value_;
  ::xsd::cxx::tree::one< radioID_type > radioID_;
  static const radioID_type radioID_default_value_;
  ::xsd::cxx::tree::one< receivedPower_type > receivedPower_;
  static const receivedPower_type receivedPower_default_value_;
  ::xsd::cxx::tree::one< receiverState_type > receiverState_;
  static const receiverState_type receiverState_default_value_;
  ::xsd::cxx::tree::one< transmitterSiteID_type > transmitterSiteID_;
  static const transmitterSiteID_type transmitterSiteID_default_value_;
  ::xsd::cxx::tree::one< transmitterApplicationID_type > transmitterApplicationID_;
  static const transmitterApplicationID_type transmitterApplicationID_default_value_;
  ::xsd::cxx::tree::one< transmitterEntityID_type > transmitterEntityID_;
  static const transmitterEntityID_type transmitterEntityID_default_value_;
  ::xsd::cxx::tree::one< transmitterRadioID_type > transmitterRadioID_;
  static const transmitterRadioID_type transmitterRadioID_default_value_;
};

class SignalPdu: public ::X3DGroupingNode
{
  public:
  // enabled
  // 
  typedef ::SFBool enabled_type;
  typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

  const enabled_type&
  enabled () const;

  enabled_type&
  enabled ();

  void
  enabled (const enabled_type& x);

  void
  enabled (::std::auto_ptr< enabled_type > p);

  static const enabled_type&
  enabled_default_value ();

  // whichGeometry
  // 
  typedef ::SFInt32 whichGeometry_type;
  typedef ::xsd::cxx::tree::traits< whichGeometry_type, char > whichGeometry_traits;

  const whichGeometry_type&
  whichGeometry () const;

  whichGeometry_type&
  whichGeometry ();

  void
  whichGeometry (const whichGeometry_type& x);

  void
  whichGeometry (::std::auto_ptr< whichGeometry_type > p);

  static const whichGeometry_type&
  whichGeometry_default_value ();

  // readInterval
  // 
  typedef ::SFTime readInterval_type;
  typedef ::xsd::cxx::tree::traits< readInterval_type, char > readInterval_traits;

  const readInterval_type&
  readInterval () const;

  readInterval_type&
  readInterval ();

  void
  readInterval (const readInterval_type& x);

  void
  readInterval (::std::auto_ptr< readInterval_type > p);

  static const readInterval_type&
  readInterval_default_value ();

  // writeInterval
  // 
  typedef ::SFTime writeInterval_type;
  typedef ::xsd::cxx::tree::traits< writeInterval_type, char > writeInterval_traits;

  const writeInterval_type&
  writeInterval () const;

  writeInterval_type&
  writeInterval ();

  void
  writeInterval (const writeInterval_type& x);

  void
  writeInterval (::std::auto_ptr< writeInterval_type > p);

  static const writeInterval_type&
  writeInterval_default_value ();

  // networkMode
  // 
  typedef ::networkModeValues networkMode_type;
  typedef ::xsd::cxx::tree::traits< networkMode_type, char > networkMode_traits;

  const networkMode_type&
  networkMode () const;

  networkMode_type&
  networkMode ();

  void
  networkMode (const networkMode_type& x);

  void
  networkMode (::std::auto_ptr< networkMode_type > p);

  static const networkMode_type&
  networkMode_default_value ();

  // siteID
  // 
  typedef ::SFInt32 siteID_type;
  typedef ::xsd::cxx::tree::traits< siteID_type, char > siteID_traits;

  const siteID_type&
  siteID () const;

  siteID_type&
  siteID ();

  void
  siteID (const siteID_type& x);

  void
  siteID (::std::auto_ptr< siteID_type > p);

  static const siteID_type&
  siteID_default_value ();

  // applicationID
  // 
  typedef ::SFInt32 applicationID_type;
  typedef ::xsd::cxx::tree::traits< applicationID_type, char > applicationID_traits;

  const applicationID_type&
  applicationID () const;

  applicationID_type&
  applicationID ();

  void
  applicationID (const applicationID_type& x);

  void
  applicationID (::std::auto_ptr< applicationID_type > p);

  static const applicationID_type&
  applicationID_default_value ();

  // entityID
  // 
  typedef ::SFInt32 entityID_type;
  typedef ::xsd::cxx::tree::traits< entityID_type, char > entityID_traits;

  const entityID_type&
  entityID () const;

  entityID_type&
  entityID ();

  void
  entityID (const entityID_type& x);

  void
  entityID (::std::auto_ptr< entityID_type > p);

  static const entityID_type&
  entityID_default_value ();

  // address
  // 
  typedef ::SFString address_type;
  typedef ::xsd::cxx::tree::traits< address_type, char > address_traits;

  const address_type&
  address () const;

  address_type&
  address ();

  void
  address (const address_type& x);

  void
  address (::std::auto_ptr< address_type > p);

  static const address_type&
  address_default_value ();

  // port
  // 
  typedef ::SFInt32 port_type;
  typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

  const port_type&
  port () const;

  port_type&
  port ();

  void
  port (const port_type& x);

  void
  port (::std::auto_ptr< port_type > p);

  static const port_type&
  port_default_value ();

  // multicastRelayHost
  // 
  typedef ::SFString multicastRelayHost_type;
  typedef ::xsd::cxx::tree::optional< multicastRelayHost_type > multicastRelayHost_optional;
  typedef ::xsd::cxx::tree::traits< multicastRelayHost_type, char > multicastRelayHost_traits;

  const multicastRelayHost_optional&
  multicastRelayHost () const;

  multicastRelayHost_optional&
  multicastRelayHost ();

  void
  multicastRelayHost (const multicastRelayHost_type& x);

  void
  multicastRelayHost (const multicastRelayHost_optional& x);

  void
  multicastRelayHost (::std::auto_ptr< multicastRelayHost_type > p);

  // multicastRelayPort
  // 
  typedef ::SFInt32 multicastRelayPort_type;
  typedef ::xsd::cxx::tree::traits< multicastRelayPort_type, char > multicastRelayPort_traits;

  const multicastRelayPort_type&
  multicastRelayPort () const;

  multicastRelayPort_type&
  multicastRelayPort ();

  void
  multicastRelayPort (const multicastRelayPort_type& x);

  void
  multicastRelayPort (::std::auto_ptr< multicastRelayPort_type > p);

  static const multicastRelayPort_type&
  multicastRelayPort_default_value ();

  // rtpHeaderExpected
  // 
  typedef ::SFBool rtpHeaderExpected_type;
  typedef ::xsd::cxx::tree::traits< rtpHeaderExpected_type, char > rtpHeaderExpected_traits;

  const rtpHeaderExpected_type&
  rtpHeaderExpected () const;

  rtpHeaderExpected_type&
  rtpHeaderExpected ();

  void
  rtpHeaderExpected (const rtpHeaderExpected_type& x);

  void
  rtpHeaderExpected (::std::auto_ptr< rtpHeaderExpected_type > p);

  static const rtpHeaderExpected_type&
  rtpHeaderExpected_default_value ();

  // radioID
  // 
  typedef ::SFInt32 radioID_type;
  typedef ::xsd::cxx::tree::traits< radioID_type, char > radioID_traits;

  const radioID_type&
  radioID () const;

  radioID_type&
  radioID ();

  void
  radioID (const radioID_type& x);

  void
  radioID (::std::auto_ptr< radioID_type > p);

  static const radioID_type&
  radioID_default_value ();

  // encodingScheme
  // 
  typedef ::SFInt32 encodingScheme_type;
  typedef ::xsd::cxx::tree::traits< encodingScheme_type, char > encodingScheme_traits;

  const encodingScheme_type&
  encodingScheme () const;

  encodingScheme_type&
  encodingScheme ();

  void
  encodingScheme (const encodingScheme_type& x);

  void
  encodingScheme (::std::auto_ptr< encodingScheme_type > p);

  static const encodingScheme_type&
  encodingScheme_default_value ();

  // tdlType
  // 
  typedef ::SFInt32 tdlType_type;
  typedef ::xsd::cxx::tree::traits< tdlType_type, char > tdlType_traits;

  const tdlType_type&
  tdlType () const;

  tdlType_type&
  tdlType ();

  void
  tdlType (const tdlType_type& x);

  void
  tdlType (::std::auto_ptr< tdlType_type > p);

  static const tdlType_type&
  tdlType_default_value ();

  // sampleRate
  // 
  typedef ::SFInt32 sampleRate_type;
  typedef ::xsd::cxx::tree::traits< sampleRate_type, char > sampleRate_traits;

  const sampleRate_type&
  sampleRate () const;

  sampleRate_type&
  sampleRate ();

  void
  sampleRate (const sampleRate_type& x);

  void
  sampleRate (::std::auto_ptr< sampleRate_type > p);

  static const sampleRate_type&
  sampleRate_default_value ();

  // samples
  // 
  typedef ::SFInt32 samples_type;
  typedef ::xsd::cxx::tree::traits< samples_type, char > samples_traits;

  const samples_type&
  samples () const;

  samples_type&
  samples ();

  void
  samples (const samples_type& x);

  void
  samples (::std::auto_ptr< samples_type > p);

  static const samples_type&
  samples_default_value ();

  // dataLength
  // 
  typedef ::SFInt32 dataLength_type;
  typedef ::xsd::cxx::tree::traits< dataLength_type, char > dataLength_traits;

  const dataLength_type&
  dataLength () const;

  dataLength_type&
  dataLength ();

  void
  dataLength (const dataLength_type& x);

  void
  dataLength (::std::auto_ptr< dataLength_type > p);

  static const dataLength_type&
  dataLength_default_value ();

  // data
  // 
  typedef ::MFInt32 data_type;
  typedef ::xsd::cxx::tree::optional< data_type > data_optional;
  typedef ::xsd::cxx::tree::traits< data_type, char > data_traits;

  const data_optional&
  data () const;

  data_optional&
  data ();

  void
  data (const data_type& x);

  void
  data (const data_optional& x);

  void
  data (::std::auto_ptr< data_type > p);

  // Constructors.
  //
  SignalPdu ();

  SignalPdu (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  SignalPdu (const SignalPdu& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual SignalPdu*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SignalPdu ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< enabled_type > enabled_;
  static const enabled_type enabled_default_value_;
  ::xsd::cxx::tree::one< whichGeometry_type > whichGeometry_;
  static const whichGeometry_type whichGeometry_default_value_;
  ::xsd::cxx::tree::one< readInterval_type > readInterval_;
  static const readInterval_type readInterval_default_value_;
  ::xsd::cxx::tree::one< writeInterval_type > writeInterval_;
  static const writeInterval_type writeInterval_default_value_;
  ::xsd::cxx::tree::one< networkMode_type > networkMode_;
  static const networkMode_type networkMode_default_value_;
  ::xsd::cxx::tree::one< siteID_type > siteID_;
  static const siteID_type siteID_default_value_;
  ::xsd::cxx::tree::one< applicationID_type > applicationID_;
  static const applicationID_type applicationID_default_value_;
  ::xsd::cxx::tree::one< entityID_type > entityID_;
  static const entityID_type entityID_default_value_;
  ::xsd::cxx::tree::one< address_type > address_;
  static const address_type address_default_value_;
  ::xsd::cxx::tree::one< port_type > port_;
  static const port_type port_default_value_;
  multicastRelayHost_optional multicastRelayHost_;
  ::xsd::cxx::tree::one< multicastRelayPort_type > multicastRelayPort_;
  static const multicastRelayPort_type multicastRelayPort_default_value_;
  ::xsd::cxx::tree::one< rtpHeaderExpected_type > rtpHeaderExpected_;
  static const rtpHeaderExpected_type rtpHeaderExpected_default_value_;
  ::xsd::cxx::tree::one< radioID_type > radioID_;
  static const radioID_type radioID_default_value_;
  ::xsd::cxx::tree::one< encodingScheme_type > encodingScheme_;
  static const encodingScheme_type encodingScheme_default_value_;
  ::xsd::cxx::tree::one< tdlType_type > tdlType_;
  static const tdlType_type tdlType_default_value_;
  ::xsd::cxx::tree::one< sampleRate_type > sampleRate_;
  static const sampleRate_type sampleRate_default_value_;
  ::xsd::cxx::tree::one< samples_type > samples_;
  static const samples_type samples_default_value_;
  ::xsd::cxx::tree::one< dataLength_type > dataLength_;
  static const dataLength_type dataLength_default_value_;
  data_optional data_;
};

class TransmitterPdu: public ::X3DGroupingNode
{
  public:
  // enabled
  // 
  typedef ::SFBool enabled_type;
  typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

  const enabled_type&
  enabled () const;

  enabled_type&
  enabled ();

  void
  enabled (const enabled_type& x);

  void
  enabled (::std::auto_ptr< enabled_type > p);

  static const enabled_type&
  enabled_default_value ();

  // whichGeometry
  // 
  typedef ::SFInt32 whichGeometry_type;
  typedef ::xsd::cxx::tree::traits< whichGeometry_type, char > whichGeometry_traits;

  const whichGeometry_type&
  whichGeometry () const;

  whichGeometry_type&
  whichGeometry ();

  void
  whichGeometry (const whichGeometry_type& x);

  void
  whichGeometry (::std::auto_ptr< whichGeometry_type > p);

  static const whichGeometry_type&
  whichGeometry_default_value ();

  // readInterval
  // 
  typedef ::SFTime readInterval_type;
  typedef ::xsd::cxx::tree::traits< readInterval_type, char > readInterval_traits;

  const readInterval_type&
  readInterval () const;

  readInterval_type&
  readInterval ();

  void
  readInterval (const readInterval_type& x);

  void
  readInterval (::std::auto_ptr< readInterval_type > p);

  static const readInterval_type&
  readInterval_default_value ();

  // writeInterval
  // 
  typedef ::SFTime writeInterval_type;
  typedef ::xsd::cxx::tree::traits< writeInterval_type, char > writeInterval_traits;

  const writeInterval_type&
  writeInterval () const;

  writeInterval_type&
  writeInterval ();

  void
  writeInterval (const writeInterval_type& x);

  void
  writeInterval (::std::auto_ptr< writeInterval_type > p);

  static const writeInterval_type&
  writeInterval_default_value ();

  // networkMode
  // 
  typedef ::networkModeValues networkMode_type;
  typedef ::xsd::cxx::tree::traits< networkMode_type, char > networkMode_traits;

  const networkMode_type&
  networkMode () const;

  networkMode_type&
  networkMode ();

  void
  networkMode (const networkMode_type& x);

  void
  networkMode (::std::auto_ptr< networkMode_type > p);

  static const networkMode_type&
  networkMode_default_value ();

  // siteID
  // 
  typedef ::SFInt32 siteID_type;
  typedef ::xsd::cxx::tree::traits< siteID_type, char > siteID_traits;

  const siteID_type&
  siteID () const;

  siteID_type&
  siteID ();

  void
  siteID (const siteID_type& x);

  void
  siteID (::std::auto_ptr< siteID_type > p);

  static const siteID_type&
  siteID_default_value ();

  // applicationID
  // 
  typedef ::SFInt32 applicationID_type;
  typedef ::xsd::cxx::tree::traits< applicationID_type, char > applicationID_traits;

  const applicationID_type&
  applicationID () const;

  applicationID_type&
  applicationID ();

  void
  applicationID (const applicationID_type& x);

  void
  applicationID (::std::auto_ptr< applicationID_type > p);

  static const applicationID_type&
  applicationID_default_value ();

  // entityID
  // 
  typedef ::SFInt32 entityID_type;
  typedef ::xsd::cxx::tree::traits< entityID_type, char > entityID_traits;

  const entityID_type&
  entityID () const;

  entityID_type&
  entityID ();

  void
  entityID (const entityID_type& x);

  void
  entityID (::std::auto_ptr< entityID_type > p);

  static const entityID_type&
  entityID_default_value ();

  // address
  // 
  typedef ::SFString address_type;
  typedef ::xsd::cxx::tree::traits< address_type, char > address_traits;

  const address_type&
  address () const;

  address_type&
  address ();

  void
  address (const address_type& x);

  void
  address (::std::auto_ptr< address_type > p);

  static const address_type&
  address_default_value ();

  // port
  // 
  typedef ::SFInt32 port_type;
  typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

  const port_type&
  port () const;

  port_type&
  port ();

  void
  port (const port_type& x);

  void
  port (::std::auto_ptr< port_type > p);

  static const port_type&
  port_default_value ();

  // multicastRelayHost
  // 
  typedef ::SFString multicastRelayHost_type;
  typedef ::xsd::cxx::tree::optional< multicastRelayHost_type > multicastRelayHost_optional;
  typedef ::xsd::cxx::tree::traits< multicastRelayHost_type, char > multicastRelayHost_traits;

  const multicastRelayHost_optional&
  multicastRelayHost () const;

  multicastRelayHost_optional&
  multicastRelayHost ();

  void
  multicastRelayHost (const multicastRelayHost_type& x);

  void
  multicastRelayHost (const multicastRelayHost_optional& x);

  void
  multicastRelayHost (::std::auto_ptr< multicastRelayHost_type > p);

  // multicastRelayPort
  // 
  typedef ::SFInt32 multicastRelayPort_type;
  typedef ::xsd::cxx::tree::traits< multicastRelayPort_type, char > multicastRelayPort_traits;

  const multicastRelayPort_type&
  multicastRelayPort () const;

  multicastRelayPort_type&
  multicastRelayPort ();

  void
  multicastRelayPort (const multicastRelayPort_type& x);

  void
  multicastRelayPort (::std::auto_ptr< multicastRelayPort_type > p);

  static const multicastRelayPort_type&
  multicastRelayPort_default_value ();

  // rtpHeaderExpected
  // 
  typedef ::SFBool rtpHeaderExpected_type;
  typedef ::xsd::cxx::tree::traits< rtpHeaderExpected_type, char > rtpHeaderExpected_traits;

  const rtpHeaderExpected_type&
  rtpHeaderExpected () const;

  rtpHeaderExpected_type&
  rtpHeaderExpected ();

  void
  rtpHeaderExpected (const rtpHeaderExpected_type& x);

  void
  rtpHeaderExpected (::std::auto_ptr< rtpHeaderExpected_type > p);

  static const rtpHeaderExpected_type&
  rtpHeaderExpected_default_value ();

  // radioID
  // 
  typedef ::SFInt32 radioID_type;
  typedef ::xsd::cxx::tree::traits< radioID_type, char > radioID_traits;

  const radioID_type&
  radioID () const;

  radioID_type&
  radioID ();

  void
  radioID (const radioID_type& x);

  void
  radioID (::std::auto_ptr< radioID_type > p);

  static const radioID_type&
  radioID_default_value ();

  // antennaLocation
  // 
  typedef ::SFVec3f antennaLocation_type;
  typedef ::xsd::cxx::tree::traits< antennaLocation_type, char > antennaLocation_traits;

  const antennaLocation_type&
  antennaLocation () const;

  antennaLocation_type&
  antennaLocation ();

  void
  antennaLocation (const antennaLocation_type& x);

  void
  antennaLocation (::std::auto_ptr< antennaLocation_type > p);

  static const antennaLocation_type&
  antennaLocation_default_value ();

  // antennaPatternLength
  // 
  typedef ::SFInt32 antennaPatternLength_type;
  typedef ::xsd::cxx::tree::traits< antennaPatternLength_type, char > antennaPatternLength_traits;

  const antennaPatternLength_type&
  antennaPatternLength () const;

  antennaPatternLength_type&
  antennaPatternLength ();

  void
  antennaPatternLength (const antennaPatternLength_type& x);

  void
  antennaPatternLength (::std::auto_ptr< antennaPatternLength_type > p);

  static const antennaPatternLength_type&
  antennaPatternLength_default_value ();

  // antennaPatternType
  // 
  typedef ::SFInt32 antennaPatternType_type;
  typedef ::xsd::cxx::tree::traits< antennaPatternType_type, char > antennaPatternType_traits;

  const antennaPatternType_type&
  antennaPatternType () const;

  antennaPatternType_type&
  antennaPatternType ();

  void
  antennaPatternType (const antennaPatternType_type& x);

  void
  antennaPatternType (::std::auto_ptr< antennaPatternType_type > p);

  static const antennaPatternType_type&
  antennaPatternType_default_value ();

  // cryptoKeyID
  // 
  typedef ::SFInt32 cryptoKeyID_type;
  typedef ::xsd::cxx::tree::traits< cryptoKeyID_type, char > cryptoKeyID_traits;

  const cryptoKeyID_type&
  cryptoKeyID () const;

  cryptoKeyID_type&
  cryptoKeyID ();

  void
  cryptoKeyID (const cryptoKeyID_type& x);

  void
  cryptoKeyID (::std::auto_ptr< cryptoKeyID_type > p);

  static const cryptoKeyID_type&
  cryptoKeyID_default_value ();

  // cryptoSystem
  // 
  typedef ::SFInt32 cryptoSystem_type;
  typedef ::xsd::cxx::tree::traits< cryptoSystem_type, char > cryptoSystem_traits;

  const cryptoSystem_type&
  cryptoSystem () const;

  cryptoSystem_type&
  cryptoSystem ();

  void
  cryptoSystem (const cryptoSystem_type& x);

  void
  cryptoSystem (::std::auto_ptr< cryptoSystem_type > p);

  static const cryptoSystem_type&
  cryptoSystem_default_value ();

  // frequency
  // 
  typedef ::SFInt32 frequency_type;
  typedef ::xsd::cxx::tree::traits< frequency_type, char > frequency_traits;

  const frequency_type&
  frequency () const;

  frequency_type&
  frequency ();

  void
  frequency (const frequency_type& x);

  void
  frequency (::std::auto_ptr< frequency_type > p);

  static const frequency_type&
  frequency_default_value ();

  // inputSource
  // 
  typedef ::SFInt32 inputSource_type;
  typedef ::xsd::cxx::tree::traits< inputSource_type, char > inputSource_traits;

  const inputSource_type&
  inputSource () const;

  inputSource_type&
  inputSource ();

  void
  inputSource (const inputSource_type& x);

  void
  inputSource (::std::auto_ptr< inputSource_type > p);

  static const inputSource_type&
  inputSource_default_value ();

  // lengthOfModulationParameters
  // 
  typedef ::SFInt32 lengthOfModulationParameters_type;
  typedef ::xsd::cxx::tree::traits< lengthOfModulationParameters_type, char > lengthOfModulationParameters_traits;

  const lengthOfModulationParameters_type&
  lengthOfModulationParameters () const;

  lengthOfModulationParameters_type&
  lengthOfModulationParameters ();

  void
  lengthOfModulationParameters (const lengthOfModulationParameters_type& x);

  void
  lengthOfModulationParameters (::std::auto_ptr< lengthOfModulationParameters_type > p);

  static const lengthOfModulationParameters_type&
  lengthOfModulationParameters_default_value ();

  // modulationTypeDetail
  // 
  typedef ::SFInt32 modulationTypeDetail_type;
  typedef ::xsd::cxx::tree::traits< modulationTypeDetail_type, char > modulationTypeDetail_traits;

  const modulationTypeDetail_type&
  modulationTypeDetail () const;

  modulationTypeDetail_type&
  modulationTypeDetail ();

  void
  modulationTypeDetail (const modulationTypeDetail_type& x);

  void
  modulationTypeDetail (::std::auto_ptr< modulationTypeDetail_type > p);

  static const modulationTypeDetail_type&
  modulationTypeDetail_default_value ();

  // modulationTypeMajor
  // 
  typedef ::SFInt32 modulationTypeMajor_type;
  typedef ::xsd::cxx::tree::traits< modulationTypeMajor_type, char > modulationTypeMajor_traits;

  const modulationTypeMajor_type&
  modulationTypeMajor () const;

  modulationTypeMajor_type&
  modulationTypeMajor ();

  void
  modulationTypeMajor (const modulationTypeMajor_type& x);

  void
  modulationTypeMajor (::std::auto_ptr< modulationTypeMajor_type > p);

  static const modulationTypeMajor_type&
  modulationTypeMajor_default_value ();

  // modulationTypeSpreadSpectrum
  // 
  typedef ::SFInt32 modulationTypeSpreadSpectrum_type;
  typedef ::xsd::cxx::tree::traits< modulationTypeSpreadSpectrum_type, char > modulationTypeSpreadSpectrum_traits;

  const modulationTypeSpreadSpectrum_type&
  modulationTypeSpreadSpectrum () const;

  modulationTypeSpreadSpectrum_type&
  modulationTypeSpreadSpectrum ();

  void
  modulationTypeSpreadSpectrum (const modulationTypeSpreadSpectrum_type& x);

  void
  modulationTypeSpreadSpectrum (::std::auto_ptr< modulationTypeSpreadSpectrum_type > p);

  static const modulationTypeSpreadSpectrum_type&
  modulationTypeSpreadSpectrum_default_value ();

  // modulationTypeSystem
  // 
  typedef ::SFInt32 modulationTypeSystem_type;
  typedef ::xsd::cxx::tree::traits< modulationTypeSystem_type, char > modulationTypeSystem_traits;

  const modulationTypeSystem_type&
  modulationTypeSystem () const;

  modulationTypeSystem_type&
  modulationTypeSystem ();

  void
  modulationTypeSystem (const modulationTypeSystem_type& x);

  void
  modulationTypeSystem (::std::auto_ptr< modulationTypeSystem_type > p);

  static const modulationTypeSystem_type&
  modulationTypeSystem_default_value ();

  // power
  // 
  typedef ::SFFloat power_type;
  typedef ::xsd::cxx::tree::traits< power_type, char > power_traits;

  const power_type&
  power () const;

  power_type&
  power ();

  void
  power (const power_type& x);

  void
  power (::std::auto_ptr< power_type > p);

  static const power_type&
  power_default_value ();

  // radioEntityTypeCategory
  // 
  typedef ::SFInt32 radioEntityTypeCategory_type;
  typedef ::xsd::cxx::tree::traits< radioEntityTypeCategory_type, char > radioEntityTypeCategory_traits;

  const radioEntityTypeCategory_type&
  radioEntityTypeCategory () const;

  radioEntityTypeCategory_type&
  radioEntityTypeCategory ();

  void
  radioEntityTypeCategory (const radioEntityTypeCategory_type& x);

  void
  radioEntityTypeCategory (::std::auto_ptr< radioEntityTypeCategory_type > p);

  static const radioEntityTypeCategory_type&
  radioEntityTypeCategory_default_value ();

  // radioEntityTypeCountry
  // 
  typedef ::SFInt32 radioEntityTypeCountry_type;
  typedef ::xsd::cxx::tree::traits< radioEntityTypeCountry_type, char > radioEntityTypeCountry_traits;

  const radioEntityTypeCountry_type&
  radioEntityTypeCountry () const;

  radioEntityTypeCountry_type&
  radioEntityTypeCountry ();

  void
  radioEntityTypeCountry (const radioEntityTypeCountry_type& x);

  void
  radioEntityTypeCountry (::std::auto_ptr< radioEntityTypeCountry_type > p);

  static const radioEntityTypeCountry_type&
  radioEntityTypeCountry_default_value ();

  // radioEntityTypeDomain
  // 
  typedef ::SFInt32 radioEntityTypeDomain_type;
  typedef ::xsd::cxx::tree::traits< radioEntityTypeDomain_type, char > radioEntityTypeDomain_traits;

  const radioEntityTypeDomain_type&
  radioEntityTypeDomain () const;

  radioEntityTypeDomain_type&
  radioEntityTypeDomain ();

  void
  radioEntityTypeDomain (const radioEntityTypeDomain_type& x);

  void
  radioEntityTypeDomain (::std::auto_ptr< radioEntityTypeDomain_type > p);

  static const radioEntityTypeDomain_type&
  radioEntityTypeDomain_default_value ();

  // radioEntityTypeKind
  // 
  typedef ::SFInt32 radioEntityTypeKind_type;
  typedef ::xsd::cxx::tree::traits< radioEntityTypeKind_type, char > radioEntityTypeKind_traits;

  const radioEntityTypeKind_type&
  radioEntityTypeKind () const;

  radioEntityTypeKind_type&
  radioEntityTypeKind ();

  void
  radioEntityTypeKind (const radioEntityTypeKind_type& x);

  void
  radioEntityTypeKind (::std::auto_ptr< radioEntityTypeKind_type > p);

  static const radioEntityTypeKind_type&
  radioEntityTypeKind_default_value ();

  // radioEntityTypeNomenclature
  // 
  typedef ::SFInt32 radioEntityTypeNomenclature_type;
  typedef ::xsd::cxx::tree::traits< radioEntityTypeNomenclature_type, char > radioEntityTypeNomenclature_traits;

  const radioEntityTypeNomenclature_type&
  radioEntityTypeNomenclature () const;

  radioEntityTypeNomenclature_type&
  radioEntityTypeNomenclature ();

  void
  radioEntityTypeNomenclature (const radioEntityTypeNomenclature_type& x);

  void
  radioEntityTypeNomenclature (::std::auto_ptr< radioEntityTypeNomenclature_type > p);

  static const radioEntityTypeNomenclature_type&
  radioEntityTypeNomenclature_default_value ();

  // radioEntityTypeNomenclatureVersion
  // 
  typedef ::SFInt32 radioEntityTypeNomenclatureVersion_type;
  typedef ::xsd::cxx::tree::traits< radioEntityTypeNomenclatureVersion_type, char > radioEntityTypeNomenclatureVersion_traits;

  const radioEntityTypeNomenclatureVersion_type&
  radioEntityTypeNomenclatureVersion () const;

  radioEntityTypeNomenclatureVersion_type&
  radioEntityTypeNomenclatureVersion ();

  void
  radioEntityTypeNomenclatureVersion (const radioEntityTypeNomenclatureVersion_type& x);

  void
  radioEntityTypeNomenclatureVersion (::std::auto_ptr< radioEntityTypeNomenclatureVersion_type > p);

  static const radioEntityTypeNomenclatureVersion_type&
  radioEntityTypeNomenclatureVersion_default_value ();

  // relativeAntennaLocation
  // 
  typedef ::SFVec3f relativeAntennaLocation_type;
  typedef ::xsd::cxx::tree::traits< relativeAntennaLocation_type, char > relativeAntennaLocation_traits;

  const relativeAntennaLocation_type&
  relativeAntennaLocation () const;

  relativeAntennaLocation_type&
  relativeAntennaLocation ();

  void
  relativeAntennaLocation (const relativeAntennaLocation_type& x);

  void
  relativeAntennaLocation (::std::auto_ptr< relativeAntennaLocation_type > p);

  static const relativeAntennaLocation_type&
  relativeAntennaLocation_default_value ();

  // transmitFrequencyBandwidth
  // 
  typedef ::SFFloat transmitFrequencyBandwidth_type;
  typedef ::xsd::cxx::tree::traits< transmitFrequencyBandwidth_type, char > transmitFrequencyBandwidth_traits;

  const transmitFrequencyBandwidth_type&
  transmitFrequencyBandwidth () const;

  transmitFrequencyBandwidth_type&
  transmitFrequencyBandwidth ();

  void
  transmitFrequencyBandwidth (const transmitFrequencyBandwidth_type& x);

  void
  transmitFrequencyBandwidth (::std::auto_ptr< transmitFrequencyBandwidth_type > p);

  static const transmitFrequencyBandwidth_type&
  transmitFrequencyBandwidth_default_value ();

  // transmitState
  // 
  typedef ::SFInt32 transmitState_type;
  typedef ::xsd::cxx::tree::traits< transmitState_type, char > transmitState_traits;

  const transmitState_type&
  transmitState () const;

  transmitState_type&
  transmitState ();

  void
  transmitState (const transmitState_type& x);

  void
  transmitState (::std::auto_ptr< transmitState_type > p);

  static const transmitState_type&
  transmitState_default_value ();

  // Constructors.
  //
  TransmitterPdu ();

  TransmitterPdu (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  TransmitterPdu (const TransmitterPdu& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual TransmitterPdu*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TransmitterPdu ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< enabled_type > enabled_;
  static const enabled_type enabled_default_value_;
  ::xsd::cxx::tree::one< whichGeometry_type > whichGeometry_;
  static const whichGeometry_type whichGeometry_default_value_;
  ::xsd::cxx::tree::one< readInterval_type > readInterval_;
  static const readInterval_type readInterval_default_value_;
  ::xsd::cxx::tree::one< writeInterval_type > writeInterval_;
  static const writeInterval_type writeInterval_default_value_;
  ::xsd::cxx::tree::one< networkMode_type > networkMode_;
  static const networkMode_type networkMode_default_value_;
  ::xsd::cxx::tree::one< siteID_type > siteID_;
  static const siteID_type siteID_default_value_;
  ::xsd::cxx::tree::one< applicationID_type > applicationID_;
  static const applicationID_type applicationID_default_value_;
  ::xsd::cxx::tree::one< entityID_type > entityID_;
  static const entityID_type entityID_default_value_;
  ::xsd::cxx::tree::one< address_type > address_;
  static const address_type address_default_value_;
  ::xsd::cxx::tree::one< port_type > port_;
  static const port_type port_default_value_;
  multicastRelayHost_optional multicastRelayHost_;
  ::xsd::cxx::tree::one< multicastRelayPort_type > multicastRelayPort_;
  static const multicastRelayPort_type multicastRelayPort_default_value_;
  ::xsd::cxx::tree::one< rtpHeaderExpected_type > rtpHeaderExpected_;
  static const rtpHeaderExpected_type rtpHeaderExpected_default_value_;
  ::xsd::cxx::tree::one< radioID_type > radioID_;
  static const radioID_type radioID_default_value_;
  ::xsd::cxx::tree::one< antennaLocation_type > antennaLocation_;
  static const antennaLocation_type antennaLocation_default_value_;
  ::xsd::cxx::tree::one< antennaPatternLength_type > antennaPatternLength_;
  static const antennaPatternLength_type antennaPatternLength_default_value_;
  ::xsd::cxx::tree::one< antennaPatternType_type > antennaPatternType_;
  static const antennaPatternType_type antennaPatternType_default_value_;
  ::xsd::cxx::tree::one< cryptoKeyID_type > cryptoKeyID_;
  static const cryptoKeyID_type cryptoKeyID_default_value_;
  ::xsd::cxx::tree::one< cryptoSystem_type > cryptoSystem_;
  static const cryptoSystem_type cryptoSystem_default_value_;
  ::xsd::cxx::tree::one< frequency_type > frequency_;
  static const frequency_type frequency_default_value_;
  ::xsd::cxx::tree::one< inputSource_type > inputSource_;
  static const inputSource_type inputSource_default_value_;
  ::xsd::cxx::tree::one< lengthOfModulationParameters_type > lengthOfModulationParameters_;
  static const lengthOfModulationParameters_type lengthOfModulationParameters_default_value_;
  ::xsd::cxx::tree::one< modulationTypeDetail_type > modulationTypeDetail_;
  static const modulationTypeDetail_type modulationTypeDetail_default_value_;
  ::xsd::cxx::tree::one< modulationTypeMajor_type > modulationTypeMajor_;
  static const modulationTypeMajor_type modulationTypeMajor_default_value_;
  ::xsd::cxx::tree::one< modulationTypeSpreadSpectrum_type > modulationTypeSpreadSpectrum_;
  static const modulationTypeSpreadSpectrum_type modulationTypeSpreadSpectrum_default_value_;
  ::xsd::cxx::tree::one< modulationTypeSystem_type > modulationTypeSystem_;
  static const modulationTypeSystem_type modulationTypeSystem_default_value_;
  ::xsd::cxx::tree::one< power_type > power_;
  static const power_type power_default_value_;
  ::xsd::cxx::tree::one< radioEntityTypeCategory_type > radioEntityTypeCategory_;
  static const radioEntityTypeCategory_type radioEntityTypeCategory_default_value_;
  ::xsd::cxx::tree::one< radioEntityTypeCountry_type > radioEntityTypeCountry_;
  static const radioEntityTypeCountry_type radioEntityTypeCountry_default_value_;
  ::xsd::cxx::tree::one< radioEntityTypeDomain_type > radioEntityTypeDomain_;
  static const radioEntityTypeDomain_type radioEntityTypeDomain_default_value_;
  ::xsd::cxx::tree::one< radioEntityTypeKind_type > radioEntityTypeKind_;
  static const radioEntityTypeKind_type radioEntityTypeKind_default_value_;
  ::xsd::cxx::tree::one< radioEntityTypeNomenclature_type > radioEntityTypeNomenclature_;
  static const radioEntityTypeNomenclature_type radioEntityTypeNomenclature_default_value_;
  ::xsd::cxx::tree::one< radioEntityTypeNomenclatureVersion_type > radioEntityTypeNomenclatureVersion_;
  static const radioEntityTypeNomenclatureVersion_type radioEntityTypeNomenclatureVersion_default_value_;
  ::xsd::cxx::tree::one< relativeAntennaLocation_type > relativeAntennaLocation_;
  static const relativeAntennaLocation_type relativeAntennaLocation_default_value_;
  ::xsd::cxx::tree::one< transmitFrequencyBandwidth_type > transmitFrequencyBandwidth_;
  static const transmitFrequencyBandwidth_type transmitFrequencyBandwidth_default_value_;
  ::xsd::cxx::tree::one< transmitState_type > transmitState_;
  static const transmitState_type transmitState_default_value_;
};

class GeoCoordinate: public ::X3DCoordinateNode
{
  public:
  // GeoOrigin
  // 
  typedef ::xml_schema::type GeoOrigin_type;
  typedef ::xsd::cxx::tree::optional< GeoOrigin_type > GeoOrigin_optional;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_optional&
  GeoOrigin () const;

  GeoOrigin_optional&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_type& x);

  void
  GeoOrigin (const GeoOrigin_optional& x);

  void
  GeoOrigin (::std::auto_ptr< GeoOrigin_type > p);

  // geoSystem
  // 
  typedef ::geoSystemType geoSystem_type;
  typedef ::xsd::cxx::tree::traits< geoSystem_type, char > geoSystem_traits;

  const geoSystem_type&
  geoSystem () const;

  geoSystem_type&
  geoSystem ();

  void
  geoSystem (const geoSystem_type& x);

  void
  geoSystem (::std::auto_ptr< geoSystem_type > p);

  static const geoSystem_type&
  geoSystem_default_value ();

  // point
  // 
  typedef ::MFVec3d point_type;
  typedef ::xsd::cxx::tree::optional< point_type > point_optional;
  typedef ::xsd::cxx::tree::traits< point_type, char > point_traits;

  const point_optional&
  point () const;

  point_optional&
  point ();

  void
  point (const point_type& x);

  void
  point (const point_optional& x);

  void
  point (::std::auto_ptr< point_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  GeoCoordinate ();

  GeoCoordinate (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  GeoCoordinate (const GeoCoordinate& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual GeoCoordinate*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GeoCoordinate ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  GeoOrigin_optional GeoOrigin_;
  ::xsd::cxx::tree::one< geoSystem_type > geoSystem_;
  static const geoSystem_type geoSystem_default_value_;
  point_optional point_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class GeoElevationGrid: public ::X3DGeometryNode
{
  public:
  // GeoOrigin
  // 
  typedef ::GeoOrigin GeoOrigin_type;
  typedef ::xsd::cxx::tree::optional< GeoOrigin_type > GeoOrigin_optional;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_optional&
  GeoOrigin () const;

  GeoOrigin_optional&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_type& x);

  void
  GeoOrigin (const GeoOrigin_optional& x);

  void
  GeoOrigin (::std::auto_ptr< GeoOrigin_type > p);

  // Color
  // 
  typedef ::Color Color_type;
  typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
  typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

  const Color_optional&
  Color () const;

  Color_optional&
  Color ();

  void
  Color (const Color_type& x);

  void
  Color (const Color_optional& x);

  void
  Color (::std::auto_ptr< Color_type > p);

  // ColorRGBA
  // 
  typedef ::ColorRGBA ColorRGBA_type;
  typedef ::xsd::cxx::tree::optional< ColorRGBA_type > ColorRGBA_optional;
  typedef ::xsd::cxx::tree::traits< ColorRGBA_type, char > ColorRGBA_traits;

  const ColorRGBA_optional&
  ColorRGBA () const;

  ColorRGBA_optional&
  ColorRGBA ();

  void
  ColorRGBA (const ColorRGBA_type& x);

  void
  ColorRGBA (const ColorRGBA_optional& x);

  void
  ColorRGBA (::std::auto_ptr< ColorRGBA_type > p);

  // Normal
  // 
  typedef ::Normal Normal_type;
  typedef ::xsd::cxx::tree::optional< Normal_type > Normal_optional;
  typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

  const Normal_optional&
  Normal () const;

  Normal_optional&
  Normal ();

  void
  Normal (const Normal_type& x);

  void
  Normal (const Normal_optional& x);

  void
  Normal (::std::auto_ptr< Normal_type > p);

  // TextureCoordinate
  // 
  typedef ::TextureCoordinate TextureCoordinate_type;
  typedef ::xsd::cxx::tree::optional< TextureCoordinate_type > TextureCoordinate_optional;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate_type, char > TextureCoordinate_traits;

  const TextureCoordinate_optional&
  TextureCoordinate () const;

  TextureCoordinate_optional&
  TextureCoordinate ();

  void
  TextureCoordinate (const TextureCoordinate_type& x);

  void
  TextureCoordinate (const TextureCoordinate_optional& x);

  void
  TextureCoordinate (::std::auto_ptr< TextureCoordinate_type > p);

  // TextureCoordinateGenerator
  // 
  typedef ::TextureCoordinateGenerator TextureCoordinateGenerator_type;
  typedef ::xsd::cxx::tree::optional< TextureCoordinateGenerator_type > TextureCoordinateGenerator_optional;
  typedef ::xsd::cxx::tree::traits< TextureCoordinateGenerator_type, char > TextureCoordinateGenerator_traits;

  const TextureCoordinateGenerator_optional&
  TextureCoordinateGenerator () const;

  TextureCoordinateGenerator_optional&
  TextureCoordinateGenerator ();

  void
  TextureCoordinateGenerator (const TextureCoordinateGenerator_type& x);

  void
  TextureCoordinateGenerator (const TextureCoordinateGenerator_optional& x);

  void
  TextureCoordinateGenerator (::std::auto_ptr< TextureCoordinateGenerator_type > p);

  // MultiTextureCoordinate
  // 
  typedef ::MultiTextureCoordinate MultiTextureCoordinate_type;
  typedef ::xsd::cxx::tree::optional< MultiTextureCoordinate_type > MultiTextureCoordinate_optional;
  typedef ::xsd::cxx::tree::traits< MultiTextureCoordinate_type, char > MultiTextureCoordinate_traits;

  const MultiTextureCoordinate_optional&
  MultiTextureCoordinate () const;

  MultiTextureCoordinate_optional&
  MultiTextureCoordinate ();

  void
  MultiTextureCoordinate (const MultiTextureCoordinate_type& x);

  void
  MultiTextureCoordinate (const MultiTextureCoordinate_optional& x);

  void
  MultiTextureCoordinate (::std::auto_ptr< MultiTextureCoordinate_type > p);

  // NurbsTextureCoordinate
  // 
  typedef ::NurbsTextureCoordinate NurbsTextureCoordinate_type;
  typedef ::xsd::cxx::tree::optional< NurbsTextureCoordinate_type > NurbsTextureCoordinate_optional;
  typedef ::xsd::cxx::tree::traits< NurbsTextureCoordinate_type, char > NurbsTextureCoordinate_traits;

  const NurbsTextureCoordinate_optional&
  NurbsTextureCoordinate () const;

  NurbsTextureCoordinate_optional&
  NurbsTextureCoordinate ();

  void
  NurbsTextureCoordinate (const NurbsTextureCoordinate_type& x);

  void
  NurbsTextureCoordinate (const NurbsTextureCoordinate_optional& x);

  void
  NurbsTextureCoordinate (::std::auto_ptr< NurbsTextureCoordinate_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // FogCoordinate
  // 
  typedef ::FogCoordinate FogCoordinate_type;
  typedef ::xsd::cxx::tree::optional< FogCoordinate_type > FogCoordinate_optional;
  typedef ::xsd::cxx::tree::traits< FogCoordinate_type, char > FogCoordinate_traits;

  const FogCoordinate_optional&
  FogCoordinate () const;

  FogCoordinate_optional&
  FogCoordinate ();

  void
  FogCoordinate (const FogCoordinate_type& x);

  void
  FogCoordinate (const FogCoordinate_optional& x);

  void
  FogCoordinate (::std::auto_ptr< FogCoordinate_type > p);

  // geoSystem
  // 
  typedef ::geoSystemType geoSystem_type;
  typedef ::xsd::cxx::tree::traits< geoSystem_type, char > geoSystem_traits;

  const geoSystem_type&
  geoSystem () const;

  geoSystem_type&
  geoSystem ();

  void
  geoSystem (const geoSystem_type& x);

  void
  geoSystem (::std::auto_ptr< geoSystem_type > p);

  static const geoSystem_type&
  geoSystem_default_value ();

  // geoGridOrigin
  // 
  typedef ::SFVec3d geoGridOrigin_type;
  typedef ::xsd::cxx::tree::traits< geoGridOrigin_type, char > geoGridOrigin_traits;

  const geoGridOrigin_type&
  geoGridOrigin () const;

  geoGridOrigin_type&
  geoGridOrigin ();

  void
  geoGridOrigin (const geoGridOrigin_type& x);

  void
  geoGridOrigin (::std::auto_ptr< geoGridOrigin_type > p);

  static const geoGridOrigin_type&
  geoGridOrigin_default_value ();

  // height
  // 
  typedef ::MFDouble height_type;
  typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

  const height_type&
  height () const;

  height_type&
  height ();

  void
  height (const height_type& x);

  void
  height (::std::auto_ptr< height_type > p);

  static const height_type&
  height_default_value ();

  // ccw
  // 
  typedef ::SFBool ccw_type;
  typedef ::xsd::cxx::tree::traits< ccw_type, char > ccw_traits;

  const ccw_type&
  ccw () const;

  ccw_type&
  ccw ();

  void
  ccw (const ccw_type& x);

  void
  ccw (::std::auto_ptr< ccw_type > p);

  static const ccw_type&
  ccw_default_value ();

  // colorPerVertex
  // 
  typedef ::SFBool colorPerVertex_type;
  typedef ::xsd::cxx::tree::traits< colorPerVertex_type, char > colorPerVertex_traits;

  const colorPerVertex_type&
  colorPerVertex () const;

  colorPerVertex_type&
  colorPerVertex ();

  void
  colorPerVertex (const colorPerVertex_type& x);

  void
  colorPerVertex (::std::auto_ptr< colorPerVertex_type > p);

  static const colorPerVertex_type&
  colorPerVertex_default_value ();

  // creaseAngle
  // 
  typedef ::creaseAngle3 creaseAngle_type;
  typedef ::xsd::cxx::tree::traits< creaseAngle_type, char > creaseAngle_traits;

  const creaseAngle_type&
  creaseAngle () const;

  creaseAngle_type&
  creaseAngle ();

  void
  creaseAngle (const creaseAngle_type& x);

  void
  creaseAngle (::std::auto_ptr< creaseAngle_type > p);

  static const creaseAngle_type&
  creaseAngle_default_value ();

  // normalPerVertex
  // 
  typedef ::SFBool normalPerVertex_type;
  typedef ::xsd::cxx::tree::traits< normalPerVertex_type, char > normalPerVertex_traits;

  const normalPerVertex_type&
  normalPerVertex () const;

  normalPerVertex_type&
  normalPerVertex ();

  void
  normalPerVertex (const normalPerVertex_type& x);

  void
  normalPerVertex (::std::auto_ptr< normalPerVertex_type > p);

  static const normalPerVertex_type&
  normalPerVertex_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // xDimension
  // 
  typedef ::SFInt32 xDimension_type;
  typedef ::xsd::cxx::tree::traits< xDimension_type, char > xDimension_traits;

  const xDimension_type&
  xDimension () const;

  xDimension_type&
  xDimension ();

  void
  xDimension (const xDimension_type& x);

  void
  xDimension (::std::auto_ptr< xDimension_type > p);

  static const xDimension_type&
  xDimension_default_value ();

  // xSpacing
  // 
  typedef ::xSpacing1 xSpacing_type;
  typedef ::xsd::cxx::tree::traits< xSpacing_type, char > xSpacing_traits;

  const xSpacing_type&
  xSpacing () const;

  xSpacing_type&
  xSpacing ();

  void
  xSpacing (const xSpacing_type& x);

  void
  xSpacing (::std::auto_ptr< xSpacing_type > p);

  static const xSpacing_type&
  xSpacing_default_value ();

  // yScale
  // 
  typedef ::yScale yScale_type;
  typedef ::xsd::cxx::tree::traits< yScale_type, char > yScale_traits;

  const yScale_type&
  yScale () const;

  yScale_type&
  yScale ();

  void
  yScale (const yScale_type& x);

  void
  yScale (::std::auto_ptr< yScale_type > p);

  static const yScale_type&
  yScale_default_value ();

  // zDimension
  // 
  typedef ::SFInt32 zDimension_type;
  typedef ::xsd::cxx::tree::traits< zDimension_type, char > zDimension_traits;

  const zDimension_type&
  zDimension () const;

  zDimension_type&
  zDimension ();

  void
  zDimension (const zDimension_type& x);

  void
  zDimension (::std::auto_ptr< zDimension_type > p);

  static const zDimension_type&
  zDimension_default_value ();

  // zSpacing
  // 
  typedef ::zSpacing1 zSpacing_type;
  typedef ::xsd::cxx::tree::traits< zSpacing_type, char > zSpacing_traits;

  const zSpacing_type&
  zSpacing () const;

  zSpacing_type&
  zSpacing ();

  void
  zSpacing (const zSpacing_type& x);

  void
  zSpacing (::std::auto_ptr< zSpacing_type > p);

  static const zSpacing_type&
  zSpacing_default_value ();

  // Constructors.
  //
  GeoElevationGrid ();

  GeoElevationGrid (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  GeoElevationGrid (const GeoElevationGrid& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual GeoElevationGrid*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GeoElevationGrid ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  GeoOrigin_optional GeoOrigin_;
  Color_optional Color_;
  ColorRGBA_optional ColorRGBA_;
  Normal_optional Normal_;
  TextureCoordinate_optional TextureCoordinate_;
  TextureCoordinateGenerator_optional TextureCoordinateGenerator_;
  MultiTextureCoordinate_optional MultiTextureCoordinate_;
  NurbsTextureCoordinate_optional NurbsTextureCoordinate_;
  ProtoInstance_sequence ProtoInstance_;
  FogCoordinate_optional FogCoordinate_;
  ::xsd::cxx::tree::one< geoSystem_type > geoSystem_;
  static const geoSystem_type geoSystem_default_value_;
  ::xsd::cxx::tree::one< geoGridOrigin_type > geoGridOrigin_;
  static const geoGridOrigin_type geoGridOrigin_default_value_;
  ::xsd::cxx::tree::one< height_type > height_;
  static const height_type height_default_value_;
  ::xsd::cxx::tree::one< ccw_type > ccw_;
  static const ccw_type ccw_default_value_;
  ::xsd::cxx::tree::one< colorPerVertex_type > colorPerVertex_;
  static const colorPerVertex_type colorPerVertex_default_value_;
  ::xsd::cxx::tree::one< creaseAngle_type > creaseAngle_;
  static const creaseAngle_type creaseAngle_default_value_;
  ::xsd::cxx::tree::one< normalPerVertex_type > normalPerVertex_;
  static const normalPerVertex_type normalPerVertex_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
  ::xsd::cxx::tree::one< xDimension_type > xDimension_;
  static const xDimension_type xDimension_default_value_;
  ::xsd::cxx::tree::one< xSpacing_type > xSpacing_;
  static const xSpacing_type xSpacing_default_value_;
  ::xsd::cxx::tree::one< yScale_type > yScale_;
  static const yScale_type yScale_default_value_;
  ::xsd::cxx::tree::one< zDimension_type > zDimension_;
  static const zDimension_type zDimension_default_value_;
  ::xsd::cxx::tree::one< zSpacing_type > zSpacing_;
  static const zSpacing_type zSpacing_default_value_;
};

class GeoLocation: public ::X3DGroupingNode
{
  public:
  // geoSystem
  // 
  typedef ::geoSystemType geoSystem_type;
  typedef ::xsd::cxx::tree::traits< geoSystem_type, char > geoSystem_traits;

  const geoSystem_type&
  geoSystem () const;

  geoSystem_type&
  geoSystem ();

  void
  geoSystem (const geoSystem_type& x);

  void
  geoSystem (::std::auto_ptr< geoSystem_type > p);

  static const geoSystem_type&
  geoSystem_default_value ();

  // geoCoords
  // 
  typedef ::SFVec3d geoCoords_type;
  typedef ::xsd::cxx::tree::traits< geoCoords_type, char > geoCoords_traits;

  const geoCoords_type&
  geoCoords () const;

  geoCoords_type&
  geoCoords ();

  void
  geoCoords (const geoCoords_type& x);

  void
  geoCoords (::std::auto_ptr< geoCoords_type > p);

  static const geoCoords_type&
  geoCoords_default_value ();

  // Constructors.
  //
  GeoLocation ();

  GeoLocation (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  GeoLocation (const GeoLocation& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual GeoLocation*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GeoLocation ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< geoSystem_type > geoSystem_;
  static const geoSystem_type geoSystem_default_value_;
  ::xsd::cxx::tree::one< geoCoords_type > geoCoords_;
  static const geoCoords_type geoCoords_default_value_;
};

class GeoLOD: public ::X3DGroupingNode
{
  public:
  // geoSystem
  // 
  typedef ::geoSystemType geoSystem_type;
  typedef ::xsd::cxx::tree::traits< geoSystem_type, char > geoSystem_traits;

  const geoSystem_type&
  geoSystem () const;

  geoSystem_type&
  geoSystem ();

  void
  geoSystem (const geoSystem_type& x);

  void
  geoSystem (::std::auto_ptr< geoSystem_type > p);

  static const geoSystem_type&
  geoSystem_default_value ();

  // rootUrl
  // 
  typedef ::MFString rootUrl_type;
  typedef ::xsd::cxx::tree::optional< rootUrl_type > rootUrl_optional;
  typedef ::xsd::cxx::tree::traits< rootUrl_type, char > rootUrl_traits;

  const rootUrl_optional&
  rootUrl () const;

  rootUrl_optional&
  rootUrl ();

  void
  rootUrl (const rootUrl_type& x);

  void
  rootUrl (const rootUrl_optional& x);

  void
  rootUrl (::std::auto_ptr< rootUrl_type > p);

  // child1Url
  // 
  typedef ::MFString child1Url_type;
  typedef ::xsd::cxx::tree::optional< child1Url_type > child1Url_optional;
  typedef ::xsd::cxx::tree::traits< child1Url_type, char > child1Url_traits;

  const child1Url_optional&
  child1Url () const;

  child1Url_optional&
  child1Url ();

  void
  child1Url (const child1Url_type& x);

  void
  child1Url (const child1Url_optional& x);

  void
  child1Url (::std::auto_ptr< child1Url_type > p);

  // child2Url
  // 
  typedef ::MFString child2Url_type;
  typedef ::xsd::cxx::tree::optional< child2Url_type > child2Url_optional;
  typedef ::xsd::cxx::tree::traits< child2Url_type, char > child2Url_traits;

  const child2Url_optional&
  child2Url () const;

  child2Url_optional&
  child2Url ();

  void
  child2Url (const child2Url_type& x);

  void
  child2Url (const child2Url_optional& x);

  void
  child2Url (::std::auto_ptr< child2Url_type > p);

  // child3Url
  // 
  typedef ::MFString child3Url_type;
  typedef ::xsd::cxx::tree::optional< child3Url_type > child3Url_optional;
  typedef ::xsd::cxx::tree::traits< child3Url_type, char > child3Url_traits;

  const child3Url_optional&
  child3Url () const;

  child3Url_optional&
  child3Url ();

  void
  child3Url (const child3Url_type& x);

  void
  child3Url (const child3Url_optional& x);

  void
  child3Url (::std::auto_ptr< child3Url_type > p);

  // child4Url
  // 
  typedef ::MFString child4Url_type;
  typedef ::xsd::cxx::tree::optional< child4Url_type > child4Url_optional;
  typedef ::xsd::cxx::tree::traits< child4Url_type, char > child4Url_traits;

  const child4Url_optional&
  child4Url () const;

  child4Url_optional&
  child4Url ();

  void
  child4Url (const child4Url_type& x);

  void
  child4Url (const child4Url_optional& x);

  void
  child4Url (::std::auto_ptr< child4Url_type > p);

  // center
  // 
  typedef ::SFVec3d center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::auto_ptr< center_type > p);

  static const center_type&
  center_default_value ();

  // range
  // 
  typedef ::SFFloat range_type;
  typedef ::xsd::cxx::tree::traits< range_type, char > range_traits;

  const range_type&
  range () const;

  range_type&
  range ();

  void
  range (const range_type& x);

  void
  range (::std::auto_ptr< range_type > p);

  static const range_type&
  range_default_value ();

  // Constructors.
  //
  GeoLOD ();

  GeoLOD (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  GeoLOD (const GeoLOD& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual GeoLOD*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GeoLOD ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< geoSystem_type > geoSystem_;
  static const geoSystem_type geoSystem_default_value_;
  rootUrl_optional rootUrl_;
  child1Url_optional child1Url_;
  child2Url_optional child2Url_;
  child3Url_optional child3Url_;
  child4Url_optional child4Url_;
  ::xsd::cxx::tree::one< center_type > center_;
  static const center_type center_default_value_;
  ::xsd::cxx::tree::one< range_type > range_;
  static const range_type range_default_value_;
};

class GeoMetadata: public ::X3DInfoNode
{
  public:
  // GeoCoordinate
  // 
  typedef ::xml_schema::type GeoCoordinate_type;
  typedef ::xsd::cxx::tree::optional< GeoCoordinate_type > GeoCoordinate_optional;
  typedef ::xsd::cxx::tree::traits< GeoCoordinate_type, char > GeoCoordinate_traits;

  const GeoCoordinate_optional&
  GeoCoordinate () const;

  GeoCoordinate_optional&
  GeoCoordinate ();

  void
  GeoCoordinate (const GeoCoordinate_type& x);

  void
  GeoCoordinate (const GeoCoordinate_optional& x);

  void
  GeoCoordinate (::std::auto_ptr< GeoCoordinate_type > p);

  // GeoElevationGrid
  // 
  typedef ::xml_schema::type GeoElevationGrid_type;
  typedef ::xsd::cxx::tree::optional< GeoElevationGrid_type > GeoElevationGrid_optional;
  typedef ::xsd::cxx::tree::traits< GeoElevationGrid_type, char > GeoElevationGrid_traits;

  const GeoElevationGrid_optional&
  GeoElevationGrid () const;

  GeoElevationGrid_optional&
  GeoElevationGrid ();

  void
  GeoElevationGrid (const GeoElevationGrid_type& x);

  void
  GeoElevationGrid (const GeoElevationGrid_optional& x);

  void
  GeoElevationGrid (::std::auto_ptr< GeoElevationGrid_type > p);

  // GeoLocation
  // 
  typedef ::xml_schema::type GeoLocation_type;
  typedef ::xsd::cxx::tree::optional< GeoLocation_type > GeoLocation_optional;
  typedef ::xsd::cxx::tree::traits< GeoLocation_type, char > GeoLocation_traits;

  const GeoLocation_optional&
  GeoLocation () const;

  GeoLocation_optional&
  GeoLocation ();

  void
  GeoLocation (const GeoLocation_type& x);

  void
  GeoLocation (const GeoLocation_optional& x);

  void
  GeoLocation (::std::auto_ptr< GeoLocation_type > p);

  // GeoOrigin
  // 
  typedef ::xml_schema::type GeoOrigin_type;
  typedef ::xsd::cxx::tree::optional< GeoOrigin_type > GeoOrigin_optional;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_optional&
  GeoOrigin () const;

  GeoOrigin_optional&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_type& x);

  void
  GeoOrigin (const GeoOrigin_optional& x);

  void
  GeoOrigin (::std::auto_ptr< GeoOrigin_type > p);

  // GeoLOD
  // 
  typedef ::xml_schema::type GeoLOD_type;
  typedef ::xsd::cxx::tree::optional< GeoLOD_type > GeoLOD_optional;
  typedef ::xsd::cxx::tree::traits< GeoLOD_type, char > GeoLOD_traits;

  const GeoLOD_optional&
  GeoLOD () const;

  GeoLOD_optional&
  GeoLOD ();

  void
  GeoLOD (const GeoLOD_type& x);

  void
  GeoLOD (const GeoLOD_optional& x);

  void
  GeoLOD (::std::auto_ptr< GeoLOD_type > p);

  // GeoPositionInterpolator
  // 
  typedef ::xml_schema::type GeoPositionInterpolator_type;
  typedef ::xsd::cxx::tree::optional< GeoPositionInterpolator_type > GeoPositionInterpolator_optional;
  typedef ::xsd::cxx::tree::traits< GeoPositionInterpolator_type, char > GeoPositionInterpolator_traits;

  const GeoPositionInterpolator_optional&
  GeoPositionInterpolator () const;

  GeoPositionInterpolator_optional&
  GeoPositionInterpolator ();

  void
  GeoPositionInterpolator (const GeoPositionInterpolator_type& x);

  void
  GeoPositionInterpolator (const GeoPositionInterpolator_optional& x);

  void
  GeoPositionInterpolator (::std::auto_ptr< GeoPositionInterpolator_type > p);

  // GeoTouchSensor
  // 
  typedef ::xml_schema::type GeoTouchSensor_type;
  typedef ::xsd::cxx::tree::optional< GeoTouchSensor_type > GeoTouchSensor_optional;
  typedef ::xsd::cxx::tree::traits< GeoTouchSensor_type, char > GeoTouchSensor_traits;

  const GeoTouchSensor_optional&
  GeoTouchSensor () const;

  GeoTouchSensor_optional&
  GeoTouchSensor ();

  void
  GeoTouchSensor (const GeoTouchSensor_type& x);

  void
  GeoTouchSensor (const GeoTouchSensor_optional& x);

  void
  GeoTouchSensor (::std::auto_ptr< GeoTouchSensor_type > p);

  // GeoViewpoint
  // 
  typedef ::xml_schema::type GeoViewpoint_type;
  typedef ::xsd::cxx::tree::optional< GeoViewpoint_type > GeoViewpoint_optional;
  typedef ::xsd::cxx::tree::traits< GeoViewpoint_type, char > GeoViewpoint_traits;

  const GeoViewpoint_optional&
  GeoViewpoint () const;

  GeoViewpoint_optional&
  GeoViewpoint ();

  void
  GeoViewpoint (const GeoViewpoint_type& x);

  void
  GeoViewpoint (const GeoViewpoint_optional& x);

  void
  GeoViewpoint (::std::auto_ptr< GeoViewpoint_type > p);

  // ProtoInstance
  // 
  typedef ::xml_schema::type ProtoInstance_type;
  typedef ::xsd::cxx::tree::optional< ProtoInstance_type > ProtoInstance_optional;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_optional&
  ProtoInstance () const;

  ProtoInstance_optional&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_type& x);

  void
  ProtoInstance (const ProtoInstance_optional& x);

  void
  ProtoInstance (::std::auto_ptr< ProtoInstance_type > p);

  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // data
  // 
  typedef ::xml_schema::idrefs data_type;
  typedef ::xsd::cxx::tree::optional< data_type > data_optional;
  typedef ::xsd::cxx::tree::traits< data_type, char > data_traits;

  const data_optional&
  data () const;

  data_optional&
  data ();

  void
  data (const data_type& x);

  void
  data (const data_optional& x);

  void
  data (::std::auto_ptr< data_type > p);

  // summary
  // 
  typedef ::MFString summary_type;
  typedef ::xsd::cxx::tree::optional< summary_type > summary_optional;
  typedef ::xsd::cxx::tree::traits< summary_type, char > summary_traits;

  const summary_optional&
  summary () const;

  summary_optional&
  summary ();

  void
  summary (const summary_type& x);

  void
  summary (const summary_optional& x);

  void
  summary (::std::auto_ptr< summary_type > p);

  // Constructors.
  //
  GeoMetadata ();

  GeoMetadata (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  GeoMetadata (const GeoMetadata& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual GeoMetadata*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GeoMetadata ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  GeoCoordinate_optional GeoCoordinate_;
  GeoElevationGrid_optional GeoElevationGrid_;
  GeoLocation_optional GeoLocation_;
  GeoOrigin_optional GeoOrigin_;
  GeoLOD_optional GeoLOD_;
  GeoPositionInterpolator_optional GeoPositionInterpolator_;
  GeoTouchSensor_optional GeoTouchSensor_;
  GeoViewpoint_optional GeoViewpoint_;
  ProtoInstance_optional ProtoInstance_;
  url_optional url_;
  data_optional data_;
  summary_optional summary_;
};

class GeoOrigin: public ::X3DNode
{
  public:
  // geoSystem
  // 
  typedef ::geoSystemType geoSystem_type;
  typedef ::xsd::cxx::tree::traits< geoSystem_type, char > geoSystem_traits;

  const geoSystem_type&
  geoSystem () const;

  geoSystem_type&
  geoSystem ();

  void
  geoSystem (const geoSystem_type& x);

  void
  geoSystem (::std::auto_ptr< geoSystem_type > p);

  static const geoSystem_type&
  geoSystem_default_value ();

  // geoCoords
  // 
  typedef ::SFVec3d geoCoords_type;
  typedef ::xsd::cxx::tree::traits< geoCoords_type, char > geoCoords_traits;

  const geoCoords_type&
  geoCoords () const;

  geoCoords_type&
  geoCoords ();

  void
  geoCoords (const geoCoords_type& x);

  void
  geoCoords (::std::auto_ptr< geoCoords_type > p);

  static const geoCoords_type&
  geoCoords_default_value ();

  // rotateYUp
  // 
  typedef ::SFBool rotateYUp_type;
  typedef ::xsd::cxx::tree::traits< rotateYUp_type, char > rotateYUp_traits;

  const rotateYUp_type&
  rotateYUp () const;

  rotateYUp_type&
  rotateYUp ();

  void
  rotateYUp (const rotateYUp_type& x);

  void
  rotateYUp (::std::auto_ptr< rotateYUp_type > p);

  static const rotateYUp_type&
  rotateYUp_default_value ();

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  GeoOrigin ();

  GeoOrigin (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  GeoOrigin (const GeoOrigin& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual GeoOrigin*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GeoOrigin ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< geoSystem_type > geoSystem_;
  static const geoSystem_type geoSystem_default_value_;
  ::xsd::cxx::tree::one< geoCoords_type > geoCoords_;
  static const geoCoords_type geoCoords_default_value_;
  ::xsd::cxx::tree::one< rotateYUp_type > rotateYUp_;
  static const rotateYUp_type rotateYUp_default_value_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class GeoPositionInterpolator: public ::X3DInterpolatorNode
{
  public:
  // GeoOrigin
  // 
  typedef ::GeoOrigin GeoOrigin_type;
  typedef ::xsd::cxx::tree::optional< GeoOrigin_type > GeoOrigin_optional;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_optional&
  GeoOrigin () const;

  GeoOrigin_optional&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_type& x);

  void
  GeoOrigin (const GeoOrigin_optional& x);

  void
  GeoOrigin (::std::auto_ptr< GeoOrigin_type > p);

  // geoSystem
  // 
  typedef ::geoSystemType geoSystem_type;
  typedef ::xsd::cxx::tree::traits< geoSystem_type, char > geoSystem_traits;

  const geoSystem_type&
  geoSystem () const;

  geoSystem_type&
  geoSystem ();

  void
  geoSystem (const geoSystem_type& x);

  void
  geoSystem (::std::auto_ptr< geoSystem_type > p);

  static const geoSystem_type&
  geoSystem_default_value ();

  // keyValue
  // 
  typedef ::MFVec3d keyValue_type;
  typedef ::xsd::cxx::tree::optional< keyValue_type > keyValue_optional;
  typedef ::xsd::cxx::tree::traits< keyValue_type, char > keyValue_traits;

  const keyValue_optional&
  keyValue () const;

  keyValue_optional&
  keyValue ();

  void
  keyValue (const keyValue_type& x);

  void
  keyValue (const keyValue_optional& x);

  void
  keyValue (::std::auto_ptr< keyValue_type > p);

  // Constructors.
  //
  GeoPositionInterpolator ();

  GeoPositionInterpolator (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  GeoPositionInterpolator (const GeoPositionInterpolator& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual GeoPositionInterpolator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GeoPositionInterpolator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  GeoOrigin_optional GeoOrigin_;
  ::xsd::cxx::tree::one< geoSystem_type > geoSystem_;
  static const geoSystem_type geoSystem_default_value_;
  keyValue_optional keyValue_;
};

class GeoTouchSensor: public ::X3DTouchSensorNode
{
  public:
  // GeoOrigin
  // 
  typedef ::GeoOrigin GeoOrigin_type;
  typedef ::xsd::cxx::tree::optional< GeoOrigin_type > GeoOrigin_optional;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_optional&
  GeoOrigin () const;

  GeoOrigin_optional&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_type& x);

  void
  GeoOrigin (const GeoOrigin_optional& x);

  void
  GeoOrigin (::std::auto_ptr< GeoOrigin_type > p);

  // geoSystem
  // 
  typedef ::geoSystemType geoSystem_type;
  typedef ::xsd::cxx::tree::traits< geoSystem_type, char > geoSystem_traits;

  const geoSystem_type&
  geoSystem () const;

  geoSystem_type&
  geoSystem ();

  void
  geoSystem (const geoSystem_type& x);

  void
  geoSystem (::std::auto_ptr< geoSystem_type > p);

  static const geoSystem_type&
  geoSystem_default_value ();

  // Constructors.
  //
  GeoTouchSensor ();

  GeoTouchSensor (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  GeoTouchSensor (const GeoTouchSensor& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual GeoTouchSensor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GeoTouchSensor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  GeoOrigin_optional GeoOrigin_;
  ::xsd::cxx::tree::one< geoSystem_type > geoSystem_;
  static const geoSystem_type geoSystem_default_value_;
};

class GeoViewpoint: public ::X3DBindableNode
{
  public:
  // GeoOrigin
  // 
  typedef ::GeoOrigin GeoOrigin_type;
  typedef ::xsd::cxx::tree::optional< GeoOrigin_type > GeoOrigin_optional;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_optional&
  GeoOrigin () const;

  GeoOrigin_optional&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_type& x);

  void
  GeoOrigin (const GeoOrigin_optional& x);

  void
  GeoOrigin (::std::auto_ptr< GeoOrigin_type > p);

  // geoSystem
  // 
  typedef ::geoSystemType geoSystem_type;
  typedef ::xsd::cxx::tree::traits< geoSystem_type, char > geoSystem_traits;

  const geoSystem_type&
  geoSystem () const;

  geoSystem_type&
  geoSystem ();

  void
  geoSystem (const geoSystem_type& x);

  void
  geoSystem (::std::auto_ptr< geoSystem_type > p);

  static const geoSystem_type&
  geoSystem_default_value ();

  // fieldOfView
  // 
  typedef ::SFFloat fieldOfView_type;
  typedef ::xsd::cxx::tree::traits< fieldOfView_type, char > fieldOfView_traits;

  const fieldOfView_type&
  fieldOfView () const;

  fieldOfView_type&
  fieldOfView ();

  void
  fieldOfView (const fieldOfView_type& x);

  void
  fieldOfView (::std::auto_ptr< fieldOfView_type > p);

  static const fieldOfView_type&
  fieldOfView_default_value ();

  // jump
  // 
  typedef ::SFBool jump_type;
  typedef ::xsd::cxx::tree::traits< jump_type, char > jump_traits;

  const jump_type&
  jump () const;

  jump_type&
  jump ();

  void
  jump (const jump_type& x);

  void
  jump (::std::auto_ptr< jump_type > p);

  static const jump_type&
  jump_default_value ();

  // orientation
  // 
  typedef ::SFRotation orientation_type;
  typedef ::xsd::cxx::tree::traits< orientation_type, char > orientation_traits;

  const orientation_type&
  orientation () const;

  orientation_type&
  orientation ();

  void
  orientation (const orientation_type& x);

  void
  orientation (::std::auto_ptr< orientation_type > p);

  static const orientation_type&
  orientation_default_value ();

  // position
  // 
  typedef ::SFVec3d position_type;
  typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

  const position_type&
  position () const;

  position_type&
  position ();

  void
  position (const position_type& x);

  void
  position (::std::auto_ptr< position_type > p);

  static const position_type&
  position_default_value ();

  // description
  // 
  typedef ::SFString description_type;
  typedef ::xsd::cxx::tree::optional< description_type > description_optional;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_optional&
  description () const;

  description_optional&
  description ();

  void
  description (const description_type& x);

  void
  description (const description_optional& x);

  void
  description (::std::auto_ptr< description_type > p);

  // headlight
  // 
  typedef ::SFBool headlight_type;
  typedef ::xsd::cxx::tree::traits< headlight_type, char > headlight_traits;

  const headlight_type&
  headlight () const;

  headlight_type&
  headlight ();

  void
  headlight (const headlight_type& x);

  void
  headlight (::std::auto_ptr< headlight_type > p);

  static const headlight_type&
  headlight_default_value ();

  // navType
  // 
  typedef ::MFString navType_type;
  typedef ::xsd::cxx::tree::traits< navType_type, char > navType_traits;

  const navType_type&
  navType () const;

  navType_type&
  navType ();

  void
  navType (const navType_type& x);

  void
  navType (::std::auto_ptr< navType_type > p);

  static const navType_type&
  navType_default_value ();

  // speedFactor
  // 
  typedef ::SFFloat speedFactor_type;
  typedef ::xsd::cxx::tree::traits< speedFactor_type, char > speedFactor_traits;

  const speedFactor_type&
  speedFactor () const;

  speedFactor_type&
  speedFactor ();

  void
  speedFactor (const speedFactor_type& x);

  void
  speedFactor (::std::auto_ptr< speedFactor_type > p);

  static const speedFactor_type&
  speedFactor_default_value ();

  // Constructors.
  //
  GeoViewpoint ();

  GeoViewpoint (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  GeoViewpoint (const GeoViewpoint& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual GeoViewpoint*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GeoViewpoint ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  GeoOrigin_optional GeoOrigin_;
  ::xsd::cxx::tree::one< geoSystem_type > geoSystem_;
  static const geoSystem_type geoSystem_default_value_;
  ::xsd::cxx::tree::one< fieldOfView_type > fieldOfView_;
  static const fieldOfView_type fieldOfView_default_value_;
  ::xsd::cxx::tree::one< jump_type > jump_;
  static const jump_type jump_default_value_;
  ::xsd::cxx::tree::one< orientation_type > orientation_;
  static const orientation_type orientation_default_value_;
  ::xsd::cxx::tree::one< position_type > position_;
  static const position_type position_default_value_;
  description_optional description_;
  ::xsd::cxx::tree::one< headlight_type > headlight_;
  static const headlight_type headlight_default_value_;
  ::xsd::cxx::tree::one< navType_type > navType_;
  static const navType_type navType_default_value_;
  ::xsd::cxx::tree::one< speedFactor_type > speedFactor_;
  static const speedFactor_type speedFactor_default_value_;
};

class HAnimDisplacer: public ::X3DGeometricPropertyNode
{
  public:
  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // coordIndex
  // 
  typedef ::MFInt32 coordIndex_type;
  typedef ::xsd::cxx::tree::optional< coordIndex_type > coordIndex_optional;
  typedef ::xsd::cxx::tree::traits< coordIndex_type, char > coordIndex_traits;

  const coordIndex_optional&
  coordIndex () const;

  coordIndex_optional&
  coordIndex ();

  void
  coordIndex (const coordIndex_type& x);

  void
  coordIndex (const coordIndex_optional& x);

  void
  coordIndex (::std::auto_ptr< coordIndex_type > p);

  // displacements
  // 
  typedef ::MFVec3f displacements_type;
  typedef ::xsd::cxx::tree::optional< displacements_type > displacements_optional;
  typedef ::xsd::cxx::tree::traits< displacements_type, char > displacements_traits;

  const displacements_optional&
  displacements () const;

  displacements_optional&
  displacements ();

  void
  displacements (const displacements_type& x);

  void
  displacements (const displacements_optional& x);

  void
  displacements (::std::auto_ptr< displacements_type > p);

  // weight
  // 
  typedef ::SFFloat weight_type;
  typedef ::xsd::cxx::tree::traits< weight_type, char > weight_traits;

  const weight_type&
  weight () const;

  weight_type&
  weight ();

  void
  weight (const weight_type& x);

  void
  weight (::std::auto_ptr< weight_type > p);

  static const weight_type&
  weight_default_value ();

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  HAnimDisplacer ();

  HAnimDisplacer (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  HAnimDisplacer (const HAnimDisplacer& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual HAnimDisplacer*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~HAnimDisplacer ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  name_optional name_;
  coordIndex_optional coordIndex_;
  displacements_optional displacements_;
  ::xsd::cxx::tree::one< weight_type > weight_;
  static const weight_type weight_default_value_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class HAnimHumanoid: public ::X3DHumanoidNode
{
  public:
  // Appearance
  // 
  typedef ::Appearance Appearance_type;
  typedef ::xsd::cxx::tree::sequence< Appearance_type > Appearance_sequence;
  typedef Appearance_sequence::iterator Appearance_iterator;
  typedef Appearance_sequence::const_iterator Appearance_const_iterator;
  typedef ::xsd::cxx::tree::traits< Appearance_type, char > Appearance_traits;

  const Appearance_sequence&
  Appearance () const;

  Appearance_sequence&
  Appearance ();

  void
  Appearance (const Appearance_sequence& s);

  // Background
  // 
  typedef ::Background Background_type;
  typedef ::xsd::cxx::tree::sequence< Background_type > Background_sequence;
  typedef Background_sequence::iterator Background_iterator;
  typedef Background_sequence::const_iterator Background_const_iterator;
  typedef ::xsd::cxx::tree::traits< Background_type, char > Background_traits;

  const Background_sequence&
  Background () const;

  Background_sequence&
  Background ();

  void
  Background (const Background_sequence& s);

  // ColorInterpolator
  // 
  typedef ::ColorInterpolator ColorInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ColorInterpolator_type > ColorInterpolator_sequence;
  typedef ColorInterpolator_sequence::iterator ColorInterpolator_iterator;
  typedef ColorInterpolator_sequence::const_iterator ColorInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ColorInterpolator_type, char > ColorInterpolator_traits;

  const ColorInterpolator_sequence&
  ColorInterpolator () const;

  ColorInterpolator_sequence&
  ColorInterpolator ();

  void
  ColorInterpolator (const ColorInterpolator_sequence& s);

  // CoordinateInterpolator
  // 
  typedef ::CoordinateInterpolator CoordinateInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator_type > CoordinateInterpolator_sequence;
  typedef CoordinateInterpolator_sequence::iterator CoordinateInterpolator_iterator;
  typedef CoordinateInterpolator_sequence::const_iterator CoordinateInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator_type, char > CoordinateInterpolator_traits;

  const CoordinateInterpolator_sequence&
  CoordinateInterpolator () const;

  CoordinateInterpolator_sequence&
  CoordinateInterpolator ();

  void
  CoordinateInterpolator (const CoordinateInterpolator_sequence& s);

  // DirectionalLight
  // 
  typedef ::DirectionalLight DirectionalLight_type;
  typedef ::xsd::cxx::tree::sequence< DirectionalLight_type > DirectionalLight_sequence;
  typedef DirectionalLight_sequence::iterator DirectionalLight_iterator;
  typedef DirectionalLight_sequence::const_iterator DirectionalLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< DirectionalLight_type, char > DirectionalLight_traits;

  const DirectionalLight_sequence&
  DirectionalLight () const;

  DirectionalLight_sequence&
  DirectionalLight ();

  void
  DirectionalLight (const DirectionalLight_sequence& s);

  // Group
  // 
  typedef ::Group Group_type;
  typedef ::xsd::cxx::tree::sequence< Group_type > Group_sequence;
  typedef Group_sequence::iterator Group_iterator;
  typedef Group_sequence::const_iterator Group_const_iterator;
  typedef ::xsd::cxx::tree::traits< Group_type, char > Group_traits;

  const Group_sequence&
  Group () const;

  Group_sequence&
  Group ();

  void
  Group (const Group_sequence& s);

  // NavigationInfo
  // 
  typedef ::NavigationInfo NavigationInfo_type;
  typedef ::xsd::cxx::tree::sequence< NavigationInfo_type > NavigationInfo_sequence;
  typedef NavigationInfo_sequence::iterator NavigationInfo_iterator;
  typedef NavigationInfo_sequence::const_iterator NavigationInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< NavigationInfo_type, char > NavigationInfo_traits;

  const NavigationInfo_sequence&
  NavigationInfo () const;

  NavigationInfo_sequence&
  NavigationInfo ();

  void
  NavigationInfo (const NavigationInfo_sequence& s);

  // NormalInterpolator
  // 
  typedef ::NormalInterpolator NormalInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NormalInterpolator_type > NormalInterpolator_sequence;
  typedef NormalInterpolator_sequence::iterator NormalInterpolator_iterator;
  typedef NormalInterpolator_sequence::const_iterator NormalInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NormalInterpolator_type, char > NormalInterpolator_traits;

  const NormalInterpolator_sequence&
  NormalInterpolator () const;

  NormalInterpolator_sequence&
  NormalInterpolator ();

  void
  NormalInterpolator (const NormalInterpolator_sequence& s);

  // OrientationInterpolator
  // 
  typedef ::OrientationInterpolator OrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< OrientationInterpolator_type > OrientationInterpolator_sequence;
  typedef OrientationInterpolator_sequence::iterator OrientationInterpolator_iterator;
  typedef OrientationInterpolator_sequence::const_iterator OrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< OrientationInterpolator_type, char > OrientationInterpolator_traits;

  const OrientationInterpolator_sequence&
  OrientationInterpolator () const;

  OrientationInterpolator_sequence&
  OrientationInterpolator ();

  void
  OrientationInterpolator (const OrientationInterpolator_sequence& s);

  // PositionInterpolator
  // 
  typedef ::PositionInterpolator PositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator_type > PositionInterpolator_sequence;
  typedef PositionInterpolator_sequence::iterator PositionInterpolator_iterator;
  typedef PositionInterpolator_sequence::const_iterator PositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator_type, char > PositionInterpolator_traits;

  const PositionInterpolator_sequence&
  PositionInterpolator () const;

  PositionInterpolator_sequence&
  PositionInterpolator ();

  void
  PositionInterpolator (const PositionInterpolator_sequence& s);

  // ScalarInterpolator
  // 
  typedef ::ScalarInterpolator ScalarInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< ScalarInterpolator_type > ScalarInterpolator_sequence;
  typedef ScalarInterpolator_sequence::iterator ScalarInterpolator_iterator;
  typedef ScalarInterpolator_sequence::const_iterator ScalarInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< ScalarInterpolator_type, char > ScalarInterpolator_traits;

  const ScalarInterpolator_sequence&
  ScalarInterpolator () const;

  ScalarInterpolator_sequence&
  ScalarInterpolator ();

  void
  ScalarInterpolator (const ScalarInterpolator_sequence& s);

  // Shape
  // 
  typedef ::Shape Shape_type;
  typedef ::xsd::cxx::tree::sequence< Shape_type > Shape_sequence;
  typedef Shape_sequence::iterator Shape_iterator;
  typedef Shape_sequence::const_iterator Shape_const_iterator;
  typedef ::xsd::cxx::tree::traits< Shape_type, char > Shape_traits;

  const Shape_sequence&
  Shape () const;

  Shape_sequence&
  Shape ();

  void
  Shape (const Shape_sequence& s);

  // TimeSensor
  // 
  typedef ::TimeSensor TimeSensor_type;
  typedef ::xsd::cxx::tree::sequence< TimeSensor_type > TimeSensor_sequence;
  typedef TimeSensor_sequence::iterator TimeSensor_iterator;
  typedef TimeSensor_sequence::const_iterator TimeSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeSensor_type, char > TimeSensor_traits;

  const TimeSensor_sequence&
  TimeSensor () const;

  TimeSensor_sequence&
  TimeSensor ();

  void
  TimeSensor (const TimeSensor_sequence& s);

  // Transform
  // 
  typedef ::Transform Transform_type;
  typedef ::xsd::cxx::tree::sequence< Transform_type > Transform_sequence;
  typedef Transform_sequence::iterator Transform_iterator;
  typedef Transform_sequence::const_iterator Transform_const_iterator;
  typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

  const Transform_sequence&
  Transform () const;

  Transform_sequence&
  Transform ();

  void
  Transform (const Transform_sequence& s);

  // Viewpoint
  // 
  typedef ::Viewpoint Viewpoint_type;
  typedef ::xsd::cxx::tree::sequence< Viewpoint_type > Viewpoint_sequence;
  typedef Viewpoint_sequence::iterator Viewpoint_iterator;
  typedef Viewpoint_sequence::const_iterator Viewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< Viewpoint_type, char > Viewpoint_traits;

  const Viewpoint_sequence&
  Viewpoint () const;

  Viewpoint_sequence&
  Viewpoint ();

  void
  Viewpoint (const Viewpoint_sequence& s);

  // WorldInfo
  // 
  typedef ::WorldInfo WorldInfo_type;
  typedef ::xsd::cxx::tree::sequence< WorldInfo_type > WorldInfo_sequence;
  typedef WorldInfo_sequence::iterator WorldInfo_iterator;
  typedef WorldInfo_sequence::const_iterator WorldInfo_const_iterator;
  typedef ::xsd::cxx::tree::traits< WorldInfo_type, char > WorldInfo_traits;

  const WorldInfo_sequence&
  WorldInfo () const;

  WorldInfo_sequence&
  WorldInfo ();

  void
  WorldInfo (const WorldInfo_sequence& s);

  // Anchor
  // 
  typedef ::Anchor Anchor_type;
  typedef ::xsd::cxx::tree::sequence< Anchor_type > Anchor_sequence;
  typedef Anchor_sequence::iterator Anchor_iterator;
  typedef Anchor_sequence::const_iterator Anchor_const_iterator;
  typedef ::xsd::cxx::tree::traits< Anchor_type, char > Anchor_traits;

  const Anchor_sequence&
  Anchor () const;

  Anchor_sequence&
  Anchor ();

  void
  Anchor (const Anchor_sequence& s);

  // BooleanFilter
  // 
  typedef ::BooleanFilter BooleanFilter_type;
  typedef ::xsd::cxx::tree::sequence< BooleanFilter_type > BooleanFilter_sequence;
  typedef BooleanFilter_sequence::iterator BooleanFilter_iterator;
  typedef BooleanFilter_sequence::const_iterator BooleanFilter_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanFilter_type, char > BooleanFilter_traits;

  const BooleanFilter_sequence&
  BooleanFilter () const;

  BooleanFilter_sequence&
  BooleanFilter ();

  void
  BooleanFilter (const BooleanFilter_sequence& s);

  // BooleanSequencer
  // 
  typedef ::BooleanSequencer BooleanSequencer_type;
  typedef ::xsd::cxx::tree::sequence< BooleanSequencer_type > BooleanSequencer_sequence;
  typedef BooleanSequencer_sequence::iterator BooleanSequencer_iterator;
  typedef BooleanSequencer_sequence::const_iterator BooleanSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanSequencer_type, char > BooleanSequencer_traits;

  const BooleanSequencer_sequence&
  BooleanSequencer () const;

  BooleanSequencer_sequence&
  BooleanSequencer ();

  void
  BooleanSequencer (const BooleanSequencer_sequence& s);

  // BooleanToggle
  // 
  typedef ::BooleanToggle BooleanToggle_type;
  typedef ::xsd::cxx::tree::sequence< BooleanToggle_type > BooleanToggle_sequence;
  typedef BooleanToggle_sequence::iterator BooleanToggle_iterator;
  typedef BooleanToggle_sequence::const_iterator BooleanToggle_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanToggle_type, char > BooleanToggle_traits;

  const BooleanToggle_sequence&
  BooleanToggle () const;

  BooleanToggle_sequence&
  BooleanToggle ();

  void
  BooleanToggle (const BooleanToggle_sequence& s);

  // BooleanTrigger
  // 
  typedef ::BooleanTrigger BooleanTrigger_type;
  typedef ::xsd::cxx::tree::sequence< BooleanTrigger_type > BooleanTrigger_sequence;
  typedef BooleanTrigger_sequence::iterator BooleanTrigger_iterator;
  typedef BooleanTrigger_sequence::const_iterator BooleanTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< BooleanTrigger_type, char > BooleanTrigger_traits;

  const BooleanTrigger_sequence&
  BooleanTrigger () const;

  BooleanTrigger_sequence&
  BooleanTrigger ();

  void
  BooleanTrigger (const BooleanTrigger_sequence& s);

  // CylinderSensor
  // 
  typedef ::CylinderSensor CylinderSensor_type;
  typedef ::xsd::cxx::tree::sequence< CylinderSensor_type > CylinderSensor_sequence;
  typedef CylinderSensor_sequence::iterator CylinderSensor_iterator;
  typedef CylinderSensor_sequence::const_iterator CylinderSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< CylinderSensor_type, char > CylinderSensor_traits;

  const CylinderSensor_sequence&
  CylinderSensor () const;

  CylinderSensor_sequence&
  CylinderSensor ();

  void
  CylinderSensor (const CylinderSensor_sequence& s);

  // Inline
  // 
  typedef ::Inline Inline_type;
  typedef ::xsd::cxx::tree::sequence< Inline_type > Inline_sequence;
  typedef Inline_sequence::iterator Inline_iterator;
  typedef Inline_sequence::const_iterator Inline_const_iterator;
  typedef ::xsd::cxx::tree::traits< Inline_type, char > Inline_traits;

  const Inline_sequence&
  Inline () const;

  Inline_sequence&
  Inline ();

  void
  Inline (const Inline_sequence& s);

  // IntegerSequencer
  // 
  typedef ::IntegerSequencer IntegerSequencer_type;
  typedef ::xsd::cxx::tree::sequence< IntegerSequencer_type > IntegerSequencer_sequence;
  typedef IntegerSequencer_sequence::iterator IntegerSequencer_iterator;
  typedef IntegerSequencer_sequence::const_iterator IntegerSequencer_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerSequencer_type, char > IntegerSequencer_traits;

  const IntegerSequencer_sequence&
  IntegerSequencer () const;

  IntegerSequencer_sequence&
  IntegerSequencer ();

  void
  IntegerSequencer (const IntegerSequencer_sequence& s);

  // IntegerTrigger
  // 
  typedef ::IntegerTrigger IntegerTrigger_type;
  typedef ::xsd::cxx::tree::sequence< IntegerTrigger_type > IntegerTrigger_sequence;
  typedef IntegerTrigger_sequence::iterator IntegerTrigger_iterator;
  typedef IntegerTrigger_sequence::const_iterator IntegerTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< IntegerTrigger_type, char > IntegerTrigger_traits;

  const IntegerTrigger_sequence&
  IntegerTrigger () const;

  IntegerTrigger_sequence&
  IntegerTrigger ();

  void
  IntegerTrigger (const IntegerTrigger_sequence& s);

  // KeySensor
  // 
  typedef ::KeySensor KeySensor_type;
  typedef ::xsd::cxx::tree::sequence< KeySensor_type > KeySensor_sequence;
  typedef KeySensor_sequence::iterator KeySensor_iterator;
  typedef KeySensor_sequence::const_iterator KeySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< KeySensor_type, char > KeySensor_traits;

  const KeySensor_sequence&
  KeySensor () const;

  KeySensor_sequence&
  KeySensor ();

  void
  KeySensor (const KeySensor_sequence& s);

  // PlaneSensor
  // 
  typedef ::PlaneSensor PlaneSensor_type;
  typedef ::xsd::cxx::tree::sequence< PlaneSensor_type > PlaneSensor_sequence;
  typedef PlaneSensor_sequence::iterator PlaneSensor_iterator;
  typedef PlaneSensor_sequence::const_iterator PlaneSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< PlaneSensor_type, char > PlaneSensor_traits;

  const PlaneSensor_sequence&
  PlaneSensor () const;

  PlaneSensor_sequence&
  PlaneSensor ();

  void
  PlaneSensor (const PlaneSensor_sequence& s);

  // PointLight
  // 
  typedef ::PointLight PointLight_type;
  typedef ::xsd::cxx::tree::sequence< PointLight_type > PointLight_sequence;
  typedef PointLight_sequence::iterator PointLight_iterator;
  typedef PointLight_sequence::const_iterator PointLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< PointLight_type, char > PointLight_traits;

  const PointLight_sequence&
  PointLight () const;

  PointLight_sequence&
  PointLight ();

  void
  PointLight (const PointLight_sequence& s);

  // ProximitySensor
  // 
  typedef ::ProximitySensor ProximitySensor_type;
  typedef ::xsd::cxx::tree::sequence< ProximitySensor_type > ProximitySensor_sequence;
  typedef ProximitySensor_sequence::iterator ProximitySensor_iterator;
  typedef ProximitySensor_sequence::const_iterator ProximitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProximitySensor_type, char > ProximitySensor_traits;

  const ProximitySensor_sequence&
  ProximitySensor () const;

  ProximitySensor_sequence&
  ProximitySensor ();

  void
  ProximitySensor (const ProximitySensor_sequence& s);

  // SphereSensor
  // 
  typedef ::SphereSensor SphereSensor_type;
  typedef ::xsd::cxx::tree::sequence< SphereSensor_type > SphereSensor_sequence;
  typedef SphereSensor_sequence::iterator SphereSensor_iterator;
  typedef SphereSensor_sequence::const_iterator SphereSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< SphereSensor_type, char > SphereSensor_traits;

  const SphereSensor_sequence&
  SphereSensor () const;

  SphereSensor_sequence&
  SphereSensor ();

  void
  SphereSensor (const SphereSensor_sequence& s);

  // SpotLight
  // 
  typedef ::SpotLight SpotLight_type;
  typedef ::xsd::cxx::tree::sequence< SpotLight_type > SpotLight_sequence;
  typedef SpotLight_sequence::iterator SpotLight_iterator;
  typedef SpotLight_sequence::const_iterator SpotLight_const_iterator;
  typedef ::xsd::cxx::tree::traits< SpotLight_type, char > SpotLight_traits;

  const SpotLight_sequence&
  SpotLight () const;

  SpotLight_sequence&
  SpotLight ();

  void
  SpotLight (const SpotLight_sequence& s);

  // StringSensor
  // 
  typedef ::StringSensor StringSensor_type;
  typedef ::xsd::cxx::tree::sequence< StringSensor_type > StringSensor_sequence;
  typedef StringSensor_sequence::iterator StringSensor_iterator;
  typedef StringSensor_sequence::const_iterator StringSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< StringSensor_type, char > StringSensor_traits;

  const StringSensor_sequence&
  StringSensor () const;

  StringSensor_sequence&
  StringSensor ();

  void
  StringSensor (const StringSensor_sequence& s);

  // Switch
  // 
  typedef ::Switch Switch_type;
  typedef ::xsd::cxx::tree::sequence< Switch_type > Switch_sequence;
  typedef Switch_sequence::iterator Switch_iterator;
  typedef Switch_sequence::const_iterator Switch_const_iterator;
  typedef ::xsd::cxx::tree::traits< Switch_type, char > Switch_traits;

  const Switch_sequence&
  Switch () const;

  Switch_sequence&
  Switch ();

  void
  Switch (const Switch_sequence& s);

  // TimeTrigger
  // 
  typedef ::TimeTrigger TimeTrigger_type;
  typedef ::xsd::cxx::tree::sequence< TimeTrigger_type > TimeTrigger_sequence;
  typedef TimeTrigger_sequence::iterator TimeTrigger_iterator;
  typedef TimeTrigger_sequence::const_iterator TimeTrigger_const_iterator;
  typedef ::xsd::cxx::tree::traits< TimeTrigger_type, char > TimeTrigger_traits;

  const TimeTrigger_sequence&
  TimeTrigger () const;

  TimeTrigger_sequence&
  TimeTrigger ();

  void
  TimeTrigger (const TimeTrigger_sequence& s);

  // TouchSensor
  // 
  typedef ::TouchSensor TouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< TouchSensor_type > TouchSensor_sequence;
  typedef TouchSensor_sequence::iterator TouchSensor_iterator;
  typedef TouchSensor_sequence::const_iterator TouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< TouchSensor_type, char > TouchSensor_traits;

  const TouchSensor_sequence&
  TouchSensor () const;

  TouchSensor_sequence&
  TouchSensor ();

  void
  TouchSensor (const TouchSensor_sequence& s);

  // AudioClip
  // 
  typedef ::AudioClip AudioClip_type;
  typedef ::xsd::cxx::tree::sequence< AudioClip_type > AudioClip_sequence;
  typedef AudioClip_sequence::iterator AudioClip_iterator;
  typedef AudioClip_sequence::const_iterator AudioClip_const_iterator;
  typedef ::xsd::cxx::tree::traits< AudioClip_type, char > AudioClip_traits;

  const AudioClip_sequence&
  AudioClip () const;

  AudioClip_sequence&
  AudioClip ();

  void
  AudioClip (const AudioClip_sequence& s);

  // Billboard
  // 
  typedef ::Billboard Billboard_type;
  typedef ::xsd::cxx::tree::sequence< Billboard_type > Billboard_sequence;
  typedef Billboard_sequence::iterator Billboard_iterator;
  typedef Billboard_sequence::const_iterator Billboard_const_iterator;
  typedef ::xsd::cxx::tree::traits< Billboard_type, char > Billboard_traits;

  const Billboard_sequence&
  Billboard () const;

  Billboard_sequence&
  Billboard ();

  void
  Billboard (const Billboard_sequence& s);

  // Collision
  // 
  typedef ::Collision Collision_type;
  typedef ::xsd::cxx::tree::sequence< Collision_type > Collision_sequence;
  typedef Collision_sequence::iterator Collision_iterator;
  typedef Collision_sequence::const_iterator Collision_const_iterator;
  typedef ::xsd::cxx::tree::traits< Collision_type, char > Collision_traits;

  const Collision_sequence&
  Collision () const;

  Collision_sequence&
  Collision ();

  void
  Collision (const Collision_sequence& s);

  // Fog
  // 
  typedef ::Fog Fog_type;
  typedef ::xsd::cxx::tree::sequence< Fog_type > Fog_sequence;
  typedef Fog_sequence::iterator Fog_iterator;
  typedef Fog_sequence::const_iterator Fog_const_iterator;
  typedef ::xsd::cxx::tree::traits< Fog_type, char > Fog_traits;

  const Fog_sequence&
  Fog () const;

  Fog_sequence&
  Fog ();

  void
  Fog (const Fog_sequence& s);

  // LoadSensor
  // 
  typedef ::LoadSensor LoadSensor_type;
  typedef ::xsd::cxx::tree::sequence< LoadSensor_type > LoadSensor_sequence;
  typedef LoadSensor_sequence::iterator LoadSensor_iterator;
  typedef LoadSensor_sequence::const_iterator LoadSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< LoadSensor_type, char > LoadSensor_traits;

  const LoadSensor_sequence&
  LoadSensor () const;

  LoadSensor_sequence&
  LoadSensor ();

  void
  LoadSensor (const LoadSensor_sequence& s);

  // LocalFog
  // 
  typedef ::LocalFog LocalFog_type;
  typedef ::xsd::cxx::tree::sequence< LocalFog_type > LocalFog_sequence;
  typedef LocalFog_sequence::iterator LocalFog_iterator;
  typedef LocalFog_sequence::const_iterator LocalFog_const_iterator;
  typedef ::xsd::cxx::tree::traits< LocalFog_type, char > LocalFog_traits;

  const LocalFog_sequence&
  LocalFog () const;

  LocalFog_sequence&
  LocalFog ();

  void
  LocalFog (const LocalFog_sequence& s);

  // LOD
  // 
  typedef ::LOD LOD_type;
  typedef ::xsd::cxx::tree::sequence< LOD_type > LOD_sequence;
  typedef LOD_sequence::iterator LOD_iterator;
  typedef LOD_sequence::const_iterator LOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< LOD_type, char > LOD_traits;

  const LOD_sequence&
  LOD () const;

  LOD_sequence&
  LOD ();

  void
  LOD (const LOD_sequence& s);

  // Script
  // 
  typedef ::Script Script_type;
  typedef ::xsd::cxx::tree::sequence< Script_type > Script_sequence;
  typedef Script_sequence::iterator Script_iterator;
  typedef Script_sequence::const_iterator Script_const_iterator;
  typedef ::xsd::cxx::tree::traits< Script_type, char > Script_traits;

  const Script_sequence&
  Script () const;

  Script_sequence&
  Script ();

  void
  Script (const Script_sequence& s);

  // Sound
  // 
  typedef ::Sound Sound_type;
  typedef ::xsd::cxx::tree::sequence< Sound_type > Sound_sequence;
  typedef Sound_sequence::iterator Sound_iterator;
  typedef Sound_sequence::const_iterator Sound_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sound_type, char > Sound_traits;

  const Sound_sequence&
  Sound () const;

  Sound_sequence&
  Sound ();

  void
  Sound (const Sound_sequence& s);

  // VisibilitySensor
  // 
  typedef ::VisibilitySensor VisibilitySensor_type;
  typedef ::xsd::cxx::tree::sequence< VisibilitySensor_type > VisibilitySensor_sequence;
  typedef VisibilitySensor_sequence::iterator VisibilitySensor_iterator;
  typedef VisibilitySensor_sequence::const_iterator VisibilitySensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< VisibilitySensor_type, char > VisibilitySensor_traits;

  const VisibilitySensor_sequence&
  VisibilitySensor () const;

  VisibilitySensor_sequence&
  VisibilitySensor ();

  void
  VisibilitySensor (const VisibilitySensor_sequence& s);

  // CoordinateInterpolator2D
  // 
  typedef ::CoordinateInterpolator2D CoordinateInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateInterpolator2D_type > CoordinateInterpolator2D_sequence;
  typedef CoordinateInterpolator2D_sequence::iterator CoordinateInterpolator2D_iterator;
  typedef CoordinateInterpolator2D_sequence::const_iterator CoordinateInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateInterpolator2D_type, char > CoordinateInterpolator2D_traits;

  const CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D () const;

  CoordinateInterpolator2D_sequence&
  CoordinateInterpolator2D ();

  void
  CoordinateInterpolator2D (const CoordinateInterpolator2D_sequence& s);

  // PositionInterpolator2D
  // 
  typedef ::PositionInterpolator2D PositionInterpolator2D_type;
  typedef ::xsd::cxx::tree::sequence< PositionInterpolator2D_type > PositionInterpolator2D_sequence;
  typedef PositionInterpolator2D_sequence::iterator PositionInterpolator2D_iterator;
  typedef PositionInterpolator2D_sequence::const_iterator PositionInterpolator2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< PositionInterpolator2D_type, char > PositionInterpolator2D_traits;

  const PositionInterpolator2D_sequence&
  PositionInterpolator2D () const;

  PositionInterpolator2D_sequence&
  PositionInterpolator2D ();

  void
  PositionInterpolator2D (const PositionInterpolator2D_sequence& s);

  // StaticGroup
  // 
  typedef ::StaticGroup StaticGroup_type;
  typedef ::xsd::cxx::tree::sequence< StaticGroup_type > StaticGroup_sequence;
  typedef StaticGroup_sequence::iterator StaticGroup_iterator;
  typedef StaticGroup_sequence::const_iterator StaticGroup_const_iterator;
  typedef ::xsd::cxx::tree::traits< StaticGroup_type, char > StaticGroup_traits;

  const StaticGroup_sequence&
  StaticGroup () const;

  StaticGroup_sequence&
  StaticGroup ();

  void
  StaticGroup (const StaticGroup_sequence& s);

  // CADAssembly
  // 
  typedef ::CADAssembly CADAssembly_type;
  typedef ::xsd::cxx::tree::sequence< CADAssembly_type > CADAssembly_sequence;
  typedef CADAssembly_sequence::iterator CADAssembly_iterator;
  typedef CADAssembly_sequence::const_iterator CADAssembly_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADAssembly_type, char > CADAssembly_traits;

  const CADAssembly_sequence&
  CADAssembly () const;

  CADAssembly_sequence&
  CADAssembly ();

  void
  CADAssembly (const CADAssembly_sequence& s);

  // CADLayer
  // 
  typedef ::CADLayer CADLayer_type;
  typedef ::xsd::cxx::tree::sequence< CADLayer_type > CADLayer_sequence;
  typedef CADLayer_sequence::iterator CADLayer_iterator;
  typedef CADLayer_sequence::const_iterator CADLayer_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADLayer_type, char > CADLayer_traits;

  const CADLayer_sequence&
  CADLayer () const;

  CADLayer_sequence&
  CADLayer ();

  void
  CADLayer (const CADLayer_sequence& s);

  // EspduTransform
  // 
  typedef ::EspduTransform EspduTransform_type;
  typedef ::xsd::cxx::tree::sequence< EspduTransform_type > EspduTransform_sequence;
  typedef EspduTransform_sequence::iterator EspduTransform_iterator;
  typedef EspduTransform_sequence::const_iterator EspduTransform_const_iterator;
  typedef ::xsd::cxx::tree::traits< EspduTransform_type, char > EspduTransform_traits;

  const EspduTransform_sequence&
  EspduTransform () const;

  EspduTransform_sequence&
  EspduTransform ();

  void
  EspduTransform (const EspduTransform_sequence& s);

  // ReceiverPdu
  // 
  typedef ::ReceiverPdu ReceiverPdu_type;
  typedef ::xsd::cxx::tree::sequence< ReceiverPdu_type > ReceiverPdu_sequence;
  typedef ReceiverPdu_sequence::iterator ReceiverPdu_iterator;
  typedef ReceiverPdu_sequence::const_iterator ReceiverPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< ReceiverPdu_type, char > ReceiverPdu_traits;

  const ReceiverPdu_sequence&
  ReceiverPdu () const;

  ReceiverPdu_sequence&
  ReceiverPdu ();

  void
  ReceiverPdu (const ReceiverPdu_sequence& s);

  // SignalPdu
  // 
  typedef ::SignalPdu SignalPdu_type;
  typedef ::xsd::cxx::tree::sequence< SignalPdu_type > SignalPdu_sequence;
  typedef SignalPdu_sequence::iterator SignalPdu_iterator;
  typedef SignalPdu_sequence::const_iterator SignalPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< SignalPdu_type, char > SignalPdu_traits;

  const SignalPdu_sequence&
  SignalPdu () const;

  SignalPdu_sequence&
  SignalPdu ();

  void
  SignalPdu (const SignalPdu_sequence& s);

  // TransmitterPdu
  // 
  typedef ::TransmitterPdu TransmitterPdu_type;
  typedef ::xsd::cxx::tree::sequence< TransmitterPdu_type > TransmitterPdu_sequence;
  typedef TransmitterPdu_sequence::iterator TransmitterPdu_iterator;
  typedef TransmitterPdu_sequence::const_iterator TransmitterPdu_const_iterator;
  typedef ::xsd::cxx::tree::traits< TransmitterPdu_type, char > TransmitterPdu_traits;

  const TransmitterPdu_sequence&
  TransmitterPdu () const;

  TransmitterPdu_sequence&
  TransmitterPdu ();

  void
  TransmitterPdu (const TransmitterPdu_sequence& s);

  // GeoLocation
  // 
  typedef ::GeoLocation GeoLocation_type;
  typedef ::xsd::cxx::tree::sequence< GeoLocation_type > GeoLocation_sequence;
  typedef GeoLocation_sequence::iterator GeoLocation_iterator;
  typedef GeoLocation_sequence::const_iterator GeoLocation_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLocation_type, char > GeoLocation_traits;

  const GeoLocation_sequence&
  GeoLocation () const;

  GeoLocation_sequence&
  GeoLocation ();

  void
  GeoLocation (const GeoLocation_sequence& s);

  // GeoLOD
  // 
  typedef ::GeoLOD GeoLOD_type;
  typedef ::xsd::cxx::tree::sequence< GeoLOD_type > GeoLOD_sequence;
  typedef GeoLOD_sequence::iterator GeoLOD_iterator;
  typedef GeoLOD_sequence::const_iterator GeoLOD_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoLOD_type, char > GeoLOD_traits;

  const GeoLOD_sequence&
  GeoLOD () const;

  GeoLOD_sequence&
  GeoLOD ();

  void
  GeoLOD (const GeoLOD_sequence& s);

  // GeoMetadata
  // 
  typedef ::GeoMetadata GeoMetadata_type;
  typedef ::xsd::cxx::tree::sequence< GeoMetadata_type > GeoMetadata_sequence;
  typedef GeoMetadata_sequence::iterator GeoMetadata_iterator;
  typedef GeoMetadata_sequence::const_iterator GeoMetadata_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoMetadata_type, char > GeoMetadata_traits;

  const GeoMetadata_sequence&
  GeoMetadata () const;

  GeoMetadata_sequence&
  GeoMetadata ();

  void
  GeoMetadata (const GeoMetadata_sequence& s);

  // GeoOrigin
  // 
  typedef ::GeoOrigin GeoOrigin_type;
  typedef ::xsd::cxx::tree::sequence< GeoOrigin_type > GeoOrigin_sequence;
  typedef GeoOrigin_sequence::iterator GeoOrigin_iterator;
  typedef GeoOrigin_sequence::const_iterator GeoOrigin_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoOrigin_type, char > GeoOrigin_traits;

  const GeoOrigin_sequence&
  GeoOrigin () const;

  GeoOrigin_sequence&
  GeoOrigin ();

  void
  GeoOrigin (const GeoOrigin_sequence& s);

  // GeoPositionInterpolator
  // 
  typedef ::GeoPositionInterpolator GeoPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< GeoPositionInterpolator_type > GeoPositionInterpolator_sequence;
  typedef GeoPositionInterpolator_sequence::iterator GeoPositionInterpolator_iterator;
  typedef GeoPositionInterpolator_sequence::const_iterator GeoPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoPositionInterpolator_type, char > GeoPositionInterpolator_traits;

  const GeoPositionInterpolator_sequence&
  GeoPositionInterpolator () const;

  GeoPositionInterpolator_sequence&
  GeoPositionInterpolator ();

  void
  GeoPositionInterpolator (const GeoPositionInterpolator_sequence& s);

  // GeoTouchSensor
  // 
  typedef ::GeoTouchSensor GeoTouchSensor_type;
  typedef ::xsd::cxx::tree::sequence< GeoTouchSensor_type > GeoTouchSensor_sequence;
  typedef GeoTouchSensor_sequence::iterator GeoTouchSensor_iterator;
  typedef GeoTouchSensor_sequence::const_iterator GeoTouchSensor_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoTouchSensor_type, char > GeoTouchSensor_traits;

  const GeoTouchSensor_sequence&
  GeoTouchSensor () const;

  GeoTouchSensor_sequence&
  GeoTouchSensor ();

  void
  GeoTouchSensor (const GeoTouchSensor_sequence& s);

  // GeoViewpoint
  // 
  typedef ::GeoViewpoint GeoViewpoint_type;
  typedef ::xsd::cxx::tree::sequence< GeoViewpoint_type > GeoViewpoint_sequence;
  typedef GeoViewpoint_sequence::iterator GeoViewpoint_iterator;
  typedef GeoViewpoint_sequence::const_iterator GeoViewpoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< GeoViewpoint_type, char > GeoViewpoint_traits;

  const GeoViewpoint_sequence&
  GeoViewpoint () const;

  GeoViewpoint_sequence&
  GeoViewpoint ();

  void
  GeoViewpoint (const GeoViewpoint_sequence& s);

  // HAnimHumanoid
  // 
  typedef ::HAnimHumanoid HAnimHumanoid1_type;
  typedef ::xsd::cxx::tree::sequence< HAnimHumanoid1_type > HAnimHumanoid1_sequence;
  typedef HAnimHumanoid1_sequence::iterator HAnimHumanoid1_iterator;
  typedef HAnimHumanoid1_sequence::const_iterator HAnimHumanoid1_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimHumanoid1_type, char > HAnimHumanoid1_traits;

  const HAnimHumanoid1_sequence&
  HAnimHumanoid1 () const;

  HAnimHumanoid1_sequence&
  HAnimHumanoid1 ();

  void
  HAnimHumanoid1 (const HAnimHumanoid1_sequence& s);

  // HAnimJoint
  // 
  typedef ::HAnimJoint HAnimJoint_type;
  typedef ::xsd::cxx::tree::sequence< HAnimJoint_type > HAnimJoint_sequence;
  typedef HAnimJoint_sequence::iterator HAnimJoint_iterator;
  typedef HAnimJoint_sequence::const_iterator HAnimJoint_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimJoint_type, char > HAnimJoint_traits;

  const HAnimJoint_sequence&
  HAnimJoint () const;

  HAnimJoint_sequence&
  HAnimJoint ();

  void
  HAnimJoint (const HAnimJoint_sequence& s);

  // HAnimSegment
  // 
  typedef ::HAnimSegment HAnimSegment_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSegment_type > HAnimSegment_sequence;
  typedef HAnimSegment_sequence::iterator HAnimSegment_iterator;
  typedef HAnimSegment_sequence::const_iterator HAnimSegment_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSegment_type, char > HAnimSegment_traits;

  const HAnimSegment_sequence&
  HAnimSegment () const;

  HAnimSegment_sequence&
  HAnimSegment ();

  void
  HAnimSegment (const HAnimSegment_sequence& s);

  // HAnimSite
  // 
  typedef ::HAnimSite HAnimSite_type;
  typedef ::xsd::cxx::tree::sequence< HAnimSite_type > HAnimSite_sequence;
  typedef HAnimSite_sequence::iterator HAnimSite_iterator;
  typedef HAnimSite_sequence::const_iterator HAnimSite_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimSite_type, char > HAnimSite_traits;

  const HAnimSite_sequence&
  HAnimSite () const;

  HAnimSite_sequence&
  HAnimSite ();

  void
  HAnimSite (const HAnimSite_sequence& s);

  // NurbsOrientationInterpolator
  // 
  typedef ::NurbsOrientationInterpolator NurbsOrientationInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsOrientationInterpolator_type > NurbsOrientationInterpolator_sequence;
  typedef NurbsOrientationInterpolator_sequence::iterator NurbsOrientationInterpolator_iterator;
  typedef NurbsOrientationInterpolator_sequence::const_iterator NurbsOrientationInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsOrientationInterpolator_type, char > NurbsOrientationInterpolator_traits;

  const NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator () const;

  NurbsOrientationInterpolator_sequence&
  NurbsOrientationInterpolator ();

  void
  NurbsOrientationInterpolator (const NurbsOrientationInterpolator_sequence& s);

  // NurbsPositionInterpolator
  // 
  typedef ::NurbsPositionInterpolator NurbsPositionInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsPositionInterpolator_type > NurbsPositionInterpolator_sequence;
  typedef NurbsPositionInterpolator_sequence::iterator NurbsPositionInterpolator_iterator;
  typedef NurbsPositionInterpolator_sequence::const_iterator NurbsPositionInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsPositionInterpolator_type, char > NurbsPositionInterpolator_traits;

  const NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator () const;

  NurbsPositionInterpolator_sequence&
  NurbsPositionInterpolator ();

  void
  NurbsPositionInterpolator (const NurbsPositionInterpolator_sequence& s);

  // NurbsSurfaceInterpolator
  // 
  typedef ::NurbsSurfaceInterpolator NurbsSurfaceInterpolator_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSurfaceInterpolator_type > NurbsSurfaceInterpolator_sequence;
  typedef NurbsSurfaceInterpolator_sequence::iterator NurbsSurfaceInterpolator_iterator;
  typedef NurbsSurfaceInterpolator_sequence::const_iterator NurbsSurfaceInterpolator_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSurfaceInterpolator_type, char > NurbsSurfaceInterpolator_traits;

  const NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator () const;

  NurbsSurfaceInterpolator_sequence&
  NurbsSurfaceInterpolator ();

  void
  NurbsSurfaceInterpolator (const NurbsSurfaceInterpolator_sequence& s);

  // NurbsSet
  // 
  typedef ::NurbsSet NurbsSet_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSet_type > NurbsSet_sequence;
  typedef NurbsSet_sequence::iterator NurbsSet_iterator;
  typedef NurbsSet_sequence::const_iterator NurbsSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSet_type, char > NurbsSet_traits;

  const NurbsSet_sequence&
  NurbsSet () const;

  NurbsSet_sequence&
  NurbsSet ();

  void
  NurbsSet (const NurbsSet_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::sequence< Coordinate_type > Coordinate_sequence;
  typedef Coordinate_sequence::iterator Coordinate_iterator;
  typedef Coordinate_sequence::const_iterator Coordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_sequence&
  Coordinate () const;

  Coordinate_sequence&
  Coordinate ();

  void
  Coordinate (const Coordinate_sequence& s);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateDouble_type > CoordinateDouble_sequence;
  typedef CoordinateDouble_sequence::iterator CoordinateDouble_iterator;
  typedef CoordinateDouble_sequence::const_iterator CoordinateDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_sequence&
  CoordinateDouble () const;

  CoordinateDouble_sequence&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_sequence& s);

  // Normal
  // 
  typedef ::Normal Normal_type;
  typedef ::xsd::cxx::tree::sequence< Normal_type > Normal_sequence;
  typedef Normal_sequence::iterator Normal_iterator;
  typedef Normal_sequence::const_iterator Normal_const_iterator;
  typedef ::xsd::cxx::tree::traits< Normal_type, char > Normal_traits;

  const Normal_sequence&
  Normal () const;

  Normal_sequence&
  Normal ();

  void
  Normal (const Normal_sequence& s);

  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // center
  // 
  typedef ::SFVec3f center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::auto_ptr< center_type > p);

  static const center_type&
  center_default_value ();

  // rotation
  // 
  typedef ::SFRotation rotation_type;
  typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

  const rotation_type&
  rotation () const;

  rotation_type&
  rotation ();

  void
  rotation (const rotation_type& x);

  void
  rotation (::std::auto_ptr< rotation_type > p);

  static const rotation_type&
  rotation_default_value ();

  // scale
  // 
  typedef ::SFVec3f scale_type;
  typedef ::xsd::cxx::tree::traits< scale_type, char > scale_traits;

  const scale_type&
  scale () const;

  scale_type&
  scale ();

  void
  scale (const scale_type& x);

  void
  scale (::std::auto_ptr< scale_type > p);

  static const scale_type&
  scale_default_value ();

  // scaleOrientation
  // 
  typedef ::SFRotation scaleOrientation_type;
  typedef ::xsd::cxx::tree::traits< scaleOrientation_type, char > scaleOrientation_traits;

  const scaleOrientation_type&
  scaleOrientation () const;

  scaleOrientation_type&
  scaleOrientation ();

  void
  scaleOrientation (const scaleOrientation_type& x);

  void
  scaleOrientation (::std::auto_ptr< scaleOrientation_type > p);

  static const scaleOrientation_type&
  scaleOrientation_default_value ();

  // translation
  // 
  typedef ::SFVec3f translation_type;
  typedef ::xsd::cxx::tree::traits< translation_type, char > translation_traits;

  const translation_type&
  translation () const;

  translation_type&
  translation ();

  void
  translation (const translation_type& x);

  void
  translation (::std::auto_ptr< translation_type > p);

  static const translation_type&
  translation_default_value ();

  // info
  // 
  typedef ::MFString info_type;
  typedef ::xsd::cxx::tree::optional< info_type > info_optional;
  typedef ::xsd::cxx::tree::traits< info_type, char > info_traits;

  const info_optional&
  info () const;

  info_optional&
  info ();

  void
  info (const info_type& x);

  void
  info (const info_optional& x);

  void
  info (::std::auto_ptr< info_type > p);

  // version
  // 
  typedef ::SFString version_type;
  typedef ::xsd::cxx::tree::optional< version_type > version_optional;
  typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

  const version_optional&
  version () const;

  version_optional&
  version ();

  void
  version (const version_type& x);

  void
  version (const version_optional& x);

  void
  version (::std::auto_ptr< version_type > p);

  // Constructors.
  //
  HAnimHumanoid ();

  HAnimHumanoid (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  HAnimHumanoid (const HAnimHumanoid& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual HAnimHumanoid*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~HAnimHumanoid ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Appearance_sequence Appearance_;
  Background_sequence Background_;
  ColorInterpolator_sequence ColorInterpolator_;
  CoordinateInterpolator_sequence CoordinateInterpolator_;
  DirectionalLight_sequence DirectionalLight_;
  Group_sequence Group_;
  NavigationInfo_sequence NavigationInfo_;
  NormalInterpolator_sequence NormalInterpolator_;
  OrientationInterpolator_sequence OrientationInterpolator_;
  PositionInterpolator_sequence PositionInterpolator_;
  ScalarInterpolator_sequence ScalarInterpolator_;
  Shape_sequence Shape_;
  TimeSensor_sequence TimeSensor_;
  Transform_sequence Transform_;
  Viewpoint_sequence Viewpoint_;
  WorldInfo_sequence WorldInfo_;
  Anchor_sequence Anchor_;
  BooleanFilter_sequence BooleanFilter_;
  BooleanSequencer_sequence BooleanSequencer_;
  BooleanToggle_sequence BooleanToggle_;
  BooleanTrigger_sequence BooleanTrigger_;
  CylinderSensor_sequence CylinderSensor_;
  Inline_sequence Inline_;
  IntegerSequencer_sequence IntegerSequencer_;
  IntegerTrigger_sequence IntegerTrigger_;
  KeySensor_sequence KeySensor_;
  PlaneSensor_sequence PlaneSensor_;
  PointLight_sequence PointLight_;
  ProximitySensor_sequence ProximitySensor_;
  SphereSensor_sequence SphereSensor_;
  SpotLight_sequence SpotLight_;
  StringSensor_sequence StringSensor_;
  Switch_sequence Switch_;
  TimeTrigger_sequence TimeTrigger_;
  TouchSensor_sequence TouchSensor_;
  AudioClip_sequence AudioClip_;
  Billboard_sequence Billboard_;
  Collision_sequence Collision_;
  Fog_sequence Fog_;
  LoadSensor_sequence LoadSensor_;
  LocalFog_sequence LocalFog_;
  LOD_sequence LOD_;
  Script_sequence Script_;
  Sound_sequence Sound_;
  VisibilitySensor_sequence VisibilitySensor_;
  CoordinateInterpolator2D_sequence CoordinateInterpolator2D_;
  PositionInterpolator2D_sequence PositionInterpolator2D_;
  StaticGroup_sequence StaticGroup_;
  CADAssembly_sequence CADAssembly_;
  CADLayer_sequence CADLayer_;
  EspduTransform_sequence EspduTransform_;
  ReceiverPdu_sequence ReceiverPdu_;
  SignalPdu_sequence SignalPdu_;
  TransmitterPdu_sequence TransmitterPdu_;
  GeoLocation_sequence GeoLocation_;
  GeoLOD_sequence GeoLOD_;
  GeoMetadata_sequence GeoMetadata_;
  GeoOrigin_sequence GeoOrigin_;
  GeoPositionInterpolator_sequence GeoPositionInterpolator_;
  GeoTouchSensor_sequence GeoTouchSensor_;
  GeoViewpoint_sequence GeoViewpoint_;
  HAnimHumanoid1_sequence HAnimHumanoid1_;
  HAnimJoint_sequence HAnimJoint_;
  HAnimSegment_sequence HAnimSegment_;
  HAnimSite_sequence HAnimSite_;
  NurbsOrientationInterpolator_sequence NurbsOrientationInterpolator_;
  NurbsPositionInterpolator_sequence NurbsPositionInterpolator_;
  NurbsSurfaceInterpolator_sequence NurbsSurfaceInterpolator_;
  NurbsSet_sequence NurbsSet_;
  ProtoInstance_sequence ProtoInstance_;
  Coordinate_sequence Coordinate_;
  CoordinateDouble_sequence CoordinateDouble_;
  Normal_sequence Normal_;
  name_optional name_;
  ::xsd::cxx::tree::one< center_type > center_;
  static const center_type center_default_value_;
  ::xsd::cxx::tree::one< rotation_type > rotation_;
  static const rotation_type rotation_default_value_;
  ::xsd::cxx::tree::one< scale_type > scale_;
  static const scale_type scale_default_value_;
  ::xsd::cxx::tree::one< scaleOrientation_type > scaleOrientation_;
  static const scaleOrientation_type scaleOrientation_default_value_;
  ::xsd::cxx::tree::one< translation_type > translation_;
  static const translation_type translation_default_value_;
  info_optional info_;
  version_optional version_;
};

class HAnimJoint: public ::X3DGroupingNode
{
  public:
  // name
  // 
  typedef ::jointName name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // center
  // 
  typedef ::SFVec3f center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::auto_ptr< center_type > p);

  static const center_type&
  center_default_value ();

  // rotation
  // 
  typedef ::SFRotation rotation_type;
  typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

  const rotation_type&
  rotation () const;

  rotation_type&
  rotation ();

  void
  rotation (const rotation_type& x);

  void
  rotation (::std::auto_ptr< rotation_type > p);

  static const rotation_type&
  rotation_default_value ();

  // scale
  // 
  typedef ::SFVec3f scale_type;
  typedef ::xsd::cxx::tree::traits< scale_type, char > scale_traits;

  const scale_type&
  scale () const;

  scale_type&
  scale ();

  void
  scale (const scale_type& x);

  void
  scale (::std::auto_ptr< scale_type > p);

  static const scale_type&
  scale_default_value ();

  // scaleOrientation
  // 
  typedef ::SFRotation scaleOrientation_type;
  typedef ::xsd::cxx::tree::traits< scaleOrientation_type, char > scaleOrientation_traits;

  const scaleOrientation_type&
  scaleOrientation () const;

  scaleOrientation_type&
  scaleOrientation ();

  void
  scaleOrientation (const scaleOrientation_type& x);

  void
  scaleOrientation (::std::auto_ptr< scaleOrientation_type > p);

  static const scaleOrientation_type&
  scaleOrientation_default_value ();

  // translation
  // 
  typedef ::SFVec3f translation_type;
  typedef ::xsd::cxx::tree::traits< translation_type, char > translation_traits;

  const translation_type&
  translation () const;

  translation_type&
  translation ();

  void
  translation (const translation_type& x);

  void
  translation (::std::auto_ptr< translation_type > p);

  static const translation_type&
  translation_default_value ();

  // skinCoordIndex
  // 
  typedef ::MFInt32 skinCoordIndex_type;
  typedef ::xsd::cxx::tree::optional< skinCoordIndex_type > skinCoordIndex_optional;
  typedef ::xsd::cxx::tree::traits< skinCoordIndex_type, char > skinCoordIndex_traits;

  const skinCoordIndex_optional&
  skinCoordIndex () const;

  skinCoordIndex_optional&
  skinCoordIndex ();

  void
  skinCoordIndex (const skinCoordIndex_type& x);

  void
  skinCoordIndex (const skinCoordIndex_optional& x);

  void
  skinCoordIndex (::std::auto_ptr< skinCoordIndex_type > p);

  // skinCoordWeight
  // 
  typedef ::MFFloat skinCoordWeight_type;
  typedef ::xsd::cxx::tree::optional< skinCoordWeight_type > skinCoordWeight_optional;
  typedef ::xsd::cxx::tree::traits< skinCoordWeight_type, char > skinCoordWeight_traits;

  const skinCoordWeight_optional&
  skinCoordWeight () const;

  skinCoordWeight_optional&
  skinCoordWeight ();

  void
  skinCoordWeight (const skinCoordWeight_type& x);

  void
  skinCoordWeight (const skinCoordWeight_optional& x);

  void
  skinCoordWeight (::std::auto_ptr< skinCoordWeight_type > p);

  // llimit
  // 
  typedef ::MFFloat llimit_type;
  typedef ::xsd::cxx::tree::optional< llimit_type > llimit_optional;
  typedef ::xsd::cxx::tree::traits< llimit_type, char > llimit_traits;

  const llimit_optional&
  llimit () const;

  llimit_optional&
  llimit ();

  void
  llimit (const llimit_type& x);

  void
  llimit (const llimit_optional& x);

  void
  llimit (::std::auto_ptr< llimit_type > p);

  // ulimit
  // 
  typedef ::MFFloat ulimit_type;
  typedef ::xsd::cxx::tree::optional< ulimit_type > ulimit_optional;
  typedef ::xsd::cxx::tree::traits< ulimit_type, char > ulimit_traits;

  const ulimit_optional&
  ulimit () const;

  ulimit_optional&
  ulimit ();

  void
  ulimit (const ulimit_type& x);

  void
  ulimit (const ulimit_optional& x);

  void
  ulimit (::std::auto_ptr< ulimit_type > p);

  // limitOrientation
  // 
  typedef ::SFRotation limitOrientation_type;
  typedef ::xsd::cxx::tree::traits< limitOrientation_type, char > limitOrientation_traits;

  const limitOrientation_type&
  limitOrientation () const;

  limitOrientation_type&
  limitOrientation ();

  void
  limitOrientation (const limitOrientation_type& x);

  void
  limitOrientation (::std::auto_ptr< limitOrientation_type > p);

  static const limitOrientation_type&
  limitOrientation_default_value ();

  // stiffness
  // 
  typedef ::MFFloat stiffness_type;
  typedef ::xsd::cxx::tree::traits< stiffness_type, char > stiffness_traits;

  const stiffness_type&
  stiffness () const;

  stiffness_type&
  stiffness ();

  void
  stiffness (const stiffness_type& x);

  void
  stiffness (::std::auto_ptr< stiffness_type > p);

  static const stiffness_type&
  stiffness_default_value ();

  // Constructors.
  //
  HAnimJoint ();

  HAnimJoint (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  HAnimJoint (const HAnimJoint& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual HAnimJoint*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~HAnimJoint ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  name_optional name_;
  ::xsd::cxx::tree::one< center_type > center_;
  static const center_type center_default_value_;
  ::xsd::cxx::tree::one< rotation_type > rotation_;
  static const rotation_type rotation_default_value_;
  ::xsd::cxx::tree::one< scale_type > scale_;
  static const scale_type scale_default_value_;
  ::xsd::cxx::tree::one< scaleOrientation_type > scaleOrientation_;
  static const scaleOrientation_type scaleOrientation_default_value_;
  ::xsd::cxx::tree::one< translation_type > translation_;
  static const translation_type translation_default_value_;
  skinCoordIndex_optional skinCoordIndex_;
  skinCoordWeight_optional skinCoordWeight_;
  llimit_optional llimit_;
  ulimit_optional ulimit_;
  ::xsd::cxx::tree::one< limitOrientation_type > limitOrientation_;
  static const limitOrientation_type limitOrientation_default_value_;
  ::xsd::cxx::tree::one< stiffness_type > stiffness_;
  static const stiffness_type stiffness_default_value_;
};

class HAnimSegment: public ::X3DGroupingNode
{
  public:
  // HAnimDisplacer
  // 
  typedef ::HAnimDisplacer HAnimDisplacer_type;
  typedef ::xsd::cxx::tree::sequence< HAnimDisplacer_type > HAnimDisplacer_sequence;
  typedef HAnimDisplacer_sequence::iterator HAnimDisplacer_iterator;
  typedef HAnimDisplacer_sequence::const_iterator HAnimDisplacer_const_iterator;
  typedef ::xsd::cxx::tree::traits< HAnimDisplacer_type, char > HAnimDisplacer_traits;

  const HAnimDisplacer_sequence&
  HAnimDisplacer () const;

  HAnimDisplacer_sequence&
  HAnimDisplacer ();

  void
  HAnimDisplacer (const HAnimDisplacer_sequence& s);

  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // mass
  // 
  typedef ::SFFloat mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  void
  mass (::std::auto_ptr< mass_type > p);

  static const mass_type&
  mass_default_value ();

  // centerOfMass
  // 
  typedef ::SFVec3f centerOfMass_type;
  typedef ::xsd::cxx::tree::traits< centerOfMass_type, char > centerOfMass_traits;

  const centerOfMass_type&
  centerOfMass () const;

  centerOfMass_type&
  centerOfMass ();

  void
  centerOfMass (const centerOfMass_type& x);

  void
  centerOfMass (::std::auto_ptr< centerOfMass_type > p);

  static const centerOfMass_type&
  centerOfMass_default_value ();

  // momentsOfInertia
  // 
  typedef ::MFFloat momentsOfInertia_type;
  typedef ::xsd::cxx::tree::traits< momentsOfInertia_type, char > momentsOfInertia_traits;

  const momentsOfInertia_type&
  momentsOfInertia () const;

  momentsOfInertia_type&
  momentsOfInertia ();

  void
  momentsOfInertia (const momentsOfInertia_type& x);

  void
  momentsOfInertia (::std::auto_ptr< momentsOfInertia_type > p);

  static const momentsOfInertia_type&
  momentsOfInertia_default_value ();

  // Constructors.
  //
  HAnimSegment ();

  HAnimSegment (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  HAnimSegment (const HAnimSegment& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual HAnimSegment*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~HAnimSegment ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  HAnimDisplacer_sequence HAnimDisplacer_;
  name_optional name_;
  ::xsd::cxx::tree::one< mass_type > mass_;
  static const mass_type mass_default_value_;
  ::xsd::cxx::tree::one< centerOfMass_type > centerOfMass_;
  static const centerOfMass_type centerOfMass_default_value_;
  ::xsd::cxx::tree::one< momentsOfInertia_type > momentsOfInertia_;
  static const momentsOfInertia_type momentsOfInertia_default_value_;
};

class HAnimSite: public ::X3DGroupingNode
{
  public:
  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // center
  // 
  typedef ::SFVec3f center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::auto_ptr< center_type > p);

  static const center_type&
  center_default_value ();

  // rotation
  // 
  typedef ::SFRotation rotation_type;
  typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

  const rotation_type&
  rotation () const;

  rotation_type&
  rotation ();

  void
  rotation (const rotation_type& x);

  void
  rotation (::std::auto_ptr< rotation_type > p);

  static const rotation_type&
  rotation_default_value ();

  // scale
  // 
  typedef ::SFVec3f scale_type;
  typedef ::xsd::cxx::tree::traits< scale_type, char > scale_traits;

  const scale_type&
  scale () const;

  scale_type&
  scale ();

  void
  scale (const scale_type& x);

  void
  scale (::std::auto_ptr< scale_type > p);

  static const scale_type&
  scale_default_value ();

  // scaleOrientation
  // 
  typedef ::SFRotation scaleOrientation_type;
  typedef ::xsd::cxx::tree::traits< scaleOrientation_type, char > scaleOrientation_traits;

  const scaleOrientation_type&
  scaleOrientation () const;

  scaleOrientation_type&
  scaleOrientation ();

  void
  scaleOrientation (const scaleOrientation_type& x);

  void
  scaleOrientation (::std::auto_ptr< scaleOrientation_type > p);

  static const scaleOrientation_type&
  scaleOrientation_default_value ();

  // translation
  // 
  typedef ::SFVec3f translation_type;
  typedef ::xsd::cxx::tree::traits< translation_type, char > translation_traits;

  const translation_type&
  translation () const;

  translation_type&
  translation ();

  void
  translation (const translation_type& x);

  void
  translation (::std::auto_ptr< translation_type > p);

  static const translation_type&
  translation_default_value ();

  // Constructors.
  //
  HAnimSite ();

  HAnimSite (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  HAnimSite (const HAnimSite& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual HAnimSite*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~HAnimSite ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  name_optional name_;
  ::xsd::cxx::tree::one< center_type > center_;
  static const center_type center_default_value_;
  ::xsd::cxx::tree::one< rotation_type > rotation_;
  static const rotation_type rotation_default_value_;
  ::xsd::cxx::tree::one< scale_type > scale_;
  static const scale_type scale_default_value_;
  ::xsd::cxx::tree::one< scaleOrientation_type > scaleOrientation_;
  static const scaleOrientation_type scaleOrientation_default_value_;
  ::xsd::cxx::tree::one< translation_type > translation_;
  static const translation_type translation_default_value_;
};

class Contour2D: public ::X3DNode
{
  public:
  // NurbsCurve2D
  // 
  typedef ::NurbsCurve2D NurbsCurve2D_type;
  typedef ::xsd::cxx::tree::sequence< NurbsCurve2D_type > NurbsCurve2D_sequence;
  typedef NurbsCurve2D_sequence::iterator NurbsCurve2D_iterator;
  typedef NurbsCurve2D_sequence::const_iterator NurbsCurve2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsCurve2D_type, char > NurbsCurve2D_traits;

  const NurbsCurve2D_sequence&
  NurbsCurve2D () const;

  NurbsCurve2D_sequence&
  NurbsCurve2D ();

  void
  NurbsCurve2D (const NurbsCurve2D_sequence& s);

  // ContourPolyline2D
  // 
  typedef ::ContourPolyline2D ContourPolyline2D_type;
  typedef ::xsd::cxx::tree::sequence< ContourPolyline2D_type > ContourPolyline2D_sequence;
  typedef ContourPolyline2D_sequence::iterator ContourPolyline2D_iterator;
  typedef ContourPolyline2D_sequence::const_iterator ContourPolyline2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< ContourPolyline2D_type, char > ContourPolyline2D_traits;

  const ContourPolyline2D_sequence&
  ContourPolyline2D () const;

  ContourPolyline2D_sequence&
  ContourPolyline2D ();

  void
  ContourPolyline2D (const ContourPolyline2D_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  Contour2D ();

  Contour2D (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  Contour2D (const Contour2D& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual Contour2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Contour2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NurbsCurve2D_sequence NurbsCurve2D_;
  ContourPolyline2D_sequence ContourPolyline2D_;
  ProtoInstance_sequence ProtoInstance_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

class ContourPolyline2D: public ::X3DNurbsControlCurveNode
{
  public:
  // Constructors.
  //
  ContourPolyline2D ();

  ContourPolyline2D (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  ContourPolyline2D (const ContourPolyline2D& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual ContourPolyline2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ContourPolyline2D ();
};

class NurbsCurve: public ::X3DParametricGeometryNode
{
  public:
  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::optional< Coordinate_type > Coordinate_optional;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_optional&
  Coordinate () const;

  Coordinate_optional&
  Coordinate ();

  void
  Coordinate (const Coordinate_type& x);

  void
  Coordinate (const Coordinate_optional& x);

  void
  Coordinate (::std::auto_ptr< Coordinate_type > p);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::optional< CoordinateDouble_type > CoordinateDouble_optional;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_optional&
  CoordinateDouble () const;

  CoordinateDouble_optional&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_type& x);

  void
  CoordinateDouble (const CoordinateDouble_optional& x);

  void
  CoordinateDouble (::std::auto_ptr< CoordinateDouble_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::optional< ProtoInstance_type > ProtoInstance_optional;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_optional&
  ProtoInstance () const;

  ProtoInstance_optional&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_type& x);

  void
  ProtoInstance (const ProtoInstance_optional& x);

  void
  ProtoInstance (::std::auto_ptr< ProtoInstance_type > p);

  // closed
  // 
  typedef ::SFBool closed_type;
  typedef ::xsd::cxx::tree::traits< closed_type, char > closed_traits;

  const closed_type&
  closed () const;

  closed_type&
  closed ();

  void
  closed (const closed_type& x);

  void
  closed (::std::auto_ptr< closed_type > p);

  static const closed_type&
  closed_default_value ();

  // knot
  // 
  typedef ::MFDouble knot_type;
  typedef ::xsd::cxx::tree::optional< knot_type > knot_optional;
  typedef ::xsd::cxx::tree::traits< knot_type, char > knot_traits;

  const knot_optional&
  knot () const;

  knot_optional&
  knot ();

  void
  knot (const knot_type& x);

  void
  knot (const knot_optional& x);

  void
  knot (::std::auto_ptr< knot_type > p);

  // order
  // 
  typedef ::SFInt32 order_type;
  typedef ::xsd::cxx::tree::traits< order_type, char > order_traits;

  const order_type&
  order () const;

  order_type&
  order ();

  void
  order (const order_type& x);

  void
  order (::std::auto_ptr< order_type > p);

  static const order_type&
  order_default_value ();

  // tessellation
  // 
  typedef ::SFInt32 tessellation_type;
  typedef ::xsd::cxx::tree::traits< tessellation_type, char > tessellation_traits;

  const tessellation_type&
  tessellation () const;

  tessellation_type&
  tessellation ();

  void
  tessellation (const tessellation_type& x);

  void
  tessellation (::std::auto_ptr< tessellation_type > p);

  static const tessellation_type&
  tessellation_default_value ();

  // weight
  // 
  typedef ::MFDouble weight_type;
  typedef ::xsd::cxx::tree::optional< weight_type > weight_optional;
  typedef ::xsd::cxx::tree::traits< weight_type, char > weight_traits;

  const weight_optional&
  weight () const;

  weight_optional&
  weight ();

  void
  weight (const weight_type& x);

  void
  weight (const weight_optional& x);

  void
  weight (::std::auto_ptr< weight_type > p);

  // Constructors.
  //
  NurbsCurve ();

  NurbsCurve (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  NurbsCurve (const NurbsCurve& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual NurbsCurve*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsCurve ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Coordinate_optional Coordinate_;
  CoordinateDouble_optional CoordinateDouble_;
  ProtoInstance_optional ProtoInstance_;
  ::xsd::cxx::tree::one< closed_type > closed_;
  static const closed_type closed_default_value_;
  knot_optional knot_;
  ::xsd::cxx::tree::one< order_type > order_;
  static const order_type order_default_value_;
  ::xsd::cxx::tree::one< tessellation_type > tessellation_;
  static const tessellation_type tessellation_default_value_;
  weight_optional weight_;
};

class NurbsCurve2D: public ::X3DNurbsControlCurveNode
{
  public:
  // closed
  // 
  typedef ::SFBool closed_type;
  typedef ::xsd::cxx::tree::traits< closed_type, char > closed_traits;

  const closed_type&
  closed () const;

  closed_type&
  closed ();

  void
  closed (const closed_type& x);

  void
  closed (::std::auto_ptr< closed_type > p);

  static const closed_type&
  closed_default_value ();

  // knot
  // 
  typedef ::MFDouble knot_type;
  typedef ::xsd::cxx::tree::optional< knot_type > knot_optional;
  typedef ::xsd::cxx::tree::traits< knot_type, char > knot_traits;

  const knot_optional&
  knot () const;

  knot_optional&
  knot ();

  void
  knot (const knot_type& x);

  void
  knot (const knot_optional& x);

  void
  knot (::std::auto_ptr< knot_type > p);

  // order
  // 
  typedef ::SFInt32 order_type;
  typedef ::xsd::cxx::tree::traits< order_type, char > order_traits;

  const order_type&
  order () const;

  order_type&
  order ();

  void
  order (const order_type& x);

  void
  order (::std::auto_ptr< order_type > p);

  static const order_type&
  order_default_value ();

  // tessellation
  // 
  typedef ::SFInt32 tessellation_type;
  typedef ::xsd::cxx::tree::traits< tessellation_type, char > tessellation_traits;

  const tessellation_type&
  tessellation () const;

  tessellation_type&
  tessellation ();

  void
  tessellation (const tessellation_type& x);

  void
  tessellation (::std::auto_ptr< tessellation_type > p);

  static const tessellation_type&
  tessellation_default_value ();

  // weight
  // 
  typedef ::MFDouble weight_type;
  typedef ::xsd::cxx::tree::optional< weight_type > weight_optional;
  typedef ::xsd::cxx::tree::traits< weight_type, char > weight_traits;

  const weight_optional&
  weight () const;

  weight_optional&
  weight ();

  void
  weight (const weight_type& x);

  void
  weight (const weight_optional& x);

  void
  weight (::std::auto_ptr< weight_type > p);

  // Constructors.
  //
  NurbsCurve2D ();

  NurbsCurve2D (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  NurbsCurve2D (const NurbsCurve2D& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual NurbsCurve2D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsCurve2D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< closed_type > closed_;
  static const closed_type closed_default_value_;
  knot_optional knot_;
  ::xsd::cxx::tree::one< order_type > order_;
  static const order_type order_default_value_;
  ::xsd::cxx::tree::one< tessellation_type > tessellation_;
  static const tessellation_type tessellation_default_value_;
  weight_optional weight_;
};

class NurbsOrientationInterpolator: public ::X3DChildNode
{
  public:
  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::optional< Coordinate_type > Coordinate_optional;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_optional&
  Coordinate () const;

  Coordinate_optional&
  Coordinate ();

  void
  Coordinate (const Coordinate_type& x);

  void
  Coordinate (const Coordinate_optional& x);

  void
  Coordinate (::std::auto_ptr< Coordinate_type > p);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::optional< CoordinateDouble_type > CoordinateDouble_optional;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_optional&
  CoordinateDouble () const;

  CoordinateDouble_optional&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_type& x);

  void
  CoordinateDouble (const CoordinateDouble_optional& x);

  void
  CoordinateDouble (::std::auto_ptr< CoordinateDouble_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::optional< ProtoInstance_type > ProtoInstance_optional;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_optional&
  ProtoInstance () const;

  ProtoInstance_optional&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_type& x);

  void
  ProtoInstance (const ProtoInstance_optional& x);

  void
  ProtoInstance (::std::auto_ptr< ProtoInstance_type > p);

  // knot
  // 
  typedef ::MFDouble knot_type;
  typedef ::xsd::cxx::tree::optional< knot_type > knot_optional;
  typedef ::xsd::cxx::tree::traits< knot_type, char > knot_traits;

  const knot_optional&
  knot () const;

  knot_optional&
  knot ();

  void
  knot (const knot_type& x);

  void
  knot (const knot_optional& x);

  void
  knot (::std::auto_ptr< knot_type > p);

  // order
  // 
  typedef ::SFInt32 order_type;
  typedef ::xsd::cxx::tree::traits< order_type, char > order_traits;

  const order_type&
  order () const;

  order_type&
  order ();

  void
  order (const order_type& x);

  void
  order (::std::auto_ptr< order_type > p);

  static const order_type&
  order_default_value ();

  // weight
  // 
  typedef ::MFDouble weight_type;
  typedef ::xsd::cxx::tree::optional< weight_type > weight_optional;
  typedef ::xsd::cxx::tree::traits< weight_type, char > weight_traits;

  const weight_optional&
  weight () const;

  weight_optional&
  weight ();

  void
  weight (const weight_type& x);

  void
  weight (const weight_optional& x);

  void
  weight (::std::auto_ptr< weight_type > p);

  // Constructors.
  //
  NurbsOrientationInterpolator ();

  NurbsOrientationInterpolator (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  NurbsOrientationInterpolator (const NurbsOrientationInterpolator& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual NurbsOrientationInterpolator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsOrientationInterpolator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Coordinate_optional Coordinate_;
  CoordinateDouble_optional CoordinateDouble_;
  ProtoInstance_optional ProtoInstance_;
  knot_optional knot_;
  ::xsd::cxx::tree::one< order_type > order_;
  static const order_type order_default_value_;
  weight_optional weight_;
};

class NurbsPatchSurface: public ::X3DNurbsSurfaceGeometryNode
{
  public:
  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::sequence< Coordinate_type > Coordinate_sequence;
  typedef Coordinate_sequence::iterator Coordinate_iterator;
  typedef Coordinate_sequence::const_iterator Coordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_sequence&
  Coordinate () const;

  Coordinate_sequence&
  Coordinate ();

  void
  Coordinate (const Coordinate_sequence& s);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateDouble_type > CoordinateDouble_sequence;
  typedef CoordinateDouble_sequence::iterator CoordinateDouble_iterator;
  typedef CoordinateDouble_sequence::const_iterator CoordinateDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_sequence&
  CoordinateDouble () const;

  CoordinateDouble_sequence&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_sequence& s);

  // TextureCoordinate
  // 
  typedef ::TextureCoordinate TextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate_type > TextureCoordinate_sequence;
  typedef TextureCoordinate_sequence::iterator TextureCoordinate_iterator;
  typedef TextureCoordinate_sequence::const_iterator TextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate_type, char > TextureCoordinate_traits;

  const TextureCoordinate_sequence&
  TextureCoordinate () const;

  TextureCoordinate_sequence&
  TextureCoordinate ();

  void
  TextureCoordinate (const TextureCoordinate_sequence& s);

  // TextureCoordinateGenerator
  // 
  typedef ::TextureCoordinateGenerator TextureCoordinateGenerator_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinateGenerator_type > TextureCoordinateGenerator_sequence;
  typedef TextureCoordinateGenerator_sequence::iterator TextureCoordinateGenerator_iterator;
  typedef TextureCoordinateGenerator_sequence::const_iterator TextureCoordinateGenerator_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinateGenerator_type, char > TextureCoordinateGenerator_traits;

  const TextureCoordinateGenerator_sequence&
  TextureCoordinateGenerator () const;

  TextureCoordinateGenerator_sequence&
  TextureCoordinateGenerator ();

  void
  TextureCoordinateGenerator (const TextureCoordinateGenerator_sequence& s);

  // NurbsTextureCoordinate
  // 
  typedef ::NurbsTextureCoordinate NurbsTextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTextureCoordinate_type > NurbsTextureCoordinate_sequence;
  typedef NurbsTextureCoordinate_sequence::iterator NurbsTextureCoordinate_iterator;
  typedef NurbsTextureCoordinate_sequence::const_iterator NurbsTextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTextureCoordinate_type, char > NurbsTextureCoordinate_traits;

  const NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate () const;

  NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate ();

  void
  NurbsTextureCoordinate (const NurbsTextureCoordinate_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Constructors.
  //
  NurbsPatchSurface ();

  NurbsPatchSurface (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  NurbsPatchSurface (const NurbsPatchSurface& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual NurbsPatchSurface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsPatchSurface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Coordinate_sequence Coordinate_;
  CoordinateDouble_sequence CoordinateDouble_;
  TextureCoordinate_sequence TextureCoordinate_;
  TextureCoordinateGenerator_sequence TextureCoordinateGenerator_;
  NurbsTextureCoordinate_sequence NurbsTextureCoordinate_;
  ProtoInstance_sequence ProtoInstance_;
};

class NurbsPositionInterpolator: public ::X3DChildNode
{
  public:
  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::optional< Coordinate_type > Coordinate_optional;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_optional&
  Coordinate () const;

  Coordinate_optional&
  Coordinate ();

  void
  Coordinate (const Coordinate_type& x);

  void
  Coordinate (const Coordinate_optional& x);

  void
  Coordinate (::std::auto_ptr< Coordinate_type > p);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::optional< CoordinateDouble_type > CoordinateDouble_optional;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_optional&
  CoordinateDouble () const;

  CoordinateDouble_optional&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_type& x);

  void
  CoordinateDouble (const CoordinateDouble_optional& x);

  void
  CoordinateDouble (::std::auto_ptr< CoordinateDouble_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::optional< ProtoInstance_type > ProtoInstance_optional;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_optional&
  ProtoInstance () const;

  ProtoInstance_optional&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_type& x);

  void
  ProtoInstance (const ProtoInstance_optional& x);

  void
  ProtoInstance (::std::auto_ptr< ProtoInstance_type > p);

  // knot
  // 
  typedef ::MFDouble knot_type;
  typedef ::xsd::cxx::tree::optional< knot_type > knot_optional;
  typedef ::xsd::cxx::tree::traits< knot_type, char > knot_traits;

  const knot_optional&
  knot () const;

  knot_optional&
  knot ();

  void
  knot (const knot_type& x);

  void
  knot (const knot_optional& x);

  void
  knot (::std::auto_ptr< knot_type > p);

  // order
  // 
  typedef ::SFInt32 order_type;
  typedef ::xsd::cxx::tree::traits< order_type, char > order_traits;

  const order_type&
  order () const;

  order_type&
  order ();

  void
  order (const order_type& x);

  void
  order (::std::auto_ptr< order_type > p);

  static const order_type&
  order_default_value ();

  // weight
  // 
  typedef ::MFDouble weight_type;
  typedef ::xsd::cxx::tree::optional< weight_type > weight_optional;
  typedef ::xsd::cxx::tree::traits< weight_type, char > weight_traits;

  const weight_optional&
  weight () const;

  weight_optional&
  weight ();

  void
  weight (const weight_type& x);

  void
  weight (const weight_optional& x);

  void
  weight (::std::auto_ptr< weight_type > p);

  // Constructors.
  //
  NurbsPositionInterpolator ();

  NurbsPositionInterpolator (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  NurbsPositionInterpolator (const NurbsPositionInterpolator& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual NurbsPositionInterpolator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsPositionInterpolator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Coordinate_optional Coordinate_;
  CoordinateDouble_optional CoordinateDouble_;
  ProtoInstance_optional ProtoInstance_;
  knot_optional knot_;
  ::xsd::cxx::tree::one< order_type > order_;
  static const order_type order_default_value_;
  weight_optional weight_;
};

class NurbsSet: public ::X3DChildNode
{
  public:
  // NurbsPatchSurface
  // 
  typedef ::NurbsPatchSurface NurbsPatchSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsPatchSurface_type > NurbsPatchSurface_sequence;
  typedef NurbsPatchSurface_sequence::iterator NurbsPatchSurface_iterator;
  typedef NurbsPatchSurface_sequence::const_iterator NurbsPatchSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsPatchSurface_type, char > NurbsPatchSurface_traits;

  const NurbsPatchSurface_sequence&
  NurbsPatchSurface () const;

  NurbsPatchSurface_sequence&
  NurbsPatchSurface ();

  void
  NurbsPatchSurface (const NurbsPatchSurface_sequence& s);

  // NurbsSweptSurface
  // 
  typedef ::NurbsSweptSurface NurbsSweptSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSweptSurface_type > NurbsSweptSurface_sequence;
  typedef NurbsSweptSurface_sequence::iterator NurbsSweptSurface_iterator;
  typedef NurbsSweptSurface_sequence::const_iterator NurbsSweptSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSweptSurface_type, char > NurbsSweptSurface_traits;

  const NurbsSweptSurface_sequence&
  NurbsSweptSurface () const;

  NurbsSweptSurface_sequence&
  NurbsSweptSurface ();

  void
  NurbsSweptSurface (const NurbsSweptSurface_sequence& s);

  // NurbsSwungSurface
  // 
  typedef ::NurbsSwungSurface NurbsSwungSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsSwungSurface_type > NurbsSwungSurface_sequence;
  typedef NurbsSwungSurface_sequence::iterator NurbsSwungSurface_iterator;
  typedef NurbsSwungSurface_sequence::const_iterator NurbsSwungSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsSwungSurface_type, char > NurbsSwungSurface_traits;

  const NurbsSwungSurface_sequence&
  NurbsSwungSurface () const;

  NurbsSwungSurface_sequence&
  NurbsSwungSurface ();

  void
  NurbsSwungSurface (const NurbsSwungSurface_sequence& s);

  // NurbsTrimmedSurface
  // 
  typedef ::NurbsTrimmedSurface NurbsTrimmedSurface_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTrimmedSurface_type > NurbsTrimmedSurface_sequence;
  typedef NurbsTrimmedSurface_sequence::iterator NurbsTrimmedSurface_iterator;
  typedef NurbsTrimmedSurface_sequence::const_iterator NurbsTrimmedSurface_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTrimmedSurface_type, char > NurbsTrimmedSurface_traits;

  const NurbsTrimmedSurface_sequence&
  NurbsTrimmedSurface () const;

  NurbsTrimmedSurface_sequence&
  NurbsTrimmedSurface ();

  void
  NurbsTrimmedSurface (const NurbsTrimmedSurface_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // tessellationScale
  // 
  typedef ::SFFloat tessellationScale_type;
  typedef ::xsd::cxx::tree::traits< tessellationScale_type, char > tessellationScale_traits;

  const tessellationScale_type&
  tessellationScale () const;

  tessellationScale_type&
  tessellationScale ();

  void
  tessellationScale (const tessellationScale_type& x);

  void
  tessellationScale (::std::auto_ptr< tessellationScale_type > p);

  static const tessellationScale_type&
  tessellationScale_default_value ();

  // bboxCenter
  // 
  typedef ::SFVec3f bboxCenter_type;
  typedef ::xsd::cxx::tree::traits< bboxCenter_type, char > bboxCenter_traits;

  const bboxCenter_type&
  bboxCenter () const;

  bboxCenter_type&
  bboxCenter ();

  void
  bboxCenter (const bboxCenter_type& x);

  void
  bboxCenter (::std::auto_ptr< bboxCenter_type > p);

  static const bboxCenter_type&
  bboxCenter_default_value ();

  // bboxSize
  // 
  typedef ::BoundingBoxSize bboxSize_type;
  typedef ::xsd::cxx::tree::traits< bboxSize_type, char > bboxSize_traits;

  const bboxSize_type&
  bboxSize () const;

  bboxSize_type&
  bboxSize ();

  void
  bboxSize (const bboxSize_type& x);

  void
  bboxSize (::std::auto_ptr< bboxSize_type > p);

  static const bboxSize_type&
  bboxSize_default_value ();

  // Constructors.
  //
  NurbsSet ();

  NurbsSet (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  NurbsSet (const NurbsSet& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual NurbsSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NurbsPatchSurface_sequence NurbsPatchSurface_;
  NurbsSweptSurface_sequence NurbsSweptSurface_;
  NurbsSwungSurface_sequence NurbsSwungSurface_;
  NurbsTrimmedSurface_sequence NurbsTrimmedSurface_;
  ProtoInstance_sequence ProtoInstance_;
  ::xsd::cxx::tree::one< tessellationScale_type > tessellationScale_;
  static const tessellationScale_type tessellationScale_default_value_;
  ::xsd::cxx::tree::one< bboxCenter_type > bboxCenter_;
  static const bboxCenter_type bboxCenter_default_value_;
  ::xsd::cxx::tree::one< bboxSize_type > bboxSize_;
  static const bboxSize_type bboxSize_default_value_;
};

class NurbsSurfaceInterpolator: public ::X3DChildNode
{
  public:
  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::optional< Coordinate_type > Coordinate_optional;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_optional&
  Coordinate () const;

  Coordinate_optional&
  Coordinate ();

  void
  Coordinate (const Coordinate_type& x);

  void
  Coordinate (const Coordinate_optional& x);

  void
  Coordinate (::std::auto_ptr< Coordinate_type > p);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::optional< CoordinateDouble_type > CoordinateDouble_optional;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_optional&
  CoordinateDouble () const;

  CoordinateDouble_optional&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_type& x);

  void
  CoordinateDouble (const CoordinateDouble_optional& x);

  void
  CoordinateDouble (::std::auto_ptr< CoordinateDouble_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::optional< ProtoInstance_type > ProtoInstance_optional;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_optional&
  ProtoInstance () const;

  ProtoInstance_optional&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_type& x);

  void
  ProtoInstance (const ProtoInstance_optional& x);

  void
  ProtoInstance (::std::auto_ptr< ProtoInstance_type > p);

  // uDimension
  // 
  typedef ::SFInt32 uDimension_type;
  typedef ::xsd::cxx::tree::traits< uDimension_type, char > uDimension_traits;

  const uDimension_type&
  uDimension () const;

  uDimension_type&
  uDimension ();

  void
  uDimension (const uDimension_type& x);

  void
  uDimension (::std::auto_ptr< uDimension_type > p);

  static const uDimension_type&
  uDimension_default_value ();

  // vDimension
  // 
  typedef ::SFInt32 vDimension_type;
  typedef ::xsd::cxx::tree::traits< vDimension_type, char > vDimension_traits;

  const vDimension_type&
  vDimension () const;

  vDimension_type&
  vDimension ();

  void
  vDimension (const vDimension_type& x);

  void
  vDimension (::std::auto_ptr< vDimension_type > p);

  static const vDimension_type&
  vDimension_default_value ();

  // uKnot
  // 
  typedef ::MFDouble uKnot_type;
  typedef ::xsd::cxx::tree::optional< uKnot_type > uKnot_optional;
  typedef ::xsd::cxx::tree::traits< uKnot_type, char > uKnot_traits;

  const uKnot_optional&
  uKnot () const;

  uKnot_optional&
  uKnot ();

  void
  uKnot (const uKnot_type& x);

  void
  uKnot (const uKnot_optional& x);

  void
  uKnot (::std::auto_ptr< uKnot_type > p);

  // vKnot
  // 
  typedef ::MFDouble vKnot_type;
  typedef ::xsd::cxx::tree::optional< vKnot_type > vKnot_optional;
  typedef ::xsd::cxx::tree::traits< vKnot_type, char > vKnot_traits;

  const vKnot_optional&
  vKnot () const;

  vKnot_optional&
  vKnot ();

  void
  vKnot (const vKnot_type& x);

  void
  vKnot (const vKnot_optional& x);

  void
  vKnot (::std::auto_ptr< vKnot_type > p);

  // uOrder
  // 
  typedef ::SFInt32 uOrder_type;
  typedef ::xsd::cxx::tree::traits< uOrder_type, char > uOrder_traits;

  const uOrder_type&
  uOrder () const;

  uOrder_type&
  uOrder ();

  void
  uOrder (const uOrder_type& x);

  void
  uOrder (::std::auto_ptr< uOrder_type > p);

  static const uOrder_type&
  uOrder_default_value ();

  // vOrder
  // 
  typedef ::SFInt32 vOrder_type;
  typedef ::xsd::cxx::tree::traits< vOrder_type, char > vOrder_traits;

  const vOrder_type&
  vOrder () const;

  vOrder_type&
  vOrder ();

  void
  vOrder (const vOrder_type& x);

  void
  vOrder (::std::auto_ptr< vOrder_type > p);

  static const vOrder_type&
  vOrder_default_value ();

  // weight
  // 
  typedef ::MFDouble weight_type;
  typedef ::xsd::cxx::tree::optional< weight_type > weight_optional;
  typedef ::xsd::cxx::tree::traits< weight_type, char > weight_traits;

  const weight_optional&
  weight () const;

  weight_optional&
  weight ();

  void
  weight (const weight_type& x);

  void
  weight (const weight_optional& x);

  void
  weight (::std::auto_ptr< weight_type > p);

  // Constructors.
  //
  NurbsSurfaceInterpolator ();

  NurbsSurfaceInterpolator (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  NurbsSurfaceInterpolator (const NurbsSurfaceInterpolator& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual NurbsSurfaceInterpolator*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsSurfaceInterpolator ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Coordinate_optional Coordinate_;
  CoordinateDouble_optional CoordinateDouble_;
  ProtoInstance_optional ProtoInstance_;
  ::xsd::cxx::tree::one< uDimension_type > uDimension_;
  static const uDimension_type uDimension_default_value_;
  ::xsd::cxx::tree::one< vDimension_type > vDimension_;
  static const vDimension_type vDimension_default_value_;
  uKnot_optional uKnot_;
  vKnot_optional vKnot_;
  ::xsd::cxx::tree::one< uOrder_type > uOrder_;
  static const uOrder_type uOrder_default_value_;
  ::xsd::cxx::tree::one< vOrder_type > vOrder_;
  static const vOrder_type vOrder_default_value_;
  weight_optional weight_;
};

class NurbsSweptSurface: public ::X3DParametricGeometryNode
{
  public:
  // ContourPolyline2D
  // 
  typedef ::ContourPolyline2D ContourPolyline2D_type;
  typedef ::xsd::cxx::tree::sequence< ContourPolyline2D_type > ContourPolyline2D_sequence;
  typedef ContourPolyline2D_sequence::iterator ContourPolyline2D_iterator;
  typedef ContourPolyline2D_sequence::const_iterator ContourPolyline2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< ContourPolyline2D_type, char > ContourPolyline2D_traits;

  const ContourPolyline2D_sequence&
  ContourPolyline2D () const;

  ContourPolyline2D_sequence&
  ContourPolyline2D ();

  void
  ContourPolyline2D (const ContourPolyline2D_sequence& s);

  // NurbsCurve2D
  // 
  typedef ::NurbsCurve2D NurbsCurve2D_type;
  typedef ::xsd::cxx::tree::sequence< NurbsCurve2D_type > NurbsCurve2D_sequence;
  typedef NurbsCurve2D_sequence::iterator NurbsCurve2D_iterator;
  typedef NurbsCurve2D_sequence::const_iterator NurbsCurve2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsCurve2D_type, char > NurbsCurve2D_traits;

  const NurbsCurve2D_sequence&
  NurbsCurve2D () const;

  NurbsCurve2D_sequence&
  NurbsCurve2D ();

  void
  NurbsCurve2D (const NurbsCurve2D_sequence& s);

  // NurbsCurve
  // 
  typedef ::NurbsCurve NurbsCurve_type;
  typedef ::xsd::cxx::tree::sequence< NurbsCurve_type > NurbsCurve_sequence;
  typedef NurbsCurve_sequence::iterator NurbsCurve_iterator;
  typedef NurbsCurve_sequence::const_iterator NurbsCurve_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsCurve_type, char > NurbsCurve_traits;

  const NurbsCurve_sequence&
  NurbsCurve () const;

  NurbsCurve_sequence&
  NurbsCurve ();

  void
  NurbsCurve (const NurbsCurve_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // ccw
  // 
  typedef ::SFBool ccw_type;
  typedef ::xsd::cxx::tree::traits< ccw_type, char > ccw_traits;

  const ccw_type&
  ccw () const;

  ccw_type&
  ccw ();

  void
  ccw (const ccw_type& x);

  void
  ccw (::std::auto_ptr< ccw_type > p);

  static const ccw_type&
  ccw_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  NurbsSweptSurface ();

  NurbsSweptSurface (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  NurbsSweptSurface (const NurbsSweptSurface& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual NurbsSweptSurface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsSweptSurface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ContourPolyline2D_sequence ContourPolyline2D_;
  NurbsCurve2D_sequence NurbsCurve2D_;
  NurbsCurve_sequence NurbsCurve_;
  ProtoInstance_sequence ProtoInstance_;
  ::xsd::cxx::tree::one< ccw_type > ccw_;
  static const ccw_type ccw_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class NurbsSwungSurface: public ::X3DParametricGeometryNode
{
  public:
  // ContourPolyline2D
  // 
  typedef ::ContourPolyline2D ContourPolyline2D_type;
  typedef ::xsd::cxx::tree::sequence< ContourPolyline2D_type > ContourPolyline2D_sequence;
  typedef ContourPolyline2D_sequence::iterator ContourPolyline2D_iterator;
  typedef ContourPolyline2D_sequence::const_iterator ContourPolyline2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< ContourPolyline2D_type, char > ContourPolyline2D_traits;

  const ContourPolyline2D_sequence&
  ContourPolyline2D () const;

  ContourPolyline2D_sequence&
  ContourPolyline2D ();

  void
  ContourPolyline2D (const ContourPolyline2D_sequence& s);

  // NurbsCurve2D
  // 
  typedef ::NurbsCurve2D NurbsCurve2D_type;
  typedef ::xsd::cxx::tree::sequence< NurbsCurve2D_type > NurbsCurve2D_sequence;
  typedef NurbsCurve2D_sequence::iterator NurbsCurve2D_iterator;
  typedef NurbsCurve2D_sequence::const_iterator NurbsCurve2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsCurve2D_type, char > NurbsCurve2D_traits;

  const NurbsCurve2D_sequence&
  NurbsCurve2D () const;

  NurbsCurve2D_sequence&
  NurbsCurve2D ();

  void
  NurbsCurve2D (const NurbsCurve2D_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // ccw
  // 
  typedef ::SFBool ccw_type;
  typedef ::xsd::cxx::tree::traits< ccw_type, char > ccw_traits;

  const ccw_type&
  ccw () const;

  ccw_type&
  ccw ();

  void
  ccw (const ccw_type& x);

  void
  ccw (::std::auto_ptr< ccw_type > p);

  static const ccw_type&
  ccw_default_value ();

  // solid
  // 
  typedef ::SFBool solid_type;
  typedef ::xsd::cxx::tree::traits< solid_type, char > solid_traits;

  const solid_type&
  solid () const;

  solid_type&
  solid ();

  void
  solid (const solid_type& x);

  void
  solid (::std::auto_ptr< solid_type > p);

  static const solid_type&
  solid_default_value ();

  // Constructors.
  //
  NurbsSwungSurface ();

  NurbsSwungSurface (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  NurbsSwungSurface (const NurbsSwungSurface& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual NurbsSwungSurface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsSwungSurface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ContourPolyline2D_sequence ContourPolyline2D_;
  NurbsCurve2D_sequence NurbsCurve2D_;
  ProtoInstance_sequence ProtoInstance_;
  ::xsd::cxx::tree::one< ccw_type > ccw_;
  static const ccw_type ccw_default_value_;
  ::xsd::cxx::tree::one< solid_type > solid_;
  static const solid_type solid_default_value_;
};

class NurbsTextureCoordinate: public ::X3DTextureCoordinateNode
{
  public:
  // controlPoint
  // 
  typedef ::MFVec2f controlPoint_type;
  typedef ::xsd::cxx::tree::optional< controlPoint_type > controlPoint_optional;
  typedef ::xsd::cxx::tree::traits< controlPoint_type, char > controlPoint_traits;

  const controlPoint_optional&
  controlPoint () const;

  controlPoint_optional&
  controlPoint ();

  void
  controlPoint (const controlPoint_type& x);

  void
  controlPoint (const controlPoint_optional& x);

  void
  controlPoint (::std::auto_ptr< controlPoint_type > p);

  // uDimension
  // 
  typedef ::SFInt32 uDimension_type;
  typedef ::xsd::cxx::tree::traits< uDimension_type, char > uDimension_traits;

  const uDimension_type&
  uDimension () const;

  uDimension_type&
  uDimension ();

  void
  uDimension (const uDimension_type& x);

  void
  uDimension (::std::auto_ptr< uDimension_type > p);

  static const uDimension_type&
  uDimension_default_value ();

  // vDimension
  // 
  typedef ::SFInt32 vDimension_type;
  typedef ::xsd::cxx::tree::traits< vDimension_type, char > vDimension_traits;

  const vDimension_type&
  vDimension () const;

  vDimension_type&
  vDimension ();

  void
  vDimension (const vDimension_type& x);

  void
  vDimension (::std::auto_ptr< vDimension_type > p);

  static const vDimension_type&
  vDimension_default_value ();

  // uKnot
  // 
  typedef ::MFDouble uKnot_type;
  typedef ::xsd::cxx::tree::optional< uKnot_type > uKnot_optional;
  typedef ::xsd::cxx::tree::traits< uKnot_type, char > uKnot_traits;

  const uKnot_optional&
  uKnot () const;

  uKnot_optional&
  uKnot ();

  void
  uKnot (const uKnot_type& x);

  void
  uKnot (const uKnot_optional& x);

  void
  uKnot (::std::auto_ptr< uKnot_type > p);

  // vKnot
  // 
  typedef ::MFDouble vKnot_type;
  typedef ::xsd::cxx::tree::optional< vKnot_type > vKnot_optional;
  typedef ::xsd::cxx::tree::traits< vKnot_type, char > vKnot_traits;

  const vKnot_optional&
  vKnot () const;

  vKnot_optional&
  vKnot ();

  void
  vKnot (const vKnot_type& x);

  void
  vKnot (const vKnot_optional& x);

  void
  vKnot (::std::auto_ptr< vKnot_type > p);

  // uOrder
  // 
  typedef ::SFInt32 uOrder_type;
  typedef ::xsd::cxx::tree::traits< uOrder_type, char > uOrder_traits;

  const uOrder_type&
  uOrder () const;

  uOrder_type&
  uOrder ();

  void
  uOrder (const uOrder_type& x);

  void
  uOrder (::std::auto_ptr< uOrder_type > p);

  static const uOrder_type&
  uOrder_default_value ();

  // vOrder
  // 
  typedef ::SFInt32 vOrder_type;
  typedef ::xsd::cxx::tree::traits< vOrder_type, char > vOrder_traits;

  const vOrder_type&
  vOrder () const;

  vOrder_type&
  vOrder ();

  void
  vOrder (const vOrder_type& x);

  void
  vOrder (::std::auto_ptr< vOrder_type > p);

  static const vOrder_type&
  vOrder_default_value ();

  // weight
  // 
  typedef ::MFFloat weight_type;
  typedef ::xsd::cxx::tree::optional< weight_type > weight_optional;
  typedef ::xsd::cxx::tree::traits< weight_type, char > weight_traits;

  const weight_optional&
  weight () const;

  weight_optional&
  weight ();

  void
  weight (const weight_type& x);

  void
  weight (const weight_optional& x);

  void
  weight (::std::auto_ptr< weight_type > p);

  // Constructors.
  //
  NurbsTextureCoordinate ();

  NurbsTextureCoordinate (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  NurbsTextureCoordinate (const NurbsTextureCoordinate& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual NurbsTextureCoordinate*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsTextureCoordinate ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  controlPoint_optional controlPoint_;
  ::xsd::cxx::tree::one< uDimension_type > uDimension_;
  static const uDimension_type uDimension_default_value_;
  ::xsd::cxx::tree::one< vDimension_type > vDimension_;
  static const vDimension_type vDimension_default_value_;
  uKnot_optional uKnot_;
  vKnot_optional vKnot_;
  ::xsd::cxx::tree::one< uOrder_type > uOrder_;
  static const uOrder_type uOrder_default_value_;
  ::xsd::cxx::tree::one< vOrder_type > vOrder_;
  static const vOrder_type vOrder_default_value_;
  weight_optional weight_;
};

class NurbsTrimmedSurface: public ::X3DNurbsSurfaceGeometryNode
{
  public:
  // Contour2D
  // 
  typedef ::Contour2D Contour2D_type;
  typedef ::xsd::cxx::tree::sequence< Contour2D_type > Contour2D_sequence;
  typedef Contour2D_sequence::iterator Contour2D_iterator;
  typedef Contour2D_sequence::const_iterator Contour2D_const_iterator;
  typedef ::xsd::cxx::tree::traits< Contour2D_type, char > Contour2D_traits;

  const Contour2D_sequence&
  Contour2D () const;

  Contour2D_sequence&
  Contour2D ();

  void
  Contour2D (const Contour2D_sequence& s);

  // Coordinate
  // 
  typedef ::Coordinate Coordinate_type;
  typedef ::xsd::cxx::tree::sequence< Coordinate_type > Coordinate_sequence;
  typedef Coordinate_sequence::iterator Coordinate_iterator;
  typedef Coordinate_sequence::const_iterator Coordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< Coordinate_type, char > Coordinate_traits;

  const Coordinate_sequence&
  Coordinate () const;

  Coordinate_sequence&
  Coordinate ();

  void
  Coordinate (const Coordinate_sequence& s);

  // CoordinateDouble
  // 
  typedef ::CoordinateDouble CoordinateDouble_type;
  typedef ::xsd::cxx::tree::sequence< CoordinateDouble_type > CoordinateDouble_sequence;
  typedef CoordinateDouble_sequence::iterator CoordinateDouble_iterator;
  typedef CoordinateDouble_sequence::const_iterator CoordinateDouble_const_iterator;
  typedef ::xsd::cxx::tree::traits< CoordinateDouble_type, char > CoordinateDouble_traits;

  const CoordinateDouble_sequence&
  CoordinateDouble () const;

  CoordinateDouble_sequence&
  CoordinateDouble ();

  void
  CoordinateDouble (const CoordinateDouble_sequence& s);

  // TextureCoordinate
  // 
  typedef ::TextureCoordinate TextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinate_type > TextureCoordinate_sequence;
  typedef TextureCoordinate_sequence::iterator TextureCoordinate_iterator;
  typedef TextureCoordinate_sequence::const_iterator TextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinate_type, char > TextureCoordinate_traits;

  const TextureCoordinate_sequence&
  TextureCoordinate () const;

  TextureCoordinate_sequence&
  TextureCoordinate ();

  void
  TextureCoordinate (const TextureCoordinate_sequence& s);

  // TextureCoordinateGenerator
  // 
  typedef ::TextureCoordinateGenerator TextureCoordinateGenerator_type;
  typedef ::xsd::cxx::tree::sequence< TextureCoordinateGenerator_type > TextureCoordinateGenerator_sequence;
  typedef TextureCoordinateGenerator_sequence::iterator TextureCoordinateGenerator_iterator;
  typedef TextureCoordinateGenerator_sequence::const_iterator TextureCoordinateGenerator_const_iterator;
  typedef ::xsd::cxx::tree::traits< TextureCoordinateGenerator_type, char > TextureCoordinateGenerator_traits;

  const TextureCoordinateGenerator_sequence&
  TextureCoordinateGenerator () const;

  TextureCoordinateGenerator_sequence&
  TextureCoordinateGenerator ();

  void
  TextureCoordinateGenerator (const TextureCoordinateGenerator_sequence& s);

  // NurbsTextureCoordinate
  // 
  typedef ::NurbsTextureCoordinate NurbsTextureCoordinate_type;
  typedef ::xsd::cxx::tree::sequence< NurbsTextureCoordinate_type > NurbsTextureCoordinate_sequence;
  typedef NurbsTextureCoordinate_sequence::iterator NurbsTextureCoordinate_iterator;
  typedef NurbsTextureCoordinate_sequence::const_iterator NurbsTextureCoordinate_const_iterator;
  typedef ::xsd::cxx::tree::traits< NurbsTextureCoordinate_type, char > NurbsTextureCoordinate_traits;

  const NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate () const;

  NurbsTextureCoordinate_sequence&
  NurbsTextureCoordinate ();

  void
  NurbsTextureCoordinate (const NurbsTextureCoordinate_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Constructors.
  //
  NurbsTrimmedSurface ();

  NurbsTrimmedSurface (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  NurbsTrimmedSurface (const NurbsTrimmedSurface& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual NurbsTrimmedSurface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~NurbsTrimmedSurface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Contour2D_sequence Contour2D_;
  Coordinate_sequence Coordinate_;
  CoordinateDouble_sequence CoordinateDouble_;
  TextureCoordinate_sequence TextureCoordinate_;
  TextureCoordinateGenerator_sequence TextureCoordinateGenerator_;
  NurbsTextureCoordinate_sequence NurbsTextureCoordinate_;
  ProtoInstance_sequence ProtoInstance_;
};

class CADAssembly: public ::X3DGroupingNode
{
  public:
  // CADPart
  // 
  typedef ::CADPart CADPart_type;
  typedef ::xsd::cxx::tree::sequence< CADPart_type > CADPart_sequence;
  typedef CADPart_sequence::iterator CADPart_iterator;
  typedef CADPart_sequence::const_iterator CADPart_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADPart_type, char > CADPart_traits;

  const CADPart_sequence&
  CADPart () const;

  CADPart_sequence&
  CADPart ();

  void
  CADPart (const CADPart_sequence& s);

  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  CADAssembly ();

  CADAssembly (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  CADAssembly (const CADAssembly& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual CADAssembly*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CADAssembly ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  CADPart_sequence CADPart_;
  name_optional name_;
};

class CADFace: public ::X3DProductStructureChildNode
{
  public:
  // Shape
  // 
  typedef ::Shape Shape_type;
  typedef ::xsd::cxx::tree::optional< Shape_type > Shape_optional;
  typedef ::xsd::cxx::tree::traits< Shape_type, char > Shape_traits;

  const Shape_optional&
  Shape () const;

  Shape_optional&
  Shape ();

  void
  Shape (const Shape_type& x);

  void
  Shape (const Shape_optional& x);

  void
  Shape (::std::auto_ptr< Shape_type > p);

  // LOD
  // 
  typedef ::LOD LOD_type;
  typedef ::xsd::cxx::tree::optional< LOD_type > LOD_optional;
  typedef ::xsd::cxx::tree::traits< LOD_type, char > LOD_traits;

  const LOD_optional&
  LOD () const;

  LOD_optional&
  LOD ();

  void
  LOD (const LOD_type& x);

  void
  LOD (const LOD_optional& x);

  void
  LOD (::std::auto_ptr< LOD_type > p);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::optional< ProtoInstance_type > ProtoInstance_optional;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_optional&
  ProtoInstance () const;

  ProtoInstance_optional&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_type& x);

  void
  ProtoInstance (const ProtoInstance_optional& x);

  void
  ProtoInstance (::std::auto_ptr< ProtoInstance_type > p);

  // bboxCenter
  // 
  typedef ::SFVec3f bboxCenter_type;
  typedef ::xsd::cxx::tree::traits< bboxCenter_type, char > bboxCenter_traits;

  const bboxCenter_type&
  bboxCenter () const;

  bboxCenter_type&
  bboxCenter ();

  void
  bboxCenter (const bboxCenter_type& x);

  void
  bboxCenter (::std::auto_ptr< bboxCenter_type > p);

  static const bboxCenter_type&
  bboxCenter_default_value ();

  // bboxSize
  // 
  typedef ::BoundingBoxSize bboxSize_type;
  typedef ::xsd::cxx::tree::traits< bboxSize_type, char > bboxSize_traits;

  const bboxSize_type&
  bboxSize () const;

  bboxSize_type&
  bboxSize ();

  void
  bboxSize (const bboxSize_type& x);

  void
  bboxSize (::std::auto_ptr< bboxSize_type > p);

  static const bboxSize_type&
  bboxSize_default_value ();

  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  CADFace ();

  CADFace (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  CADFace (const CADFace& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual CADFace*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CADFace ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Shape_optional Shape_;
  LOD_optional LOD_;
  ProtoInstance_optional ProtoInstance_;
  ::xsd::cxx::tree::one< bboxCenter_type > bboxCenter_;
  static const bboxCenter_type bboxCenter_default_value_;
  ::xsd::cxx::tree::one< bboxSize_type > bboxSize_;
  static const bboxSize_type bboxSize_default_value_;
  name_optional name_;
};

class CADLayer: public ::X3DGroupingNode
{
  public:
  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // visible
  // 
  typedef ::MFBool visible_type;
  typedef ::xsd::cxx::tree::optional< visible_type > visible_optional;
  typedef ::xsd::cxx::tree::traits< visible_type, char > visible_traits;

  const visible_optional&
  visible () const;

  visible_optional&
  visible ();

  void
  visible (const visible_type& x);

  void
  visible (const visible_optional& x);

  void
  visible (::std::auto_ptr< visible_type > p);

  // Constructors.
  //
  CADLayer ();

  CADLayer (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  CADLayer (const CADLayer& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual CADLayer*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CADLayer ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  name_optional name_;
  visible_optional visible_;
};

class CADPart: public ::X3DGroupingNode
{
  public:
  // CADFace
  // 
  typedef ::CADFace CADFace_type;
  typedef ::xsd::cxx::tree::sequence< CADFace_type > CADFace_sequence;
  typedef CADFace_sequence::iterator CADFace_iterator;
  typedef CADFace_sequence::const_iterator CADFace_const_iterator;
  typedef ::xsd::cxx::tree::traits< CADFace_type, char > CADFace_traits;

  const CADFace_sequence&
  CADFace () const;

  CADFace_sequence&
  CADFace ();

  void
  CADFace (const CADFace_sequence& s);

  // name
  // 
  typedef ::SFString name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  CADPart ();

  CADPart (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  CADPart (const CADPart& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual CADPart*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CADPart ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  CADFace_sequence CADFace_;
  name_optional name_;
};

class IndexedQuadSet: public ::X3DComposedGeometryNode
{
  public:
  // index
  // 
  typedef ::MFInt32 index_type;
  typedef ::xsd::cxx::tree::optional< index_type > index_optional;
  typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

  const index_optional&
  index () const;

  index_optional&
  index ();

  void
  index (const index_type& x);

  void
  index (const index_optional& x);

  void
  index (::std::auto_ptr< index_type > p);

  // Constructors.
  //
  IndexedQuadSet ();

  IndexedQuadSet (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  IndexedQuadSet (const IndexedQuadSet& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual IndexedQuadSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IndexedQuadSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  index_optional index_;
};

class QuadSet: public ::X3DComposedGeometryNode
{
  public:
  // Constructors.
  //
  QuadSet ();

  QuadSet (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  QuadSet (const QuadSet& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual QuadSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~QuadSet ();
};

class ComposedShader: public ::X3DShaderNode
{
  public:
  // field
  // 
  typedef ::field field_type;
  typedef ::xsd::cxx::tree::sequence< field_type > field_sequence;
  typedef field_sequence::iterator field_iterator;
  typedef field_sequence::const_iterator field_const_iterator;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_sequence&
  field () const;

  field_sequence&
  field ();

  void
  field (const field_sequence& s);

  // ShaderPart
  // 
  typedef ::ShaderPart ShaderPart_type;
  typedef ::xsd::cxx::tree::sequence< ShaderPart_type > ShaderPart_sequence;
  typedef ShaderPart_sequence::iterator ShaderPart_iterator;
  typedef ShaderPart_sequence::const_iterator ShaderPart_const_iterator;
  typedef ::xsd::cxx::tree::traits< ShaderPart_type, char > ShaderPart_traits;

  const ShaderPart_sequence&
  ShaderPart () const;

  ShaderPart_sequence&
  ShaderPart ();

  void
  ShaderPart (const ShaderPart_sequence& s);

  // Constructors.
  //
  ComposedShader ();

  ComposedShader (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  ComposedShader (const ComposedShader& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual ComposedShader*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ComposedShader ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  field_sequence field_;
  ShaderPart_sequence ShaderPart_;
};

class FloatVertexAttribute: public ::X3DVertexAttributeNode
{
  public:
  // value
  // 
  typedef ::MFFloat value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  void
  value (::std::auto_ptr< value_type > p);

  // numComponents
  // 
  typedef ::numComponents numComponents_type;
  typedef ::xsd::cxx::tree::traits< numComponents_type, char > numComponents_traits;

  const numComponents_type&
  numComponents () const;

  numComponents_type&
  numComponents ();

  void
  numComponents (const numComponents_type& x);

  void
  numComponents (::std::auto_ptr< numComponents_type > p);

  static const numComponents_type&
  numComponents_default_value ();

  // Constructors.
  //
  FloatVertexAttribute ();

  FloatVertexAttribute (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  FloatVertexAttribute (const FloatVertexAttribute& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual FloatVertexAttribute*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~FloatVertexAttribute ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  value_optional value_;
  ::xsd::cxx::tree::one< numComponents_type > numComponents_;
  static const numComponents_type numComponents_default_value_;
};

class Matrix3VertexAttribute: public ::X3DVertexAttributeNode
{
  public:
  // value
  // 
  typedef ::MFMatrix3f value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  Matrix3VertexAttribute ();

  Matrix3VertexAttribute (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  Matrix3VertexAttribute (const Matrix3VertexAttribute& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual Matrix3VertexAttribute*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Matrix3VertexAttribute ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  value_optional value_;
};

class Matrix4VertexAttribute: public ::X3DVertexAttributeNode
{
  public:
  // value
  // 
  typedef ::MFMatrix4f value_type;
  typedef ::xsd::cxx::tree::optional< value_type > value_optional;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_optional&
  value () const;

  value_optional&
  value ();

  void
  value (const value_type& x);

  void
  value (const value_optional& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  Matrix4VertexAttribute ();

  Matrix4VertexAttribute (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  Matrix4VertexAttribute (const Matrix4VertexAttribute& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual Matrix4VertexAttribute*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Matrix4VertexAttribute ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  value_optional value_;
};

class PackagedShader: public ::X3DShaderNode
{
  public:
  // field
  // 
  typedef ::field field_type;
  typedef ::xsd::cxx::tree::sequence< field_type > field_sequence;
  typedef field_sequence::iterator field_iterator;
  typedef field_sequence::const_iterator field_const_iterator;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_sequence&
  field () const;

  field_sequence&
  field ();

  void
  field (const field_sequence& s);

  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // Constructors.
  //
  PackagedShader ();

  PackagedShader (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  PackagedShader (const PackagedShader& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual PackagedShader*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PackagedShader ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  field_sequence field_;
  url_optional url_;
};

class ProgramShader: public ::X3DShaderNode
{
  public:
  // ShaderProgram
  // 
  typedef ::ShaderProgram ShaderProgram_type;
  typedef ::xsd::cxx::tree::sequence< ShaderProgram_type > ShaderProgram_sequence;
  typedef ShaderProgram_sequence::iterator ShaderProgram_iterator;
  typedef ShaderProgram_sequence::const_iterator ShaderProgram_const_iterator;
  typedef ::xsd::cxx::tree::traits< ShaderProgram_type, char > ShaderProgram_traits;

  const ShaderProgram_sequence&
  ShaderProgram () const;

  ShaderProgram_sequence&
  ShaderProgram ();

  void
  ShaderProgram (const ShaderProgram_sequence& s);

  // Constructors.
  //
  ProgramShader ();

  ProgramShader (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ProgramShader (const ProgramShader& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ProgramShader*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ProgramShader ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ShaderProgram_sequence ShaderProgram_;
};

class ShaderPart: public ::X3DNode
{
  public:
  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // type
  // 
  typedef ::shaderPartTypeValues type_type;
  typedef ::xsd::cxx::tree::optional< type_type > type_optional;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_optional&
  type () const;

  type_optional&
  type ();

  void
  type (const type_type& x);

  void
  type (const type_optional& x);

  void
  type (::std::auto_ptr< type_type > p);

  // Constructors.
  //
  ShaderPart ();

  ShaderPart (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  ShaderPart (const ShaderPart& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual ShaderPart*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ShaderPart ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
  url_optional url_;
  type_optional type_;
};

class ShaderProgram: public ::X3DNode
{
  public:
  // field
  // 
  typedef ::field field_type;
  typedef ::xsd::cxx::tree::sequence< field_type > field_sequence;
  typedef field_sequence::iterator field_iterator;
  typedef field_sequence::const_iterator field_const_iterator;
  typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

  const field_sequence&
  field () const;

  field_sequence&
  field ();

  void
  field (const field_sequence& s);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // type
  // 
  typedef ::shaderPartTypeValues type_type;
  typedef ::xsd::cxx::tree::optional< type_type > type_optional;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_optional&
  type () const;

  type_optional&
  type ();

  void
  type (const type_type& x);

  void
  type (const type_optional& x);

  void
  type (::std::auto_ptr< type_type > p);

  // Constructors.
  //
  ShaderProgram ();

  ShaderProgram (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ShaderProgram (const ShaderProgram& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ShaderProgram*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ShaderProgram ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  field_sequence field_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
  url_optional url_;
  type_optional type_;
};

class ComposedCubeMapTexture: public ::X3DEnvironmentTextureNode
{
  public:
  // ImageTexture
  // 
  typedef ::ImageTexture ImageTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageTexture_type > ImageTexture_sequence;
  typedef ImageTexture_sequence::iterator ImageTexture_iterator;
  typedef ImageTexture_sequence::const_iterator ImageTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageTexture_type, char > ImageTexture_traits;

  const ImageTexture_sequence&
  ImageTexture () const;

  ImageTexture_sequence&
  ImageTexture ();

  void
  ImageTexture (const ImageTexture_sequence& s);

  // PixelTexture
  // 
  typedef ::PixelTexture PixelTexture_type;
  typedef ::xsd::cxx::tree::sequence< PixelTexture_type > PixelTexture_sequence;
  typedef PixelTexture_sequence::iterator PixelTexture_iterator;
  typedef PixelTexture_sequence::const_iterator PixelTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< PixelTexture_type, char > PixelTexture_traits;

  const PixelTexture_sequence&
  PixelTexture () const;

  PixelTexture_sequence&
  PixelTexture ();

  void
  PixelTexture (const PixelTexture_sequence& s);

  // MovieTexture
  // 
  typedef ::MovieTexture MovieTexture_type;
  typedef ::xsd::cxx::tree::sequence< MovieTexture_type > MovieTexture_sequence;
  typedef MovieTexture_sequence::iterator MovieTexture_iterator;
  typedef MovieTexture_sequence::const_iterator MovieTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MovieTexture_type, char > MovieTexture_traits;

  const MovieTexture_sequence&
  MovieTexture () const;

  MovieTexture_sequence&
  MovieTexture ();

  void
  MovieTexture (const MovieTexture_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Constructors.
  //
  ComposedCubeMapTexture ();

  ComposedCubeMapTexture (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  ComposedCubeMapTexture (const ComposedCubeMapTexture& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual ComposedCubeMapTexture*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ComposedCubeMapTexture ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ImageTexture_sequence ImageTexture_;
  PixelTexture_sequence PixelTexture_;
  MovieTexture_sequence MovieTexture_;
  ProtoInstance_sequence ProtoInstance_;
};

class GeneratedCubeMapTexture: public ::X3DEnvironmentTextureNode
{
  public:
  // update
  // 
  typedef ::update update_type;
  typedef ::xsd::cxx::tree::traits< update_type, char > update_traits;

  const update_type&
  update () const;

  update_type&
  update ();

  void
  update (const update_type& x);

  void
  update (::std::auto_ptr< update_type > p);

  static const update_type&
  update_default_value ();

  // size
  // 
  typedef ::size size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  static const size_type&
  size_default_value ();

  // Constructors.
  //
  GeneratedCubeMapTexture ();

  GeneratedCubeMapTexture (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  GeneratedCubeMapTexture (const GeneratedCubeMapTexture& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual GeneratedCubeMapTexture*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GeneratedCubeMapTexture ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< update_type > update_;
  static const update_type update_default_value_;
  ::xsd::cxx::tree::one< size_type > size_;
  static const size_type size_default_value_;
};

class ImageCubeMapTexture: public ::X3DEnvironmentTextureNode
{
  public:
  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // Constructors.
  //
  ImageCubeMapTexture ();

  ImageCubeMapTexture (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  ImageCubeMapTexture (const ImageCubeMapTexture& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual ImageCubeMapTexture*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ImageCubeMapTexture ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  url_optional url_;
};

class ComposedTexture3D: public ::X3DTexture3DNode
{
  public:
  // ImageTexture
  // 
  typedef ::ImageTexture ImageTexture_type;
  typedef ::xsd::cxx::tree::sequence< ImageTexture_type > ImageTexture_sequence;
  typedef ImageTexture_sequence::iterator ImageTexture_iterator;
  typedef ImageTexture_sequence::const_iterator ImageTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< ImageTexture_type, char > ImageTexture_traits;

  const ImageTexture_sequence&
  ImageTexture () const;

  ImageTexture_sequence&
  ImageTexture ();

  void
  ImageTexture (const ImageTexture_sequence& s);

  // PixelTexture
  // 
  typedef ::PixelTexture PixelTexture_type;
  typedef ::xsd::cxx::tree::sequence< PixelTexture_type > PixelTexture_sequence;
  typedef PixelTexture_sequence::iterator PixelTexture_iterator;
  typedef PixelTexture_sequence::const_iterator PixelTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< PixelTexture_type, char > PixelTexture_traits;

  const PixelTexture_sequence&
  PixelTexture () const;

  PixelTexture_sequence&
  PixelTexture ();

  void
  PixelTexture (const PixelTexture_sequence& s);

  // MovieTexture
  // 
  typedef ::MovieTexture MovieTexture_type;
  typedef ::xsd::cxx::tree::sequence< MovieTexture_type > MovieTexture_sequence;
  typedef MovieTexture_sequence::iterator MovieTexture_iterator;
  typedef MovieTexture_sequence::const_iterator MovieTexture_const_iterator;
  typedef ::xsd::cxx::tree::traits< MovieTexture_type, char > MovieTexture_traits;

  const MovieTexture_sequence&
  MovieTexture () const;

  MovieTexture_sequence&
  MovieTexture ();

  void
  MovieTexture (const MovieTexture_sequence& s);

  // ProtoInstance
  // 
  typedef ::ProtoInstance ProtoInstance_type;
  typedef ::xsd::cxx::tree::sequence< ProtoInstance_type > ProtoInstance_sequence;
  typedef ProtoInstance_sequence::iterator ProtoInstance_iterator;
  typedef ProtoInstance_sequence::const_iterator ProtoInstance_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProtoInstance_type, char > ProtoInstance_traits;

  const ProtoInstance_sequence&
  ProtoInstance () const;

  ProtoInstance_sequence&
  ProtoInstance ();

  void
  ProtoInstance (const ProtoInstance_sequence& s);

  // Constructors.
  //
  ComposedTexture3D ();

  ComposedTexture3D (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  ComposedTexture3D (const ComposedTexture3D& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual ComposedTexture3D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ComposedTexture3D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ImageTexture_sequence ImageTexture_;
  PixelTexture_sequence PixelTexture_;
  MovieTexture_sequence MovieTexture_;
  ProtoInstance_sequence ProtoInstance_;
};

class ImageTexture3D: public ::X3DTexture3DNode
{
  public:
  // url
  // 
  typedef ::MFString url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // Constructors.
  //
  ImageTexture3D ();

  ImageTexture3D (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  ImageTexture3D (const ImageTexture3D& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual ImageTexture3D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ImageTexture3D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  url_optional url_;
};

class PixelTexture3D: public ::X3DTexture3DNode
{
  public:
  // image
  // 
  typedef ::MFInt32 image_type;
  typedef ::xsd::cxx::tree::traits< image_type, char > image_traits;

  const image_type&
  image () const;

  image_type&
  image ();

  void
  image (const image_type& x);

  void
  image (::std::auto_ptr< image_type > p);

  static const image_type&
  image_default_value ();

  // Constructors.
  //
  PixelTexture3D ();

  PixelTexture3D (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  PixelTexture3D (const PixelTexture3D& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual PixelTexture3D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PixelTexture3D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< image_type > image_;
  static const image_type image_default_value_;
};

class TextureCoordinate3D: public ::X3DTextureCoordinateNode
{
  public:
  // point
  // 
  typedef ::MFVec3f point_type;
  typedef ::xsd::cxx::tree::optional< point_type > point_optional;
  typedef ::xsd::cxx::tree::traits< point_type, char > point_traits;

  const point_optional&
  point () const;

  point_optional&
  point ();

  void
  point (const point_type& x);

  void
  point (const point_optional& x);

  void
  point (::std::auto_ptr< point_type > p);

  // Constructors.
  //
  TextureCoordinate3D ();

  TextureCoordinate3D (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  TextureCoordinate3D (const TextureCoordinate3D& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual TextureCoordinate3D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TextureCoordinate3D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  point_optional point_;
};

class TextureCoordinate4D: public ::X3DTextureCoordinateNode
{
  public:
  // point
  // 
  typedef ::MFVec4f point_type;
  typedef ::xsd::cxx::tree::optional< point_type > point_optional;
  typedef ::xsd::cxx::tree::traits< point_type, char > point_traits;

  const point_optional&
  point () const;

  point_optional&
  point ();

  void
  point (const point_type& x);

  void
  point (const point_optional& x);

  void
  point (::std::auto_ptr< point_type > p);

  // Constructors.
  //
  TextureCoordinate4D ();

  TextureCoordinate4D (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  TextureCoordinate4D (const TextureCoordinate4D& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual TextureCoordinate4D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TextureCoordinate4D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  point_optional point_;
};

class TextureMatrixTransform: public ::X3DTextureTransformNode
{
  public:
  // matrix
  // 
  typedef ::SFMatrix4f matrix_type;
  typedef ::xsd::cxx::tree::traits< matrix_type, char > matrix_traits;

  const matrix_type&
  matrix () const;

  matrix_type&
  matrix ();

  void
  matrix (const matrix_type& x);

  void
  matrix (::std::auto_ptr< matrix_type > p);

  static const matrix_type&
  matrix_default_value ();

  // Constructors.
  //
  TextureMatrixTransform ();

  TextureMatrixTransform (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  TextureMatrixTransform (const TextureMatrixTransform& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual TextureMatrixTransform*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TextureMatrixTransform ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< matrix_type > matrix_;
  static const matrix_type matrix_default_value_;
};

class TextureTransform3D: public ::X3DTextureTransformNode
{
  public:
  // center
  // 
  typedef ::SFVec3f center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::auto_ptr< center_type > p);

  static const center_type&
  center_default_value ();

  // rotation
  // 
  typedef ::SFRotation rotation_type;
  typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

  const rotation_type&
  rotation () const;

  rotation_type&
  rotation ();

  void
  rotation (const rotation_type& x);

  void
  rotation (::std::auto_ptr< rotation_type > p);

  static const rotation_type&
  rotation_default_value ();

  // scale
  // 
  typedef ::SFVec3f scale_type;
  typedef ::xsd::cxx::tree::traits< scale_type, char > scale_traits;

  const scale_type&
  scale () const;

  scale_type&
  scale ();

  void
  scale (const scale_type& x);

  void
  scale (::std::auto_ptr< scale_type > p);

  static const scale_type&
  scale_default_value ();

  // translation
  // 
  typedef ::SFVec3f translation_type;
  typedef ::xsd::cxx::tree::traits< translation_type, char > translation_traits;

  const translation_type&
  translation () const;

  translation_type&
  translation ();

  void
  translation (const translation_type& x);

  void
  translation (::std::auto_ptr< translation_type > p);

  static const translation_type&
  translation_default_value ();

  // Constructors.
  //
  TextureTransform3D ();

  TextureTransform3D (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  TextureTransform3D (const TextureTransform3D& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual TextureTransform3D*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TextureTransform3D ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< center_type > center_;
  static const center_type center_default_value_;
  ::xsd::cxx::tree::one< rotation_type > rotation_;
  static const rotation_type rotation_default_value_;
  ::xsd::cxx::tree::one< scale_type > scale_;
  static const scale_type scale_default_value_;
  ::xsd::cxx::tree::one< translation_type > translation_;
  static const translation_type translation_default_value_;
};

class radius: public ::SFFloat
{
  public:
  // Constructors.
  //
  radius (const ::xml_schema::float_&);

  radius (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  radius (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  radius (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  radius (const radius& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual radius*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~radius ();
};

class radius1: public ::SFFloat
{
  public:
  // Constructors.
  //
  radius1 (const ::xml_schema::float_&);

  radius1 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius1 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius1 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius1 (const radius1& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual radius1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~radius1 ();
};

class radius2: public ::SFFloat
{
  public:
  // Constructors.
  //
  radius2 (const ::xml_schema::float_&);

  radius2 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius2 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius2 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius2 (const radius2& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual radius2*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~radius2 ();
};

class bottomRadius: public ::SFFloat
{
  public:
  // Constructors.
  //
  bottomRadius (const ::xml_schema::float_&);

  bottomRadius (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  bottomRadius (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  bottomRadius (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  bottomRadius (const bottomRadius& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual bottomRadius*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~bottomRadius ();
};

class height: public ::SFFloat
{
  public:
  // Constructors.
  //
  height (const ::xml_schema::float_&);

  height (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  height (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  height (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  height (const height& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual height*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~height ();
};

class height1: public ::SFFloat
{
  public:
  // Constructors.
  //
  height1 (const ::xml_schema::float_&);

  height1 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  height1 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  height1 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  height1 (const height1& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual height1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~height1 ();
};

class radius3: public ::SFFloat
{
  public:
  // Constructors.
  //
  radius3 (const ::xml_schema::float_&);

  radius3 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius3 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius3 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius3 (const radius3& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual radius3*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~radius3 ();
};

class innerRadius: public ::SFFloat
{
  public:
  // Constructors.
  //
  innerRadius (const ::xml_schema::float_&);

  innerRadius (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  innerRadius (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  innerRadius (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  innerRadius (const innerRadius& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual innerRadius*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~innerRadius ();
};

class outerRadius: public ::SFFloat
{
  public:
  // Constructors.
  //
  outerRadius (const ::xml_schema::float_&);

  outerRadius (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  outerRadius (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  outerRadius (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  outerRadius (const outerRadius& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual outerRadius*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~outerRadius ();
};

class creaseAngle: public ::SFFloat
{
  public:
  // Constructors.
  //
  creaseAngle (const ::xml_schema::float_&);

  creaseAngle (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  creaseAngle (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  creaseAngle (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  creaseAngle (const creaseAngle& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual creaseAngle*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~creaseAngle ();
};

class xSpacing: public ::SFFloat
{
  public:
  // Constructors.
  //
  xSpacing (const ::xml_schema::float_&);

  xSpacing (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  xSpacing (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  xSpacing (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  xSpacing (const xSpacing& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual xSpacing*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~xSpacing ();
};

class zSpacing: public ::SFFloat
{
  public:
  // Constructors.
  //
  zSpacing (const ::xml_schema::float_&);

  zSpacing (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  zSpacing (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  zSpacing (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  zSpacing (const zSpacing& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual zSpacing*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~zSpacing ();
};

class creaseAngle1: public ::SFFloat
{
  public:
  // Constructors.
  //
  creaseAngle1 (const ::xml_schema::float_&);

  creaseAngle1 (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  creaseAngle1 (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  creaseAngle1 (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  creaseAngle1 (const creaseAngle1& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual creaseAngle1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~creaseAngle1 ();
};

class creaseAngle2: public ::SFFloat
{
  public:
  // Constructors.
  //
  creaseAngle2 (const ::xml_schema::float_&);

  creaseAngle2 (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  creaseAngle2 (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  creaseAngle2 (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  creaseAngle2 (const creaseAngle2& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual creaseAngle2*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~creaseAngle2 ();
};

class ambientIntensity1: public ::SFFloat
{
  public:
  // Constructors.
  //
  ambientIntensity1 (const ::xml_schema::float_&);

  ambientIntensity1 (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  ambientIntensity1 (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  ambientIntensity1 (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  ambientIntensity1 (const ambientIntensity1& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual ambientIntensity1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ambientIntensity1 ();
};

class shininess: public ::SFFloat
{
  public:
  // Constructors.
  //
  shininess (const ::xml_schema::float_&);

  shininess (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  shininess (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  shininess (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  shininess (const shininess& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual shininess*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~shininess ();
};

class transparency: public ::SFFloat
{
  public:
  // Constructors.
  //
  transparency (const ::xml_schema::float_&);

  transparency (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  transparency (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  transparency (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  transparency (const transparency& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual transparency*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~transparency ();
};

class radius4: public ::SFFloat
{
  public:
  // Constructors.
  //
  radius4 (const ::xml_schema::float_&);

  radius4 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius4 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius4 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius4 (const radius4& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual radius4*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~radius4 ();
};

class radius5: public ::SFFloat
{
  public:
  // Constructors.
  //
  radius5 (const ::xml_schema::float_&);

  radius5 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius5 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius5 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius5 (const radius5& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual radius5*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~radius5 ();
};

class beamWidth: public ::SFFloat
{
  public:
  // Constructors.
  //
  beamWidth (const ::xml_schema::float_&);

  beamWidth (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  beamWidth (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  beamWidth (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  beamWidth (const beamWidth& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual beamWidth*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~beamWidth ();
};

class radius6: public ::SFFloat
{
  public:
  // Constructors.
  //
  radius6 (const ::xml_schema::float_&);

  radius6 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius6 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius6 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  radius6 (const radius6& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual radius6*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~radius6 ();
};

class maxExtent: public ::SFFloat
{
  public:
  // Constructors.
  //
  maxExtent (const ::xml_schema::float_&);

  maxExtent (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  maxExtent (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  maxExtent (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  maxExtent (const maxExtent& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual maxExtent*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~maxExtent ();
};

class creaseAngle3: public ::SFFloat
{
  public:
  // Constructors.
  //
  creaseAngle3 (const ::xml_schema::float_&);

  creaseAngle3 (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  creaseAngle3 (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  creaseAngle3 (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  creaseAngle3 (const creaseAngle3& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual creaseAngle3*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~creaseAngle3 ();
};

class xSpacing1: public ::SFDouble
{
  public:
  // Constructors.
  //
  xSpacing1 (const ::xml_schema::double_&);

  xSpacing1 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  xSpacing1 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  xSpacing1 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  xSpacing1 (const xSpacing1& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual xSpacing1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~xSpacing1 ();
};

class yScale: public ::SFFloat
{
  public:
  // Constructors.
  //
  yScale (const ::xml_schema::float_&);

  yScale (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  yScale (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  yScale (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  yScale (const yScale& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual yScale*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~yScale ();
};

class zSpacing1: public ::SFDouble
{
  public:
  // Constructors.
  //
  zSpacing1 (const ::xml_schema::double_&);

  zSpacing1 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  zSpacing1 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  zSpacing1 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  zSpacing1 (const zSpacing1& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual zSpacing1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~zSpacing1 ();
};

class numComponents: public ::SFInt32
{
  public:
  // Constructors.
  //
  numComponents (const ::xml_schema::integer&);

  numComponents (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  numComponents (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  numComponents (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  numComponents (const numComponents& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual numComponents*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~numComponents ();
};

class update: public ::SFString
{
  public:
  enum value
  {
    NONE,
    NEXT_FRAME_ONLY,
    ALWAYS
  };

  update (value v);

  update (const char* v);

  update (const ::std::string& v);

  update (const ::SFString& v);

  update (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  update (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  update (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  update (const update& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual update*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  update&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_update_convert ();
  }

  protected:
  value
  _xsd_update_convert () const;

  public:
  static const char* const _xsd_update_literals_[3];
  static const value _xsd_update_indexes_[3];
};

class size: public ::SFInt32
{
  public:
  // Constructors.
  //
  size (const ::xml_schema::integer&);

  size (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  size (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  size (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  size (const size& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual size*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~size ();
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::X3D >
X3D_ (const ::std::string& uri,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::X3D >
X3D_ (const ::std::string& uri,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::X3D >
X3D_ (const ::std::string& uri,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::X3D >
X3D_ (::std::istream& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::X3D >
X3D_ (::std::istream& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::X3D >
X3D_ (::std::istream& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::X3D >
X3D_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::X3D >
X3D_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::X3D >
X3D_ (::std::istream& is,
      const ::std::string& id,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::X3D >
X3D_ (::xercesc::InputSource& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::X3D >
X3D_ (::xercesc::InputSource& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::X3D >
X3D_ (::xercesc::InputSource& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::X3D >
X3D_ (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::X3D >
X3D_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // X3D_3_1_HXX
