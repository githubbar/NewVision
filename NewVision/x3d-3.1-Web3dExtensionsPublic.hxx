// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef X3D_3_1_WEB3D_EXTENSIONS_PUBLIC_HXX
#define X3D_3_1_WEB3D_EXTENSIONS_PUBLIC_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3010000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class XvlShell_shellTypes;
class XvlShell;

#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "x3d-3.1.hxx"

class XvlShell_shellTypes: public ::xml_schema::string
{
  public:
  enum value
  {
    POLYGON_MESH,
    LATTICE_MESH
  };

  XvlShell_shellTypes (value v);

  XvlShell_shellTypes (const char* v);

  XvlShell_shellTypes (const ::std::string& v);

  XvlShell_shellTypes (const ::xml_schema::string& v);

  XvlShell_shellTypes (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  XvlShell_shellTypes (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  XvlShell_shellTypes (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  XvlShell_shellTypes (const XvlShell_shellTypes& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual XvlShell_shellTypes*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  XvlShell_shellTypes&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_XvlShell_shellTypes_convert ();
  }

  protected:
  value
  _xsd_XvlShell_shellTypes_convert () const;

  public:
  static const char* const _xsd_XvlShell_shellTypes_literals_[2];
  static const value _xsd_XvlShell_shellTypes_indexes_[2];
};

class XvlShell: public ::xml_schema::type
{
  public:
  // IS
  // 
  typedef ::IS IS_type;
  typedef ::xsd::cxx::tree::optional< IS_type > IS_optional;
  typedef ::xsd::cxx::tree::traits< IS_type, char > IS_traits;

  const IS_optional&
  IS () const;

  IS_optional&
  IS ();

  void
  IS (const IS_type& x);

  void
  IS (const IS_optional& x);

  void
  IS (::std::auto_ptr< IS_type > p);

  // MetadataDouble
  // 
  typedef ::MetadataDouble MetadataDouble_type;
  typedef ::xsd::cxx::tree::optional< MetadataDouble_type > MetadataDouble_optional;
  typedef ::xsd::cxx::tree::traits< MetadataDouble_type, char > MetadataDouble_traits;

  const MetadataDouble_optional&
  MetadataDouble () const;

  MetadataDouble_optional&
  MetadataDouble ();

  void
  MetadataDouble (const MetadataDouble_type& x);

  void
  MetadataDouble (const MetadataDouble_optional& x);

  void
  MetadataDouble (::std::auto_ptr< MetadataDouble_type > p);

  // MetadataFloat
  // 
  typedef ::MetadataFloat MetadataFloat_type;
  typedef ::xsd::cxx::tree::optional< MetadataFloat_type > MetadataFloat_optional;
  typedef ::xsd::cxx::tree::traits< MetadataFloat_type, char > MetadataFloat_traits;

  const MetadataFloat_optional&
  MetadataFloat () const;

  MetadataFloat_optional&
  MetadataFloat ();

  void
  MetadataFloat (const MetadataFloat_type& x);

  void
  MetadataFloat (const MetadataFloat_optional& x);

  void
  MetadataFloat (::std::auto_ptr< MetadataFloat_type > p);

  // MetadataInteger
  // 
  typedef ::MetadataInteger MetadataInteger_type;
  typedef ::xsd::cxx::tree::optional< MetadataInteger_type > MetadataInteger_optional;
  typedef ::xsd::cxx::tree::traits< MetadataInteger_type, char > MetadataInteger_traits;

  const MetadataInteger_optional&
  MetadataInteger () const;

  MetadataInteger_optional&
  MetadataInteger ();

  void
  MetadataInteger (const MetadataInteger_type& x);

  void
  MetadataInteger (const MetadataInteger_optional& x);

  void
  MetadataInteger (::std::auto_ptr< MetadataInteger_type > p);

  // MetadataSet
  // 
  typedef ::MetadataSet MetadataSet_type;
  typedef ::xsd::cxx::tree::optional< MetadataSet_type > MetadataSet_optional;
  typedef ::xsd::cxx::tree::traits< MetadataSet_type, char > MetadataSet_traits;

  const MetadataSet_optional&
  MetadataSet () const;

  MetadataSet_optional&
  MetadataSet ();

  void
  MetadataSet (const MetadataSet_type& x);

  void
  MetadataSet (const MetadataSet_optional& x);

  void
  MetadataSet (::std::auto_ptr< MetadataSet_type > p);

  // MetadataString
  // 
  typedef ::MetadataString MetadataString_type;
  typedef ::xsd::cxx::tree::optional< MetadataString_type > MetadataString_optional;
  typedef ::xsd::cxx::tree::traits< MetadataString_type, char > MetadataString_traits;

  const MetadataString_optional&
  MetadataString () const;

  MetadataString_optional&
  MetadataString ();

  void
  MetadataString (const MetadataString_type& x);

  void
  MetadataString (const MetadataString_optional& x);

  void
  MetadataString (::std::auto_ptr< MetadataString_type > p);

  // DEF
  // 
  typedef ::xml_schema::id DEF_type;
  typedef ::xsd::cxx::tree::optional< DEF_type > DEF_optional;
  typedef ::xsd::cxx::tree::traits< DEF_type, char > DEF_traits;

  const DEF_optional&
  DEF () const;

  DEF_optional&
  DEF ();

  void
  DEF (const DEF_type& x);

  void
  DEF (const DEF_optional& x);

  void
  DEF (::std::auto_ptr< DEF_type > p);

  // USE
  // 
  typedef ::xml_schema::idref USE_type;
  typedef ::xsd::cxx::tree::optional< USE_type > USE_optional;
  typedef ::xsd::cxx::tree::traits< USE_type, char > USE_traits;

  const USE_optional&
  USE () const;

  USE_optional&
  USE ();

  void
  USE (const USE_type& x);

  void
  USE (const USE_optional& x);

  void
  USE (::std::auto_ptr< USE_type > p);

  // shellType
  // 
  typedef ::XvlShell_shellTypes shellType_type;
  typedef ::xsd::cxx::tree::optional< shellType_type > shellType_optional;
  typedef ::xsd::cxx::tree::traits< shellType_type, char > shellType_traits;

  const shellType_optional&
  shellType () const;

  shellType_optional&
  shellType ();

  void
  shellType (const shellType_type& x);

  void
  shellType (const shellType_optional& x);

  void
  shellType (::std::auto_ptr< shellType_type > p);

  // numberOfDivisions
  // 
  typedef ::SFInt32 numberOfDivisions_type;
  typedef ::xsd::cxx::tree::optional< numberOfDivisions_type > numberOfDivisions_optional;
  typedef ::xsd::cxx::tree::traits< numberOfDivisions_type, char > numberOfDivisions_traits;

  const numberOfDivisions_optional&
  numberOfDivisions () const;

  numberOfDivisions_optional&
  numberOfDivisions ();

  void
  numberOfDivisions (const numberOfDivisions_type& x);

  void
  numberOfDivisions (const numberOfDivisions_optional& x);

  void
  numberOfDivisions (::std::auto_ptr< numberOfDivisions_type > p);

  // vertexRound
  // 
  typedef ::MFFloat vertexRound_type;
  typedef ::xsd::cxx::tree::optional< vertexRound_type > vertexRound_optional;
  typedef ::xsd::cxx::tree::traits< vertexRound_type, char > vertexRound_traits;

  const vertexRound_optional&
  vertexRound () const;

  vertexRound_optional&
  vertexRound ();

  void
  vertexRound (const vertexRound_type& x);

  void
  vertexRound (const vertexRound_optional& x);

  void
  vertexRound (::std::auto_ptr< vertexRound_type > p);

  // edgeBeginCoordIndex
  // 
  typedef ::MFInt32 edgeBeginCoordIndex_type;
  typedef ::xsd::cxx::tree::optional< edgeBeginCoordIndex_type > edgeBeginCoordIndex_optional;
  typedef ::xsd::cxx::tree::traits< edgeBeginCoordIndex_type, char > edgeBeginCoordIndex_traits;

  const edgeBeginCoordIndex_optional&
  edgeBeginCoordIndex () const;

  edgeBeginCoordIndex_optional&
  edgeBeginCoordIndex ();

  void
  edgeBeginCoordIndex (const edgeBeginCoordIndex_type& x);

  void
  edgeBeginCoordIndex (const edgeBeginCoordIndex_optional& x);

  void
  edgeBeginCoordIndex (::std::auto_ptr< edgeBeginCoordIndex_type > p);

  // edgeEndCoordIndex
  // 
  typedef ::MFInt32 edgeEndCoordIndex_type;
  typedef ::xsd::cxx::tree::optional< edgeEndCoordIndex_type > edgeEndCoordIndex_optional;
  typedef ::xsd::cxx::tree::traits< edgeEndCoordIndex_type, char > edgeEndCoordIndex_traits;

  const edgeEndCoordIndex_optional&
  edgeEndCoordIndex () const;

  edgeEndCoordIndex_optional&
  edgeEndCoordIndex ();

  void
  edgeEndCoordIndex (const edgeEndCoordIndex_type& x);

  void
  edgeEndCoordIndex (const edgeEndCoordIndex_optional& x);

  void
  edgeEndCoordIndex (::std::auto_ptr< edgeEndCoordIndex_type > p);

  // edgeRound
  // 
  typedef ::MFFloat edgeRound_type;
  typedef ::xsd::cxx::tree::optional< edgeRound_type > edgeRound_optional;
  typedef ::xsd::cxx::tree::traits< edgeRound_type, char > edgeRound_traits;

  const edgeRound_optional&
  edgeRound () const;

  edgeRound_optional&
  edgeRound ();

  void
  edgeRound (const edgeRound_type& x);

  void
  edgeRound (const edgeRound_optional& x);

  void
  edgeRound (::std::auto_ptr< edgeRound_type > p);

  // edgeBeginVector
  // 
  typedef ::MFVec3f edgeBeginVector_type;
  typedef ::xsd::cxx::tree::optional< edgeBeginVector_type > edgeBeginVector_optional;
  typedef ::xsd::cxx::tree::traits< edgeBeginVector_type, char > edgeBeginVector_traits;

  const edgeBeginVector_optional&
  edgeBeginVector () const;

  edgeBeginVector_optional&
  edgeBeginVector ();

  void
  edgeBeginVector (const edgeBeginVector_type& x);

  void
  edgeBeginVector (const edgeBeginVector_optional& x);

  void
  edgeBeginVector (::std::auto_ptr< edgeBeginVector_type > p);

  // edgeEndVector
  // 
  typedef ::MFVec3f edgeEndVector_type;
  typedef ::xsd::cxx::tree::optional< edgeEndVector_type > edgeEndVector_optional;
  typedef ::xsd::cxx::tree::traits< edgeEndVector_type, char > edgeEndVector_traits;

  const edgeEndVector_optional&
  edgeEndVector () const;

  edgeEndVector_optional&
  edgeEndVector ();

  void
  edgeEndVector (const edgeEndVector_type& x);

  void
  edgeEndVector (const edgeEndVector_optional& x);

  void
  edgeEndVector (::std::auto_ptr< edgeEndVector_type > p);

  // faceCoordIndex
  // 
  typedef ::MFInt32 faceCoordIndex_type;
  typedef ::xsd::cxx::tree::optional< faceCoordIndex_type > faceCoordIndex_optional;
  typedef ::xsd::cxx::tree::traits< faceCoordIndex_type, char > faceCoordIndex_traits;

  const faceCoordIndex_optional&
  faceCoordIndex () const;

  faceCoordIndex_optional&
  faceCoordIndex ();

  void
  faceCoordIndex (const faceCoordIndex_type& x);

  void
  faceCoordIndex (const faceCoordIndex_optional& x);

  void
  faceCoordIndex (::std::auto_ptr< faceCoordIndex_type > p);

  // faceTexCoordIndex
  // 
  typedef ::MFInt32 faceTexCoordIndex_type;
  typedef ::xsd::cxx::tree::optional< faceTexCoordIndex_type > faceTexCoordIndex_optional;
  typedef ::xsd::cxx::tree::traits< faceTexCoordIndex_type, char > faceTexCoordIndex_traits;

  const faceTexCoordIndex_optional&
  faceTexCoordIndex () const;

  faceTexCoordIndex_optional&
  faceTexCoordIndex ();

  void
  faceTexCoordIndex (const faceTexCoordIndex_type& x);

  void
  faceTexCoordIndex (const faceTexCoordIndex_optional& x);

  void
  faceTexCoordIndex (::std::auto_ptr< faceTexCoordIndex_type > p);

  // faceEmpty
  // 
  typedef ::MFBool faceEmpty_type;
  typedef ::xsd::cxx::tree::optional< faceEmpty_type > faceEmpty_optional;
  typedef ::xsd::cxx::tree::traits< faceEmpty_type, char > faceEmpty_traits;

  const faceEmpty_optional&
  faceEmpty () const;

  faceEmpty_optional&
  faceEmpty ();

  void
  faceEmpty (const faceEmpty_type& x);

  void
  faceEmpty (const faceEmpty_optional& x);

  void
  faceEmpty (::std::auto_ptr< faceEmpty_type > p);

  // faceHidden
  // 
  typedef ::MFBool faceHidden_type;
  typedef ::xsd::cxx::tree::optional< faceHidden_type > faceHidden_optional;
  typedef ::xsd::cxx::tree::traits< faceHidden_type, char > faceHidden_traits;

  const faceHidden_optional&
  faceHidden () const;

  faceHidden_optional&
  faceHidden ();

  void
  faceHidden (const faceHidden_type& x);

  void
  faceHidden (const faceHidden_optional& x);

  void
  faceHidden (::std::auto_ptr< faceHidden_type > p);

  // containerField
  // 
  typedef ::xml_schema::nmtoken containerField_type;
  typedef ::xsd::cxx::tree::traits< containerField_type, char > containerField_traits;

  const containerField_type&
  containerField () const;

  containerField_type&
  containerField ();

  void
  containerField (const containerField_type& x);

  void
  containerField (::std::auto_ptr< containerField_type > p);

  static const containerField_type&
  containerField_default_value ();

  // Constructors.
  //
  XvlShell ();

  XvlShell (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  XvlShell (const XvlShell& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual XvlShell*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XvlShell ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  IS_optional IS_;
  MetadataDouble_optional MetadataDouble_;
  MetadataFloat_optional MetadataFloat_;
  MetadataInteger_optional MetadataInteger_;
  MetadataSet_optional MetadataSet_;
  MetadataString_optional MetadataString_;
  DEF_optional DEF_;
  USE_optional USE_;
  shellType_optional shellType_;
  numberOfDivisions_optional numberOfDivisions_;
  vertexRound_optional vertexRound_;
  edgeBeginCoordIndex_optional edgeBeginCoordIndex_;
  edgeEndCoordIndex_optional edgeEndCoordIndex_;
  edgeRound_optional edgeRound_;
  edgeBeginVector_optional edgeBeginVector_;
  edgeEndVector_optional edgeEndVector_;
  faceCoordIndex_optional faceCoordIndex_;
  faceTexCoordIndex_optional faceTexCoordIndex_;
  faceEmpty_optional faceEmpty_;
  faceHidden_optional faceHidden_;
  ::xsd::cxx::tree::one< containerField_type > containerField_;
  static const containerField_type containerField_default_value_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // X3D_3_1_WEB3D_EXTENSIONS_PUBLIC_HXX
